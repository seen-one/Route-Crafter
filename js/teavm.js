"use strict";
(function(module) {
    if (typeof define === 'function' && define.amd) {
        define(['exports'], function(exports)  {
            module(exports);
        });
    } else if (typeof exports === 'object' && exports !== null && typeof exports.nodeName !== 'string') {
        module(exports);
    } else {
        module(typeof self !== 'undefined' ? self : this);
}
}(function($rt_exports) {
let $rt_seed = 2463534242,
$rt_nextId = () => {
    let x = $rt_seed;
    x ^= x << 13;
    x ^= x >>> 17;
    x ^= x << 5;
    $rt_seed = x;
    return x;
},
$rt_wrapFunction0 = f => function() {
    return f(this);
},
$rt_wrapFunction1 = f => function(p1) {
    return f(this, p1);
},
$rt_wrapFunction2 = f => function(p1, p2) {
    return f(this, p1, p2);
},
$rt_wrapFunction3 = f => function(p1, p2, p3) {
    return f(this, p1, p2, p3, p3);
},
$rt_wrapFunction4 = f => function(p1, p2, p3, p4) {
    return f(this, p1, p2, p3, p4);
},
$rt_mainStarter = f => (args, callback) => {
    if (!args) {
        args = [];
    }
    let javaArgs = $rt_createArray($rt_objcls(), args.length);
    for (let i = 0;i < args.length;++i) {
        javaArgs.data[i] = $rt_str(args[i]);
    }
    $rt_startThread(() => {
        f.call(null, javaArgs);
    }, callback);
},
$rt_eraseClinit = target => target.$clinit = () => {
},
$dbg_class = obj => {
    let cls = obj.constructor;
    let arrayDegree = 0;
    while (cls.$meta && cls.$meta.item) {
        ++arrayDegree;
        cls = cls.$meta.item;
    }
    let clsName = "";
    if (cls.$meta.primitive) {
        clsName = cls.$meta.name;
    } else {
        clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
    }
    while (arrayDegree-- > 0) {
        clsName += "[]";
    }
    return clsName;
},
$rt_classWithoutFields = superclass => {
    if (superclass === 0) {
        return function() {
        };
    }
    if (superclass === void 0) {
        superclass = $rt_objcls();
    }
    return function() {
        superclass.call(this);
    };
},
$rt_cls = cls => jl_Class_getClass(cls),
$rt_objcls = () => jl_Object,
$rt_createcls = () => {
    return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
},
$rt_createPrimitiveCls = (name, binaryName) => {
    let cls = $rt_createcls();
    cls.$meta.primitive = true;
    cls.$meta.name = name;
    cls.$meta.binaryName = binaryName;
    cls.$meta.enum = false;
    cls.$meta.item = null;
    cls.$meta.simpleName = null;
    cls.$meta.declaringClass = null;
    cls.$meta.enclosingClass = null;
    return cls;
},
$rt_booleancls = $rt_createPrimitiveCls("boolean", "Z"),
$rt_charcls = $rt_createPrimitiveCls("char", "C"),
$rt_bytecls = $rt_createPrimitiveCls("byte", "B"),
$rt_shortcls = $rt_createPrimitiveCls("short", "S"),
$rt_intcls = $rt_createPrimitiveCls("int", "I"),
$rt_longcls = $rt_createPrimitiveCls("long", "J"),
$rt_floatcls = $rt_createPrimitiveCls("float", "F"),
$rt_doublecls = $rt_createPrimitiveCls("double", "D"),
$rt_voidcls = $rt_createPrimitiveCls("void", "V"),
$rt_numberConversionBuffer = new ArrayBuffer(16),
$rt_numberConversionDoubleArray = new Float64Array($rt_numberConversionBuffer),
$rt_numberConversionLongArray = new BigInt64Array($rt_numberConversionBuffer),
$rt_doubleToRawLongBits = n => {
    $rt_numberConversionDoubleArray[0] = n;
    return $rt_numberConversionLongArray[0];
},
$rt_longBitsToDouble = n => {
    $rt_numberConversionLongArray[0] = n;
    return $rt_numberConversionDoubleArray[0];
},
$rt_compare = (a, b) => a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1,
$rt_imul = Math.imul || function(a, b) {
    let ah = a >>> 16 & 0xFFFF;
    let al = a & 0xFFFF;
    let bh = b >>> 16 & 0xFFFF;
    let bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
},
$rt_udiv = (a, b) => (a >>> 0) / (b >>> 0) >>> 0,
$rt_umod = (a, b) => (a >>> 0) % (b >>> 0) >>> 0,
$rt_ucmp = (a, b) => {
    a >>>= 0;
    b >>>= 0;
    return a < b ?  -1 : a > b ? 1 : 0;
},
Long_ZERO = BigInt(0),
Long_create = (lo, hi) => BigInt.asIntN(64, BigInt.asUintN(64, BigInt(lo)) | BigInt.asUintN(64, BigInt(hi) << BigInt(32))),
Long_fromInt = val => BigInt.asIntN(64, BigInt(val | 0)),
Long_lo = val => Number(BigInt.asIntN(32, val)) | 0,
Long_eq = (a, b) => a === b,
Long_ne = (a, b) => a !== b,
Long_gt = (a, b) => a > b,
Long_le = (a, b) => a <= b,
Long_add = (a, b) => BigInt.asIntN(64, a + b),
Long_sub = (a, b) => BigInt.asIntN(64, a - b),
Long_ucompare = (a, b) => {
    a = BigInt.asUintN(64, a);
    b = BigInt.asUintN(64, b);
    return a < b ?  -1 : a > b ? 1 : 0;
},
Long_mul = (a, b) => BigInt.asIntN(64, a * b),
Long_div = (a, b) => BigInt.asIntN(64, a / b),
Long_udiv = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) / BigInt.asUintN(64, b)),
Long_rem = (a, b) => BigInt.asIntN(64, a % b),
Long_and = (a, b) => BigInt.asIntN(64, a & b);
let Long_or = (a, b) => BigInt.asIntN(64, a | b),
Long_xor = (a, b) => BigInt.asIntN(64, a ^ b),
Long_shl = (a, b) => BigInt.asIntN(64, a << BigInt(b & 63)),
Long_shr = (a, b) => BigInt.asIntN(64, a >> BigInt(b & 63)),
Long_shru = (a, b) => BigInt.asIntN(64, BigInt.asUintN(64, a) >> BigInt(b & 63)),
$rt_createArray = (cls, sz) => {
    let data = new Array(sz);
    data.fill(null);
    return new ($rt_arraycls(cls))(data);
},
$rt_createUnfilledArray = (cls, sz) => new ($rt_arraycls(cls))(new Array(sz)),
$rt_createLongArrayFromData = data => {
    let buffer = new BigInt64Array(data.length);
    buffer.set(data);
    return new $rt_longArrayCls(buffer);
},
$rt_createCharArray = sz => new $rt_charArrayCls(new Uint16Array(sz)),
$rt_createCharArrayFromData = data => {
    let buffer = new Uint16Array(data.length);
    buffer.set(data);
    return new $rt_charArrayCls(buffer);
},
$rt_createByteArray = sz => new $rt_byteArrayCls(new Int8Array(sz)),
$rt_createShortArrayFromData = data => {
    let buffer = new Int16Array(data.length);
    buffer.set(data);
    return new $rt_shortArrayCls(buffer);
},
$rt_createIntArray = sz => new $rt_intArrayCls(new Int32Array(sz)),
$rt_createIntArrayFromData = data => {
    let buffer = new Int32Array(data.length);
    buffer.set(data);
    return new $rt_intArrayCls(buffer);
},
$rt_createBooleanArray = sz => new $rt_booleanArrayCls(new Int8Array(sz)),
$rt_arraycls = cls => {
    let result = cls.$array;
    if (result === null) {
        function JavaArray(data) {
            ($rt_objcls()).call(this);
            this.data = data;
        }
        JavaArray.prototype = Object.create(($rt_objcls()).prototype);
        JavaArray.prototype.type = cls;
        JavaArray.prototype.constructor = JavaArray;
        JavaArray.prototype.toString = function() {
            let str = "[";
            for (let i = 0;i < this.data.length;++i) {
                if (i > 0) {
                    str += ", ";
                }
                str += this.data[i].toString();
            }
            str += "]";
            return str;
        };
        JavaArray.prototype.$clone = function() {
            let dataCopy;
            if ('slice' in this.data) {
                dataCopy = this.data.slice();
            } else {
                dataCopy = new this.data.constructor(this.data.length);
                for (let i = 0;i < dataCopy.length;++i) {
                    dataCopy[i] = this.data[i];
                }
            }
            return new ($rt_arraycls(this.type))(dataCopy);
        };
        let name = "[" + cls.$meta.binaryName;
        JavaArray.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false, simpleName : null, declaringClass : null, enclosingClass : null };
        JavaArray.classObject = null;
        JavaArray.$array = null;
        result = JavaArray;
        cls.$array = JavaArray;
    }
    return result;
},
$rt_createMultiArray = (cls, dimensions) => {
    let first = 0;
    for (let i = dimensions.length - 1;i >= 0;i = i - 1 | 0) {
        if (dimensions[i] === 0) {
            first = i;
            break;
        }
    }
    if (first > 0) {
        for (let i = 0;i < first;i = i + 1 | 0) {
            cls = $rt_arraycls(cls);
        }
        if (first === dimensions.length - 1) {
            return $rt_createArray(cls, dimensions[first]);
        }
    }
    let arrays = new Array($rt_primitiveArrayCount(dimensions, first));
    let firstDim = dimensions[first] | 0;
    for (let i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createArray(cls, firstDim);
    }
    return $rt_createMultiArrayImpl(cls, arrays, dimensions, first);
},
$rt_createIntMultiArray = dimensions => {
    let arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_intcls, dimensions);
    }
    let firstDim = dimensions[0] | 0;
    for (let i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createIntArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_intcls, arrays, dimensions, 0);
},
$rt_primitiveArrayCount = (dimensions, start) => {
    let val = dimensions[start + 1] | 0;
    for (let i = start + 2;i < dimensions.length;i = i + 1 | 0) {
        val = val * (dimensions[i] | 0) | 0;
        if (val === 0) {
            break;
        }
    }
    return val;
},
$rt_createMultiArrayImpl = (cls, arrays, dimensions, start) => {
    let limit = arrays.length;
    for (let i = start + 1 | 0;i < dimensions.length;i = i + 1 | 0) {
        cls = $rt_arraycls(cls);
        let dim = dimensions[i];
        let index = 0;
        let packedIndex = 0;
        while (index < limit) {
            let arr = $rt_createUnfilledArray(cls, dim);
            for (let j = 0;j < dim;j = j + 1 | 0) {
                arr.data[j] = arrays[index];
                index = index + 1 | 0;
            }
            arrays[packedIndex] = arr;
            packedIndex = packedIndex + 1 | 0;
        }
        limit = packedIndex;
    }
    return arrays[0];
},
$rt_stringPool_instance,
$rt_stringPool = strings => {
    $rt_stringClassInit();
    $rt_stringPool_instance = new Array(strings.length);
    for (let i = 0;i < strings.length;++i) {
        $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
    }
},
$rt_s = index => $rt_stringPool_instance[index],
$rt_charArrayToString = (array, offset, count) => {
    let result = "";
    let limit = offset + count;
    for (let i = offset;i < limit;i = i + 1024 | 0) {
        let next = Math.min(limit, i + 1024 | 0);
        result += String.fromCharCode.apply(null, array.subarray(i, next));
    }
    return result;
},
$rt_fullArrayToString = array => $rt_charArrayToString(array, 0, array.length),
$rt_str = str => str === null ? null : jl_String__init_1(str),
$rt_ustr = str => str === null ? null : str.$nativeString,
$rt_stringClassInit = () => jl_String_$callClinit(),
$rt_intern;
{
    $rt_intern = str => str;
}
let $rt_isInstance = (obj, cls) => obj instanceof $rt_objcls() && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls),
$rt_isAssignable = (from, to) => {
    if (from === to) {
        return true;
    }
    let map = from.$meta.assignableCache;
    if (typeof map === 'undefined') {
        map = new Map();
        from.$meta.assignableCache = map;
    }
    let cachedResult = map.get(to);
    if (typeof cachedResult !== 'undefined') {
        return cachedResult;
    }
    if (to.$meta.item !== null) {
        let result = from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
        map.set(to, result);
        return result;
    }
    let supertypes = from.$meta.supertypes;
    for (let i = 0;i < supertypes.length;i = i + 1 | 0) {
        if ($rt_isAssignable(supertypes[i], to)) {
            map.set(to, true);
            return true;
        }
    }
    map.set(to, false);
    return false;
},
$rt_throw = ex => {
    throw $rt_exception(ex);
},
$rt_javaExceptionProp = Symbol("javaException"),
$rt_exception = ex => {
    if (!ex.$jsException) {
        $rt_fillNativeException(ex);
    }
    return ex.$jsException;
},
$rt_fillNativeException = ex => {
    let javaCause = $rt_throwableCause(ex);
    let jsCause = javaCause !== null ? javaCause.$jsException : void 0;
    let cause = typeof jsCause === "object" ? { cause : jsCause } : void 0;
    let err = new JavaError("Java exception thrown", cause);
    if (typeof Error.captureStackTrace === "function") {
        Error.captureStackTrace(err);
    }
    err[$rt_javaExceptionProp] = ex;
    ex.$jsException = err;
    $rt_fillStack(err, ex);
},
$rt_fillStack = (err, ex) => {
    if (typeof $rt_decodeStack === "function" && err.stack) {
        let stack = $rt_decodeStack(err.stack);
        let javaStack = $rt_createArray($rt_stecls(), stack.length);
        let elem;
        let noStack = false;
        for (let i = 0;i < stack.length;++i) {
            let element = stack[i];
            elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
            if (elem == null) {
                noStack = true;
                break;
            }
            javaStack.data[i] = elem;
        }
        if (!noStack) {
            $rt_setStack(ex, javaStack);
        }
    }
},
JavaError;
if (typeof Reflect === 'object') {
    let defaultMessage = Symbol("defaultMessage");
    JavaError = function JavaError(message, cause) {
        let self = Reflect.construct(Error, [void 0, cause], JavaError);
        Object.setPrototypeOf(self, JavaError.prototype);
        self[defaultMessage] = message;
        return self;
    }
    ;
    JavaError.prototype = Object.create(Error.prototype, { constructor : { configurable : true, writable : true, value : JavaError }, message : { get() {
        try {
            let javaException = this[$rt_javaExceptionProp];
            if (typeof javaException === 'object') {
                let javaMessage = $rt_throwableMessage(javaException);
                if (typeof javaMessage === "object") {
                    return javaMessage !== null ? javaMessage.toString() : null;
                }
            }
            return this[defaultMessage];
        } catch (e){
            return "Exception occurred trying to extract Java exception message: " + e;
        }
    } } });
} else {
    JavaError = Error;
}
let $rt_javaException = e => e instanceof Error && typeof e[$rt_javaExceptionProp] === 'object' ? e[$rt_javaExceptionProp] : null,
$rt_wrapException = err => {
    let ex = err[$rt_javaExceptionProp];
    if (!ex) {
        ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
        err[$rt_javaExceptionProp] = ex;
        ex.$jsException = err;
        $rt_fillStack(err, ex);
    }
    return ex;
},
$rt_createException = message => jl_RuntimeException__init_1(message),
$rt_throwableMessage = t => jl_Throwable_getMessage(t),
$rt_throwableCause = t => jl_Throwable_getCause(t),
$rt_stecls = () => jl_StackTraceElement,
$rt_createStackElement = (className, methodName, fileName, lineNumber) => {
    {
        return null;
    }
},
$rt_setStack = (e, stack) => {
},
$rt_createOutputFunction = outputFunction => {
    let buffer = "";
    return msg => {
        let index = 0;
        while (true) {
            let next = msg.indexOf('\n', index);
            if (next < 0) {
                break;
            }
            outputFunction(buffer + msg.substring(index, next));
            buffer = "";
            index = next + 1;
        }
        buffer += msg.substring(index);
    };
},
$rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.info(msg)) : () => {
},
$rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : typeof console === "object" ? $rt_createOutputFunction(msg => console.error(msg)) : () => {
},
$rt_packageData = null,
$rt_packages = data => {
    let i = 0;
    let packages = new Array(data.length);
    for (let j = 0;j < data.length;++j) {
        let prefixIndex = data[i++];
        let prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
        packages[j] = prefix + data[i++] + ".";
    }
    $rt_packageData = packages;
},
$rt_metadata = data => {
    let packages = $rt_packageData;
    let i = 0;
    while (i < data.length) {
        let cls = data[i++];
        cls.$meta = {  };
        let m = cls.$meta;
        let className = data[i++];
        m.name = className !== 0 ? className : null;
        if (m.name !== null) {
            let packageIndex = data[i++];
            if (packageIndex >= 0) {
                m.name = packages[packageIndex] + m.name;
            }
        }
        m.binaryName = "L" + m.name + ";";
        let superclass = data[i++];
        m.superclass = superclass !== 0 ? superclass : null;
        m.supertypes = data[i++];
        if (m.superclass) {
            m.supertypes.push(m.superclass);
            cls.prototype = Object.create(m.superclass.prototype);
        } else {
            cls.prototype = {  };
        }
        let flags = data[i++];
        m.enum = (flags & 8) !== 0;
        m.flags = flags;
        m.primitive = false;
        m.item = null;
        cls.prototype.constructor = cls;
        cls.classObject = null;
        m.accessLevel = data[i++];
        let innerClassInfo = data[i++];
        if (innerClassInfo === 0) {
            m.simpleName = null;
            m.declaringClass = null;
            m.enclosingClass = null;
        } else {
            let enclosingClass = innerClassInfo[0];
            m.enclosingClass = enclosingClass !== 0 ? enclosingClass : null;
            let declaringClass = innerClassInfo[1];
            m.declaringClass = declaringClass !== 0 ? declaringClass : null;
            let simpleName = innerClassInfo[2];
            m.simpleName = simpleName !== 0 ? simpleName : null;
        }
        let clinit = data[i++];
        cls.$clinit = clinit !== 0 ? clinit : function() {
        };
        let virtualMethods = data[i++];
        if (virtualMethods !== 0) {
            for (let j = 0;j < virtualMethods.length;j += 2) {
                let name = virtualMethods[j];
                let func = virtualMethods[j + 1];
                if (typeof name === 'string') {
                    name = [name];
                }
                for (let k = 0;k < name.length;++k) {
                    cls.prototype[name[k]] = func;
                }
            }
        }
        cls.$array = null;
    }
},
$rt_startThread = (runner, callback) => {
    let result;
    try {
        result = runner();
    } catch (e){
        result = e;
    }
    if (typeof callback !== 'undefined') {
        callback(result);
    } else if (result instanceof Error) {
        throw result;
    }
};
function jl_Object() {
    this.$id$ = 0;
}
let jl_Object__init_ = $this => {
    return;
},
jl_Object__init_0 = () => {
    let var_0 = new jl_Object();
    jl_Object__init_(var_0);
    return var_0;
},
jl_Object_getClass = $this => {
    return jl_Class_getClass($this.constructor);
},
jl_Object_hashCode = $this => {
    return jl_Object_identity($this);
},
jl_Object_equals = ($this, $other) => {
    return $this !== $other ? 0 : 1;
},
jl_Object_toString = $this => {
    let var$1, var$2, var$3;
    var$1 = jl_Class_getName(jl_Object_getClass($this));
    var$2 = jl_Integer_toHexString(jl_Object_identity($this));
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, var$1), 64), var$2);
    return jl_StringBuilder_toString(var$3);
},
jl_Object_identity = $this => {
    let $platformThis;
    $platformThis = $this;
    if (!$platformThis.$id$)
        $platformThis.$id$ = $rt_nextId();
    return $this.$id$;
};
function jur_AbstractCharClass$LazyCharClass() {
    let a = this; jl_Object.call(a);
    a.$posValue = null;
    a.$negValue = null;
}
let jur_AbstractCharClass$LazyCharClass__init_ = $this => {
    jl_Object__init_($this);
},
jur_AbstractCharClass$LazyCharClass_getValue = ($this, $negative) => {
    if (!$negative && $this.$posValue === null)
        $this.$posValue = $this.$computeValue();
    else if ($negative && $this.$negValue === null)
        $this.$negValue = ($this.$computeValue()).$setNegative(1);
    if ($negative)
        return $this.$negValue;
    return $this.$posValue;
},
jur_AbstractCharClass$LazyBlank = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyBlank__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyBlank__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyBlank();
    jur_AbstractCharClass$LazyBlank__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyBlank_computeValue = $this => {
    return ((jur_CharClass__init_()).$add(32)).$add(9);
},
jur_AbstractCharClass$LazyCntrl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyCntrl__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyCntrl__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyCntrl();
    jur_AbstractCharClass$LazyCntrl__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyCntrl_computeValue = $this => {
    return ((jur_CharClass__init_()).$add0(0, 31)).$add(127);
};
function jl_Throwable() {
    let a = this; jl_Object.call(a);
    a.$message = null;
    a.$cause = null;
    a.$suppressionEnabled = 0;
    a.$writableStackTrace = 0;
    a.$stackTrace = null;
}
let jl_Throwable__init_ = $this => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$fillInStackTrace();
},
jl_Throwable__init_2 = () => {
    let var_0 = new jl_Throwable();
    jl_Throwable__init_(var_0);
    return var_0;
},
jl_Throwable__init_0 = ($this, $message) => {
    jl_Throwable_initNativeException($this);
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$fillInStackTrace();
    $this.$message = $message;
},
jl_Throwable__init_1 = var_0 => {
    let var_1 = new jl_Throwable();
    jl_Throwable__init_0(var_1, var_0);
    return var_1;
},
jl_Throwable_fillInStackTrace = $this => {
    return $this;
},
jl_Throwable_initNativeException = $this => {
    $rt_fillNativeException($this);
},
jl_Throwable_ensureStackTrace = $this => {
    return;
},
jl_Throwable_getMessage = $this => {
    return $this.$message;
},
jl_Throwable_getLocalizedMessage = $this => {
    return $this.$getMessage();
},
jl_Throwable_getCause = $this => {
    return $this.$cause === $this ? null : $this.$cause;
},
jl_Throwable_printStackTrace = $this => {
    $this.$printStackTrace(jl_System_err());
},
jl_Throwable_printStackTrace0 = ($this, $stream) => {
    let $message, var$3, var$4, var$5, var$6, $element;
    $stream.$print(jl_Class_getName(jl_Object_getClass($this)));
    $message = $this.$getLocalizedMessage();
    if ($message !== null) {
        var$3 = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(0)), $message);
        $stream.$print(jl_StringBuilder_toString(var$3));
    }
    a: {
        $stream.$println();
        jl_Throwable_ensureStackTrace($this);
        if ($this.$stackTrace !== null) {
            var$4 = $this.$stackTrace.data;
            var$5 = var$4.length;
            var$6 = 0;
            while (true) {
                if (var$6 >= var$5)
                    break a;
                $element = var$4[var$6];
                $stream.$print($rt_s(1));
                $stream.$println0($element);
                var$6 = var$6 + 1 | 0;
            }
        }
    }
    if ($this.$cause !== null && $this.$cause !== $this) {
        $stream.$print($rt_s(2));
        $this.$cause.$printStackTrace($stream);
    }
},
jl_Exception = $rt_classWithoutFields(jl_Throwable),
jl_Exception__init_ = $this => {
    jl_Throwable__init_($this);
},
jl_Exception__init_1 = () => {
    let var_0 = new jl_Exception();
    jl_Exception__init_(var_0);
    return var_0;
},
jl_Exception__init_0 = ($this, $message) => {
    jl_Throwable__init_0($this, $message);
},
jl_Exception__init_2 = var_0 => {
    let var_1 = new jl_Exception();
    jl_Exception__init_0(var_1, var_0);
    return var_1;
},
jl_RuntimeException = $rt_classWithoutFields(jl_Exception),
jl_RuntimeException__init_ = $this => {
    jl_Exception__init_($this);
},
jl_RuntimeException__init_2 = () => {
    let var_0 = new jl_RuntimeException();
    jl_RuntimeException__init_(var_0);
    return var_0;
},
jl_RuntimeException__init_0 = ($this, $message) => {
    jl_Exception__init_0($this, $message);
},
jl_RuntimeException__init_1 = var_0 => {
    let var_1 = new jl_RuntimeException();
    jl_RuntimeException__init_0(var_1, var_0);
    return var_1;
},
jl_IndexOutOfBoundsException = $rt_classWithoutFields(jl_RuntimeException),
jl_IndexOutOfBoundsException__init_0 = $this => {
    jl_RuntimeException__init_($this);
},
jl_IndexOutOfBoundsException__init_ = () => {
    let var_0 = new jl_IndexOutOfBoundsException();
    jl_IndexOutOfBoundsException__init_0(var_0);
    return var_0;
},
jl_IndexOutOfBoundsException__init_1 = ($this, $message) => {
    jl_RuntimeException__init_0($this, $message);
},
jl_IndexOutOfBoundsException__init_2 = var_0 => {
    let var_1 = new jl_IndexOutOfBoundsException();
    jl_IndexOutOfBoundsException__init_1(var_1, var_0);
    return var_1;
},
jur_SpecialToken = $rt_classWithoutFields(),
jur_SpecialToken__init_ = $this => {
    jl_Object__init_($this);
};
function jur_AbstractCharClass() {
    let a = this; jur_SpecialToken.call(a);
    a.$alt = 0;
    a.$altSurrogates = 0;
    a.$lowHighSurrogates = null;
    a.$charClassWithoutSurrogates = null;
    a.$charClassWithSurrogates = null;
    a.$mayContainSupplCodepoints0 = 0;
}
let jur_AbstractCharClass_charClasses = null,
jur_AbstractCharClass_$callClinit = () => {
    jur_AbstractCharClass_$callClinit = $rt_eraseClinit(jur_AbstractCharClass);
    jur_AbstractCharClass__clinit_();
},
jur_AbstractCharClass__init_ = $this => {
    jur_AbstractCharClass_$callClinit();
    jur_SpecialToken__init_($this);
    $this.$lowHighSurrogates = ju_BitSet__init_2(2048);
},
jur_AbstractCharClass_getBits = $this => {
    return null;
},
jur_AbstractCharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_AbstractCharClass_hasLowHighSurrogates = $this => {
    return !$this.$altSurrogates ? ($this.$lowHighSurrogates.$nextSetBit(0) >= 2048 ? 0 : 1) : $this.$lowHighSurrogates.$nextClearBit(0) >= 2048 ? 0 : 1;
},
jur_AbstractCharClass_mayContainSupplCodepoints = $this => {
    return $this.$mayContainSupplCodepoints0;
},
jur_AbstractCharClass_getInstance = $this => {
    return $this;
},
jur_AbstractCharClass_getSurrogates = $this => {
    let $lHS;
    if ($this.$charClassWithSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        $this.$charClassWithSurrogates = jur_AbstractCharClass$1__init_0($this, $lHS);
        $this.$charClassWithSurrogates.$setNegative($this.$altSurrogates);
    }
    return $this.$charClassWithSurrogates;
},
jur_AbstractCharClass_getWithoutSurrogates = $this => {
    let $lHS;
    if ($this.$charClassWithoutSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        $this.$charClassWithoutSurrogates = jur_AbstractCharClass$2__init_0($this, $lHS, $this);
        $this.$charClassWithoutSurrogates.$setNegative($this.$isNegative());
        $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints0 = $this.$mayContainSupplCodepoints0;
    }
    return $this.$charClassWithoutSurrogates;
},
jur_AbstractCharClass_hasUCI = $this => {
    return 0;
},
jur_AbstractCharClass_setNegative = ($this, $value) => {
    if ($this.$alt ^ $value) {
        $this.$alt = $this.$alt ? 0 : 1;
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
    }
    if (!$this.$mayContainSupplCodepoints0)
        $this.$mayContainSupplCodepoints0 = 1;
    return $this;
},
jur_AbstractCharClass_isNegative = $this => {
    return $this.$alt;
},
jur_AbstractCharClass_intersects0 = ($cc, $ch) => {
    jur_AbstractCharClass_$callClinit();
    return $cc.$contains($ch);
},
jur_AbstractCharClass_intersects = ($cc1, $cc2) => {
    jur_AbstractCharClass_$callClinit();
    if ($cc1.$getBits() !== null && $cc2.$getBits() !== null)
        return ($cc1.$getBits()).$intersects($cc2.$getBits());
    return 1;
},
jur_AbstractCharClass_getPredefinedClass = ($name, $negative) => {
    jur_AbstractCharClass_$callClinit();
    return (jur_AbstractCharClass$PredefinedCharacterClasses_getObject(jur_AbstractCharClass_charClasses, $name)).$getValue($negative);
},
jur_AbstractCharClass__clinit_ = () => {
    jur_AbstractCharClass_charClasses = jur_AbstractCharClass$PredefinedCharacterClasses__init_0();
};
function jur_AbstractCharClass$LazyJavaWhitespace$1() {
    jur_AbstractCharClass.call(this);
    this.$this$030 = null;
}
let jur_AbstractCharClass$LazyJavaWhitespace$1__init_ = ($this, $this$0) => {
    $this.$this$030 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaWhitespace$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaWhitespace$1();
    jur_AbstractCharClass$LazyJavaWhitespace$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaWhitespace$1_contains = ($this, $ch) => {
    return jl_Character_isWhitespace($ch);
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
},
ji_Serializable = $rt_classWithoutFields(0),
jl_Number = $rt_classWithoutFields(),
jl_Number__init_ = $this => {
    jl_Object__init_($this);
},
jl_Comparable = $rt_classWithoutFields(0);
function jl_Integer() {
    jl_Number.call(this);
    this.$value1 = 0;
}
let jl_Integer_TYPE = null,
jl_Integer_integerCache = null,
jl_Integer_$callClinit = () => {
    jl_Integer_$callClinit = $rt_eraseClinit(jl_Integer);
    jl_Integer__clinit_();
},
jl_Integer__init_ = ($this, $value) => {
    jl_Integer_$callClinit();
    jl_Number__init_($this);
    $this.$value1 = $value;
},
jl_Integer__init_0 = var_0 => {
    let var_1 = new jl_Integer();
    jl_Integer__init_(var_1, var_0);
    return var_1;
},
jl_Integer_toString0 = ($i, $radix) => {
    jl_Integer_$callClinit();
    if (!($radix >= 2 && $radix <= 36))
        $radix = 10;
    return ((jl_AbstractStringBuilder__init_1(20)).$append1($i, $radix)).$toString();
},
jl_Integer_hashCode0 = $value => {
    jl_Integer_$callClinit();
    return $value;
},
jl_Integer_toHexString = $i => {
    jl_Integer_$callClinit();
    return otci_IntegerUtil_toUnsignedLogRadixString($i, 4);
},
jl_Integer_toString = $i => {
    jl_Integer_$callClinit();
    return jl_Integer_toString0($i, 10);
},
jl_Integer_parseInt = ($s, $radix) => {
    jl_Integer_$callClinit();
    if ($s !== null)
        return jl_Integer_parseIntImpl($s, 0, $s.$length(), $radix);
    $rt_throw(jl_NumberFormatException__init_1($rt_s(3)));
},
jl_Integer_parseIntImpl = ($s, $beginIndex, $endIndex, $radix) => {
    let $negative, var$6, $value, $maxValue, var$9, $digit, var$11, var$12, var$13, var$14;
    jl_Integer_$callClinit();
    if ($beginIndex == $endIndex)
        $rt_throw(jl_NumberFormatException__init_1($rt_s(4)));
    if ($radix >= 2 && $radix <= 36) {
        a: {
            $negative = 0;
            switch ($s.$charAt($beginIndex)) {
                case 43:
                    var$6 = $beginIndex + 1 | 0;
                    break a;
                case 45:
                    $negative = 1;
                    var$6 = $beginIndex + 1 | 0;
                    break a;
                default:
            }
            var$6 = $beginIndex;
        }
        $value = 0;
        $maxValue = 1 + (2147483647 / $radix | 0) | 0;
        if (var$6 == $endIndex)
            $rt_throw(jl_NumberFormatException__init_());
        while (true) {
            if (var$6 >= $endIndex) {
                if ($negative)
                    $value =  -$value | 0;
                return $value;
            }
            var$9 = var$6 + 1 | 0;
            $digit = jl_Integer_decodeDigit($s.$charAt(var$6));
            if ($digit < 0) {
                var$11 = new jl_NumberFormatException;
                var$12 = jl_String_valueOf($s.$subSequence($beginIndex, $endIndex));
                var$13 = jl_StringBuilder__init_();
                jl_StringBuilder_append(jl_StringBuilder_append(var$13, $rt_s(5)), var$12);
                jl_NumberFormatException__init_0(var$11, jl_StringBuilder_toString(var$13));
                $rt_throw(var$11);
            }
            if ($digit >= $radix) {
                var$12 = new jl_NumberFormatException;
                var$13 = jl_String_valueOf($s.$subSequence($beginIndex, $endIndex));
                var$14 = jl_StringBuilder__init_();
                jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(var$14, $rt_s(6)), $radix), $rt_s(0)), var$13);
                jl_NumberFormatException__init_0(var$12, jl_StringBuilder_toString(var$14));
                $rt_throw(var$12);
            }
            if ($value > $maxValue)
                break;
            $value = $rt_imul($radix, $value) + $digit | 0;
            if ($value < 0) {
                if (var$9 == $endIndex && $value == (-2147483648) && $negative)
                    return (-2147483648);
                var$11 = new jl_NumberFormatException;
                var$12 = jl_String_valueOf($s.$subSequence($beginIndex, $endIndex));
                var$13 = jl_StringBuilder__init_();
                jl_StringBuilder_append(jl_StringBuilder_append(var$13, $rt_s(7)), var$12);
                jl_NumberFormatException__init_0(var$11, jl_StringBuilder_toString(var$13));
                $rt_throw(var$11);
            }
            var$6 = var$9;
        }
        $rt_throw(jl_NumberFormatException__init_1($rt_s(8)));
    }
    var$11 = new jl_NumberFormatException;
    var$12 = jl_StringBuilder__init_();
    jl_StringBuilder_append1(jl_StringBuilder_append(var$12, $rt_s(9)), $radix);
    jl_NumberFormatException__init_0(var$11, jl_StringBuilder_toString(var$12));
    $rt_throw(var$11);
},
jl_Integer_parseInt0 = $s => {
    jl_Integer_$callClinit();
    return jl_Integer_parseInt($s, 10);
},
jl_Integer_valueOf = $i => {
    jl_Integer_$callClinit();
    if ($i >= (-128) && $i <= 127) {
        jl_Integer_ensureIntegerCache();
        return jl_Integer_integerCache.data[$i + 128 | 0];
    }
    return jl_Integer__init_0($i);
},
jl_Integer_ensureIntegerCache = () => {
    let $j;
    jl_Integer_$callClinit();
    a: {
        if (jl_Integer_integerCache === null) {
            jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
            $j = 0;
            while (true) {
                if ($j >= jl_Integer_integerCache.data.length)
                    break a;
                jl_Integer_integerCache.data[$j] = jl_Integer__init_0($j - 128 | 0);
                $j = $j + 1 | 0;
            }
        }
    }
},
jl_Integer_intValue = $this => {
    return $this.$value1;
},
jl_Integer_toString1 = $this => {
    return jl_Integer_toString($this.$value1);
},
jl_Integer_hashCode = $this => {
    return jl_Integer_hashCode0($this.$value1);
},
jl_Integer_equals = ($this, $other) => {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Integer && $other.$value1 == $this.$value1 ? 1 : 0;
},
jl_Integer_decodeDigit = $c => {
    jl_Integer_$callClinit();
    if ($c >= 48 && $c <= 57)
        return $c - 48 | 0;
    if ($c >= 97 && $c <= 122)
        return ($c - 97 | 0) + 10 | 0;
    if ($c >= 65 && $c <= 90)
        return ($c - 65 | 0) + 10 | 0;
    return (-1);
},
jl_Integer_compareTo = ($this, $other) => {
    return jl_Integer_compare($this.$value1, $other.$value1);
},
jl_Integer_compare = (var$1, var$2) => {
    jl_Integer_$callClinit();
    return $rt_compare(var$1, var$2);
},
jl_Integer_numberOfLeadingZeros = $i => {
    let $n, var$3, var$4;
    jl_Integer_$callClinit();
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i >>> 16 | 0;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    var$4 = var$3 >>> 8 | 0;
    if (!var$4)
        var$4 = var$3;
    else
        $n = $n | 8;
    var$3 = var$4 >>> 4 | 0;
    if (!var$3)
        var$3 = var$4;
    else
        $n = $n | 4;
    var$4 = var$3 >>> 2 | 0;
    if (!var$4)
        var$4 = var$3;
    else
        $n = $n | 2;
    if (var$4 >>> 1 | 0)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer_numberOfTrailingZeros = $i => {
    let $n, var$3, var$4;
    jl_Integer_$callClinit();
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i << 16;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    var$4 = var$3 << 8;
    if (!var$4)
        var$4 = var$3;
    else
        $n = $n | 8;
    var$3 = var$4 << 4;
    if (!var$3)
        var$3 = var$4;
    else
        $n = $n | 4;
    var$4 = var$3 << 2;
    if (!var$4)
        var$4 = var$3;
    else
        $n = $n | 2;
    if (var$4 << 1)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
},
jl_Integer_rotateLeft = ($i, $distance) => {
    let var$3;
    jl_Integer_$callClinit();
    var$3 = $distance & 31;
    return $i << var$3 | ($i >>> (32 - var$3 | 0) | 0);
},
jl_Integer_compareTo0 = ($this, var$1) => {
    return $this.$compareTo(var$1);
},
jl_Integer__clinit_ = () => {
    jl_Integer_TYPE = $rt_cls($rt_intcls);
},
jl_AbstractStringBuilder$Constants = $rt_classWithoutFields(),
jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null,
jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null,
jl_AbstractStringBuilder$Constants_floatAnalysisResult = null,
jl_AbstractStringBuilder$Constants_$callClinit = () => {
    jl_AbstractStringBuilder$Constants_$callClinit = $rt_eraseClinit(jl_AbstractStringBuilder$Constants);
    jl_AbstractStringBuilder$Constants__clinit_();
},
jl_AbstractStringBuilder$Constants__clinit_ = () => {
    jl_AbstractStringBuilder$Constants_longLogPowersOfTen = $rt_createLongArrayFromData([Long_fromInt(1), Long_fromInt(10), Long_fromInt(100), Long_fromInt(10000), Long_fromInt(100000000), Long_create(1874919424, 2328306)]);
    jl_AbstractStringBuilder$Constants_doubleAnalysisResult = otcit_DoubleAnalyzer$Result__init_();
    jl_AbstractStringBuilder$Constants_floatAnalysisResult = otcit_FloatAnalyzer$Result__init_0();
};
function jur_AbstractSet() {
    let a = this; jl_Object.call(a);
    a.$next2 = null;
    a.$isSecondPassVisited = 0;
    a.$index4 = null;
    a.$type0 = 0;
}
let jur_AbstractSet_counter = 0,
jur_AbstractSet_$callClinit = () => {
    jur_AbstractSet_$callClinit = $rt_eraseClinit(jur_AbstractSet);
    jur_AbstractSet__clinit_();
},
jur_AbstractSet__init_ = $this => {
    let var$1;
    jur_AbstractSet_$callClinit();
    jl_Object__init_($this);
    var$1 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$1 + 1 | 0;
    $this.$index4 = jl_Integer_toString(var$1);
},
jur_AbstractSet__init_0 = ($this, $n) => {
    let var$2;
    jur_AbstractSet_$callClinit();
    jl_Object__init_($this);
    var$2 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$2 + 1 | 0;
    $this.$index4 = jl_Integer_toString(var$2);
    $this.$next2 = $n;
},
jur_AbstractSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $length;
    $length = $matchResult.$getRightBound();
    while (true) {
        if ($stringIndex > $length)
            return (-1);
        if ($this.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_AbstractSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($this.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_AbstractSet_setType = ($this, $type) => {
    $this.$type0 = $type;
},
jur_AbstractSet_getType = $this => {
    return $this.$type0;
},
jur_AbstractSet_getQualifiedName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$index4;
    var$2 = $this.$getName();
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(var$3, 60), var$1), 58), var$2), 62);
    return jl_StringBuilder_toString(var$3);
},
jur_AbstractSet_toString = $this => {
    return $this.$getQualifiedName();
},
jur_AbstractSet_getNext = $this => {
    return $this.$next2;
},
jur_AbstractSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_AbstractSet_first = ($this, $set) => {
    return 1;
},
jur_AbstractSet_processBackRefReplacement = $this => {
    return null;
},
jur_AbstractSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$next2 !== null) {
        if (!$this.$next2.$isSecondPassVisited) {
            $set = $this.$next2.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next2.$isSecondPassVisited = 1;
                $this.$next2 = $set;
            }
            $this.$next2.$processSecondPass();
        } else if ($this.$next2 instanceof jur_SingleSet && $this.$next2.$fSet.$isBackReferenced)
            $this.$next2 = $this.$next2.$next2;
    }
},
jur_AbstractSet__clinit_ = () => {
    jur_AbstractSet_counter = 1;
};
function jur_JointSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$children = null;
    a.$fSet = null;
    a.$groupIndex = 0;
}
let jur_JointSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_JointSet__init_2 = () => {
    let var_0 = new jur_JointSet();
    jur_JointSet__init_(var_0);
    return var_0;
},
jur_JointSet__init_0 = ($this, $children, $fSet) => {
    jur_AbstractSet__init_($this);
    $this.$children = $children;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$getGroupIndex();
},
jur_JointSet__init_1 = (var_0, var_1) => {
    let var_2 = new jur_JointSet();
    jur_JointSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_JointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $e, $shift;
    if ($this.$children === null)
        return (-1);
    $start = $matchResult.$getStart($this.$groupIndex);
    $matchResult.$setStart($this.$groupIndex, $stringIndex);
    $size = $this.$children.$size();
    $i = 0;
    while (true) {
        if ($i >= $size) {
            $matchResult.$setStart($this.$groupIndex, $start);
            return (-1);
        }
        $e = $this.$children.$get($i);
        $shift = $e.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_JointSet_setNext = ($this, $next) => {
    $this.$fSet.$setNext($next);
},
jur_JointSet_getName = $this => {
    return $rt_s(10);
},
jur_JointSet_first = ($this, $set) => {
    let $i;
    a: {
        if ($this.$children !== null) {
            $i = $this.$children.$iterator();
            while (true) {
                if (!$i.$hasNext())
                    break a;
                if (!($i.$next()).$first($set))
                    continue;
                else
                    return 1;
            }
        }
    }
    return 0;
},
jur_JointSet_hasConsumed = ($this, $matchResult) => {
    let var$2, var$3;
    a: {
        if ($matchResult.$getEnd($this.$groupIndex) >= 0) {
            var$2 = $matchResult.$getStart($this.$groupIndex);
            var$3 = $this.$groupIndex;
            if (var$2 == $matchResult.$getEnd(var$3)) {
                var$2 = 0;
                break a;
            }
        }
        var$2 = 1;
    }
    return var$2;
},
jur_JointSet_processSecondPass = $this => {
    let $childrenSize, $i, $child, $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$fSet !== null && !$this.$fSet.$isSecondPassVisited)
        $this.$fSet.$processSecondPass();
    a: {
        if ($this.$children !== null) {
            $childrenSize = $this.$children.$size();
            $i = 0;
            while (true) {
                if ($i >= $childrenSize)
                    break a;
                $child = $this.$children.$get($i);
                $set = $child.$processBackRefReplacement();
                if ($set === null)
                    $set = $child;
                else {
                    $child.$isSecondPassVisited = 1;
                    $this.$children.$remove($i);
                    $this.$children.$add1($i, $set);
                }
                if (!$set.$isSecondPassVisited)
                    $set.$processSecondPass();
                $i = $i + 1 | 0;
            }
        }
    }
    if ($this.$next2 !== null)
        jur_AbstractSet_processSecondPass($this);
};
function jur_SingleSet() {
    jur_JointSet.call(this);
    this.$kid = null;
}
let jur_SingleSet__init_ = ($this, $child, $fSet) => {
    jur_JointSet__init_($this);
    $this.$kid = $child;
    $this.$fSet = $fSet;
    $this.$groupIndex = $fSet.$getGroupIndex();
},
jur_SingleSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_SingleSet();
    jur_SingleSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_SingleSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $shift;
    $start = $matchResult.$getStart($this.$groupIndex);
    $matchResult.$setStart($this.$groupIndex, $stringIndex);
    $shift = $this.$kid.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    $matchResult.$setStart($this.$groupIndex, $start);
    return (-1);
},
jur_SingleSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$find($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        $matchResult.$setStart($this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_findBack = ($this, $stringIndex, $lastIndex, $testString, $matchResult) => {
    let $res;
    $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
    if ($res >= 0)
        $matchResult.$setStart($this.$groupIndex, $res);
    return $res;
},
jur_SingleSet_first = ($this, $set) => {
    return $this.$kid.$first($set);
},
jur_SingleSet_processBackRefReplacement = $this => {
    let $set;
    $set = jur_BackReferencedSingleSet__init_0($this);
    $this.$next2 = $set;
    return $set;
},
jur_SingleSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$fSet !== null && !$this.$fSet.$isSecondPassVisited)
        $this.$fSet.$processSecondPass();
    if ($this.$kid !== null && !$this.$kid.$isSecondPassVisited) {
        $set = $this.$kid.$processBackRefReplacement();
        if ($set !== null) {
            $this.$kid.$isSecondPassVisited = 1;
            $this.$kid = $set;
        }
        $this.$kid.$processSecondPass();
    }
},
jl_Long = $rt_classWithoutFields(jl_Number),
jl_Long_TYPE = null,
jl_Long_$callClinit = () => {
    jl_Long_$callClinit = $rt_eraseClinit(jl_Long);
    jl_Long__clinit_();
},
jl_Long_numberOfLeadingZeros = $i => {
    let $n, var$3, var$4;
    jl_Long_$callClinit();
    if (Long_eq($i, Long_ZERO))
        return 64;
    $n = 0;
    var$3 = Long_shru($i, 32);
    if (Long_ne(var$3, Long_ZERO))
        $n = 32;
    else
        var$3 = $i;
    var$4 = Long_shru(var$3, 16);
    if (Long_eq(var$4, Long_ZERO))
        var$4 = var$3;
    else
        $n = $n | 16;
    var$3 = Long_shru(var$4, 8);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = var$4;
    else
        $n = $n | 8;
    var$4 = Long_shru(var$3, 4);
    if (Long_eq(var$4, Long_ZERO))
        var$4 = var$3;
    else
        $n = $n | 4;
    var$3 = Long_shru(var$4, 2);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = var$4;
    else
        $n = $n | 2;
    if (Long_ne(Long_shru(var$3, 1), Long_ZERO))
        $n = $n | 1;
    return (64 - $n | 0) - 1 | 0;
},
jl_Long_divideUnsigned = (var$1, var$2) => {
    return Long_udiv(var$1, var$2);
},
jl_Long_compareUnsigned = (var$1, var$2) => {
    return Long_ucompare(var$1, var$2);
},
jl_Long__clinit_ = () => {
    jl_Long_TYPE = $rt_cls($rt_longcls);
},
ju_Map = $rt_classWithoutFields(0);
function jur_SequenceSet$IntHash() {
    let a = this; jl_Object.call(a);
    a.$table = null;
    a.$values0 = null;
    a.$mask = 0;
    a.$size4 = 0;
}
let jur_SequenceSet$IntHash__init_0 = ($this, $size) => {
    jl_Object__init_($this);
    while ($size >= $this.$mask) {
        $this.$mask = $this.$mask << 1 | 1;
    }
    $this.$mask = $this.$mask << 1 | 1;
    $this.$table = $rt_createIntArray($this.$mask + 1 | 0);
    $this.$values0 = $rt_createIntArray($this.$mask + 1 | 0);
    $this.$size4 = $size;
},
jur_SequenceSet$IntHash__init_ = var_0 => {
    let var_1 = new jur_SequenceSet$IntHash();
    jur_SequenceSet$IntHash__init_0(var_1, var_0);
    return var_1;
},
jur_SequenceSet$IntHash_put = ($this, $key, $value) => {
    let $i, $hashCode, var$5;
    $i = 0;
    $hashCode = $key & $this.$mask;
    while ($this.$table.data[$hashCode] && $this.$table.data[$hashCode] != $key) {
        var$5 = $i + 1 | 0;
        $i = var$5 & $this.$mask;
        var$5 = $hashCode + $i | 0;
        $hashCode = var$5 & $this.$mask;
    }
    $this.$table.data[$hashCode] = $key;
    $this.$values0.data[$hashCode] = $value;
},
jur_SequenceSet$IntHash_get = ($this, $key) => {
    let $hashCode, $i, $storedKey, var$5;
    $hashCode = $key & $this.$mask;
    $i = 0;
    while (true) {
        $storedKey = $this.$table.data[$hashCode];
        if (!$storedKey)
            break;
        if ($storedKey == $key)
            return $this.$values0.data[$hashCode];
        var$5 = $i + 1 | 0;
        $i = var$5 & $this.$mask;
        var$5 = $hashCode + $i | 0;
        $hashCode = var$5 & $this.$mask;
    }
    return $this.$size4;
},
jur_AbstractCharClass$LazyAlpha = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyAlpha__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyAlpha__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlpha();
    jur_AbstractCharClass$LazyAlpha__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlpha_computeValue = $this => {
    return ((jur_CharClass__init_()).$add0(97, 122)).$add0(65, 90);
},
ju_Iterator = $rt_classWithoutFields(0);
function ju_PriorityQueue$1() {
    let a = this; jl_Object.call(a);
    a.$index1 = 0;
    a.$knownVersion = 0;
    a.$removeIndex = 0;
    a.$this$0 = null;
}
let ju_PriorityQueue$1__init_ = ($this, $this$0) => {
    $this.$this$0 = $this$0;
    jl_Object__init_($this);
    $this.$knownVersion = $this.$this$0.$version;
    $this.$removeIndex = (-1);
},
ju_PriorityQueue$1__init_0 = var_0 => {
    let var_1 = new ju_PriorityQueue$1();
    ju_PriorityQueue$1__init_(var_1, var_0);
    return var_1;
},
ju_PriorityQueue$1_hasNext = $this => {
    if ($this.$this$0.$version != $this.$knownVersion)
        $rt_throw(ju_ConcurrentModificationException__init_());
    return $this.$index1 >= $this.$this$0.$size1 ? 0 : 1;
},
ju_PriorityQueue$1_next = $this => {
    let var$1, var$2;
    if ($this.$this$0.$version != $this.$knownVersion)
        $rt_throw(ju_ConcurrentModificationException__init_());
    if ($this.$index1 >= $this.$this$0.$size1)
        $rt_throw(ju_NoSuchElementException__init_());
    $this.$removeIndex = $this.$index1;
    var$1 = $this.$this$0.$data0.data;
    var$2 = $this.$index1;
    $this.$index1 = var$2 + 1 | 0;
    return var$1[var$2];
},
ju_PriorityQueue$1_remove = $this => {
    if ($this.$this$0.$version != $this.$knownVersion)
        $rt_throw(ju_ConcurrentModificationException__init_());
    if ($this.$removeIndex < 0)
        $rt_throw(jl_IllegalStateException__init_());
    ju_PriorityQueue_removeAt($this.$this$0, $this.$removeIndex);
    $this.$removeIndex = (-1);
    $this.$index1 = $this.$index1 - 1 | 0;
    $this.$knownVersion = $this.$this$0.$version;
},
jur_AbstractCharClass$LazyDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyDigit__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyDigit();
    jur_AbstractCharClass$LazyDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyDigit_computeValue = $this => {
    return (jur_CharClass__init_()).$add0(48, 57);
},
jur_AbstractCharClass$LazyNonDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyDigit),
jur_AbstractCharClass$LazyNonDigit__init_ = $this => {
    jur_AbstractCharClass$LazyDigit__init_($this);
},
jur_AbstractCharClass$LazyNonDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonDigit();
    jur_AbstractCharClass$LazyNonDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonDigit_computeValue = $this => {
    let $chCl;
    $chCl = (jur_AbstractCharClass$LazyDigit_computeValue($this)).$setNegative(1);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
},
jur_BackReferencedSingleSet = $rt_classWithoutFields(jur_SingleSet),
jur_BackReferencedSingleSet__init_ = ($this, $node) => {
    jur_SingleSet__init_($this, $node.$kid, $node.$fSet);
},
jur_BackReferencedSingleSet__init_0 = var_0 => {
    let var_1 = new jur_BackReferencedSingleSet();
    jur_BackReferencedSingleSet__init_(var_1, var_0);
    return var_1;
},
jur_BackReferencedSingleSet_find = ($this, $startSearch, $testString, $matchResult) => {
    let $res, $lastIndex, $saveStart;
    $res = 0;
    $lastIndex = $matchResult.$getRightBound();
    a: {
        while (true) {
            if ($startSearch > $lastIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = $matchResult.$getStart($this.$groupIndex);
            $matchResult.$setStart($this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            $matchResult.$setStart($this.$groupIndex, $saveStart);
            $startSearch = $startSearch + 1 | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $res, $saveStart;
    $res = 0;
    a: {
        while (true) {
            if ($startSearch < $stringIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = $matchResult.$getStart($this.$groupIndex);
            $matchResult.$setStart($this.$groupIndex, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            $matchResult.$setStart($this.$groupIndex, $saveStart);
            $startSearch = $startSearch + (-1) | 0;
        }
    }
    return $startSearch;
},
jur_BackReferencedSingleSet_processBackRefReplacement = $this => {
    return null;
};
function jur_CIBackReferenceSet() {
    let a = this; jur_JointSet.call(a);
    a.$referencedGroup = 0;
    a.$consCounter1 = 0;
}
let jur_CIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_JointSet__init_($this);
    $this.$referencedGroup = $groupIndex;
    $this.$consCounter1 = $consCounter;
},
jur_CIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CIBackReferenceSet();
    jur_CIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i, var$6, var$7;
    $group = $this.$getString($matchResult);
    if ($group !== null && ($stringIndex + $group.$length() | 0) <= $matchResult.$getRightBound()) {
        $i = 0;
        while (true) {
            if ($i >= $group.$length()) {
                $matchResult.$setConsumed($this.$consCounter1, $group.$length());
                return $this.$next2.$matches($stringIndex + $group.$length() | 0, $testString, $matchResult);
            }
            var$6 = $group.$charAt($i);
            var$7 = $stringIndex + $i | 0;
            if (var$6 != $testString.$charAt(var$7) && jur_Pattern_getSupplement($group.$charAt($i)) != $testString.$charAt(var$7))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_CIBackReferenceSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_CIBackReferenceSet_getString = ($this, $matchResult) => {
    let $res;
    $res = $matchResult.$getGroupNoCheck($this.$referencedGroup);
    return $res;
},
jur_CIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(11)), var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_CIBackReferenceSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !$matchResult.$getConsumed($this.$consCounter1) ? 0 : 1;
    $matchResult.$setConsumed($this.$consCounter1, (-1));
    return $res;
},
jur_AbstractCharClass$LazyWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyWord__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyWord__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyWord();
    jur_AbstractCharClass$LazyWord__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyWord_computeValue = $this => {
    return ((((jur_CharClass__init_()).$add0(97, 122)).$add0(65, 90)).$add0(48, 57)).$add(95);
},
jur_AbstractCharClass$LazyNonWord = $rt_classWithoutFields(jur_AbstractCharClass$LazyWord),
jur_AbstractCharClass$LazyNonWord__init_ = $this => {
    jur_AbstractCharClass$LazyWord__init_($this);
},
jur_AbstractCharClass$LazyNonWord__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonWord();
    jur_AbstractCharClass$LazyNonWord__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonWord_computeValue = $this => {
    let $chCl;
    $chCl = (jur_AbstractCharClass$LazyWord_computeValue($this)).$setNegative(1);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function jur_AbstractCharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS = null;
    a.$this$029 = null;
}
let jur_AbstractCharClass$1__init_ = ($this, $this$0, var$2) => {
    $this.$this$029 = $this$0;
    $this.$val$lHS = var$2;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$1__init_0 = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$1();
    jur_AbstractCharClass$1__init_(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$1_contains = ($this, $ch) => {
    let $index;
    $index = $ch - 55296 | 0;
    return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ $this.$val$lHS.$get0($index) : 0;
};
function jur_AbstractCharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS0 = null;
    a.$val$thisClass = null;
    a.$this$020 = null;
}
let jur_AbstractCharClass$2__init_ = ($this, $this$0, var$2, var$3) => {
    $this.$this$020 = $this$0;
    $this.$val$lHS0 = var$2;
    $this.$val$thisClass = var$3;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$2__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$2();
    jur_AbstractCharClass$2__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$2_contains = ($this, $ch) => {
    let $index, $containslHS;
    $index = $ch - 55296 | 0;
    $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ $this.$val$lHS0.$get0($index) : 0;
    return $this.$val$thisClass.$contains($ch) && !$containslHS ? 1 : 0;
},
jur_AbstractCharClass$LazyJavaLowerCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLowerCase__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaLowerCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
    jur_AbstractCharClass$LazyJavaLowerCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLowerCase_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaLowerCase$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function jur_LeafSet() {
    jur_AbstractSet.call(this);
    this.$charCount0 = 0;
}
let jur_LeafSet__init_0 = ($this, $next) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$charCount0 = 1;
    $this.$setType(1);
},
jur_LeafSet__init_ = $this => {
    jur_AbstractSet__init_($this);
    $this.$charCount0 = 1;
},
jur_LeafSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    if (($stringIndex + $this.$charCount() | 0) > $matchResult.$getRightBound()) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $shift = $this.$accepts($stringIndex, $testString);
    if ($shift < 0)
        return (-1);
    return $this.$next2.$matches($stringIndex + $shift | 0, $testString, $matchResult);
},
jur_LeafSet_charCount = $this => {
    return $this.$charCount0;
},
jur_LeafSet_hasConsumed = ($this, $mr) => {
    return 1;
};
function jur_CISequenceSet() {
    jur_LeafSet.call(this);
    this.$string0 = null;
}
let jur_CISequenceSet__init_ = ($this, $substring) => {
    jur_LeafSet__init_($this);
    $this.$string0 = $substring.$toString();
    $this.$charCount0 = $substring.$length();
},
jur_CISequenceSet__init_0 = var_0 => {
    let var_1 = new jur_CISequenceSet();
    jur_CISequenceSet__init_(var_1, var_0);
    return var_1;
},
jur_CISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i, var$4, var$5, var$6;
    $i = 0;
    while (true) {
        if ($i >= $this.$string0.$length())
            return $this.$string0.$length();
        var$4 = $this.$string0.$charAt($i);
        var$5 = $strIndex + $i | 0;
        if (var$4 != $testString.$charAt(var$5)) {
            var$6 = $this.$string0;
            if (jur_Pattern_getSupplement(var$6.$charAt($i)) != $testString.$charAt(var$5))
                break;
        }
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string0;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(12)), var$1);
    return jl_StringBuilder_toString(var$2);
},
otciu_CLDRHelper = $rt_classWithoutFields(),
otciu_CLDRHelper_$$metadata$$10 = null,
otciu_CLDRHelper_getDefaultLocale = () => {
    if (otciu_CLDRHelper_$$metadata$$10 === null)
        otciu_CLDRHelper_$$metadata$$10 = otciu_CLDRHelper_getDefaultLocale$$create();
    return otciu_CLDRHelper_$$metadata$$10;
},
otciu_CLDRHelper_getDefaultLocale$$create = () => {
    return {"value" : "en_GB"};
};
function jur_QuantifierSet() {
    jur_AbstractSet.call(this);
    this.$innerSet = null;
}
let jur_QuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AbstractSet__init_0($this, $next);
    $this.$innerSet = $innerSet;
    $this.$setType($type);
},
jur_QuantifierSet_getInnerSet = $this => {
    return $this.$innerSet;
},
jur_QuantifierSet_first = ($this, $set) => {
    return !$this.$innerSet.$first($set) && !$this.$next2.$first($set) ? 0 : 1;
},
jur_QuantifierSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_QuantifierSet_processSecondPass = $this => {
    let $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$next2 !== null && !$this.$next2.$isSecondPassVisited) {
        $set = $this.$next2.$processBackRefReplacement();
        if ($set !== null) {
            $this.$next2.$isSecondPassVisited = 1;
            $this.$next2 = $set;
        }
        $this.$next2.$processSecondPass();
    }
    if ($this.$innerSet !== null) {
        if (!$this.$innerSet.$isSecondPassVisited) {
            $set = $this.$innerSet.$processBackRefReplacement();
            if ($set !== null) {
                $this.$innerSet.$isSecondPassVisited = 1;
                $this.$innerSet = $set;
            }
            $this.$innerSet.$processSecondPass();
        } else if ($this.$innerSet instanceof jur_SingleSet && $this.$innerSet.$fSet.$isBackReferenced)
            $this.$innerSet = $this.$innerSet.$next2;
    }
};
function jur_LeafQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$leaf = null;
}
let jur_LeafQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$leaf = $innerSet;
},
jur_LeafQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_LeafQuantifierSet();
    jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_LeafQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $i, var$5;
    $i = 0;
    a: {
        while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$getRightBound()) {
            var$5 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$5 <= 0)
                break a;
            $stringIndex = $stringIndex + var$5 | 0;
            $i = $i + 1 | 0;
        }
    }
    while (true) {
        if ($i < 0)
            return (-1);
        var$5 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if (var$5 >= 0)
            break;
        $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
        $i = $i + (-1) | 0;
    }
    return var$5;
},
jur_LeafQuantifierSet_getName = $this => {
    return $rt_s(13);
};
function jur_CompositeQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
    this.$quantifier = null;
}
let jur_CompositeQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type) => {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier = $quant;
},
jur_CompositeQuantifierSet__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CompositeQuantifierSet();
    jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $min, $max, $i, $shift;
    $min = $this.$quantifier.$min();
    $max = $this.$quantifier.$max();
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while ($i < $max) {
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$getRightBound())
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break a;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            while (true) {
                if ($i < $min)
                    return (-1);
                $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
                if ($shift >= 0)
                    break;
                $stringIndex = $stringIndex - $this.$leaf.$charCount() | 0;
                $i = $i + (-1) | 0;
            }
            return $shift;
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$getRightBound()) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_CompositeQuantifierSet_getName = $this => {
    return $this.$quantifier.$toString();
},
jur_PossessiveCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_PossessiveCompositeQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type) => {
    jur_CompositeQuantifierSet__init_($this, $quant, $innerSet, $next, $type);
},
jur_PossessiveCompositeQuantifierSet__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_PossessiveCompositeQuantifierSet();
    jur_PossessiveCompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_PossessiveCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $min, $max, $i, $shift;
    $min = $this.$quantifier.$min();
    $max = $this.$quantifier.$max();
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$getRightBound())
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$getRightBound()) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jl_CharSequence = $rt_classWithoutFields(0),
ogu_Utils = $rt_classWithoutFields(),
ogu_Utils_LOGGER = null,
ogu_Utils_$callClinit = () => {
    ogu_Utils_$callClinit = $rt_eraseClinit(ogu_Utils);
    ogu_Utils__clinit_();
},
ogu_Utils_reclaimTour = ($origAns, $g) => {
    let $ans, $path, $n, $i, $l, $firstId, $secondId, $traversalCost, $foundIt, $candidates, var$13, $l2, $secondCost;
    ogu_Utils_$callClinit();
    $ans = ori_Tour__init_();
    $path = $origAns.$getPath();
    $n = $path.$size();
    $i = 0;
    while ($i < $n) {
        $l = $path.$get($i);
        $firstId = (($l.$getEndpoints()).$getFirst()).$getId();
        $secondId = (($l.$getEndpoints()).$getSecond()).$getId();
        $traversalCost = $l.$getCost();
        $foundIt = 0;
        $candidates = (($g.$getVertex($firstId)).$getNeighbors()).$get1($g.$getVertex($secondId));
        if (!($firstId == $secondId && $firstId == $g.$getDepotId())) {
            var$13 = $candidates.$iterator();
            a: {
                while (var$13.$hasNext()) {
                    $l2 = var$13.$next();
                    if ($l.$isRequired() && !$l2.$isRequired())
                        continue;
                    if ((($l2.$getEndpoints()).$getFirst()).$getId() == $firstId && $traversalCost == $l2.$getCost()) {
                        $ans.$appendEdge($l2, $l.$isRequired());
                        $foundIt = 1;
                        break a;
                    }
                    if (!$l2.$isDirected()) {
                        $secondCost = $l2.$getCost();
                        if ($l2.$isWindy())
                            $secondCost = $l2.$getReverseCost();
                        if ((($l2.$getEndpoints()).$getFirst()).$getId() == $secondId && $traversalCost == $secondCost) {
                            $ans.$appendEdge($l2, $l.$isRequired());
                            $foundIt = 1;
                            break a;
                        }
                    }
                }
            }
            if (!$foundIt) {
                ogu_Utils_LOGGER.$error($rt_s(14));
                return null;
            }
        }
        $i = $i + 1 | 0;
    }
    return $ans;
},
ogu_Utils__clinit_ = () => {
    ogu_Utils_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ogu_Utils));
},
jl_StringIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException),
jl_StringIndexOutOfBoundsException__init_0 = $this => {
    jl_IndexOutOfBoundsException__init_0($this);
},
jl_StringIndexOutOfBoundsException__init_ = () => {
    let var_0 = new jl_StringIndexOutOfBoundsException();
    jl_StringIndexOutOfBoundsException__init_0(var_0);
    return var_0;
};
function ju_MissingResourceException() {
    let a = this; jl_RuntimeException.call(a);
    a.$className = null;
    a.$key0 = null;
}
let ju_MissingResourceException__init_ = ($this, $s, $className, $key) => {
    jl_RuntimeException__init_0($this, $s);
    $this.$className = $className;
    $this.$key0 = $key;
},
ju_MissingResourceException__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new ju_MissingResourceException();
    ju_MissingResourceException__init_(var_3, var_0, var_1, var_2);
    return var_3;
};
function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$031 = null;
}
let jur_AbstractCharClass$LazyJavaLetterOrDigit$1__init_ = ($this, $this$0) => {
    $this.$this$031 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaLetterOrDigit$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1();
    jur_AbstractCharClass$LazyJavaLetterOrDigit$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains = ($this, $ch) => {
    return jl_Character_isLetterOrDigit($ch);
};
function jur_CharClass$18() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$bs = null;
    a.$this$014 = null;
}
let jur_CharClass$18__init_ = ($this, $this$0, var$2) => {
    $this.$this$014 = $this$0;
    $this.$val$bs = var$2;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$18__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass$18();
    jur_CharClass$18__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass$18_contains = ($this, $ch) => {
    return $this.$alt ^ $this.$val$bs.$get0($ch);
},
jur_CharClass$18_toString = $this => {
    let $temp, $i;
    $temp = jl_StringBuilder__init_();
    $i = $this.$val$bs.$nextSetBit(0);
    while ($i >= 0) {
        $temp.$append3(jl_Character_toChars($i));
        $temp.$append0(124);
        $i = $this.$val$bs.$nextSetBit($i + 1 | 0);
    }
    if ($temp.$length() > 0)
        $temp.$deleteCharAt($temp.$length() - 1 | 0);
    return $temp.$toString();
},
jur_GroupQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_GroupQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_GroupQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_GroupQuantifierSet();
    jur_GroupQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_GroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_GroupQuantifierSet_getName = $this => {
    return $rt_s(15);
},
jur_PossessiveGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PossessiveGroupQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_GroupQuantifierSet__init_($this, $innerSet, $next, $type);
    jur_FSet_$callClinit();
    $innerSet.$setNext(jur_FSet_posFSet);
},
jur_PossessiveGroupQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_PossessiveGroupQuantifierSet();
    jur_PossessiveGroupQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PossessiveGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $stringIndex_0;
    while (true) {
        $stringIndex_0 = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($stringIndex_0 <= 0)
            break;
        $stringIndex = $stringIndex_0;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
};
function oc_Link() {
    let a = this; jl_Object.call(a);
    a.$mLabel = null;
    a.$mId = 0;
    a.$mGraphId0 = 0;
    a.$matchId = 0;
    a.$mEndpoints = null;
    a.$mCost0 = 0;
    a.$mServiceCost = 0;
    a.$mCapacity = 0;
    a.$isDirected1 = 0;
    a.$isRequired1 = 0;
    a.$capacitySet = 0;
    a.$hasTimeWindow = 0;
    a.$maxSpeed = 0;
    a.$zone = null;
    a.$type = null;
}
let oc_Link_LOGGER = null,
oc_Link_maxTime = 0,
oc_Link_$callClinit = () => {
    oc_Link_$callClinit = $rt_eraseClinit(oc_Link);
    oc_Link__clinit_();
},
oc_Link__init_ = ($this, $label, $endpoints, $cost) => {
    oc_Link_$callClinit();
    oc_Link__init_0($this, $label, $endpoints, $cost, 1);
},
oc_Link__init_0 = ($this, $label, $endpoints, $cost, $required) => {
    oc_Link_$callClinit();
    jl_Object__init_($this);
    $this.$setId((-1));
    $this.$setGraphId((-1));
    $this.$setMatchId((-1));
    $this.$setLabel($label);
    $this.$setEndpoints($endpoints);
    $this.$setCost($cost);
    $this.$setRequired($required);
    $this.$capacitySet = 0;
    $this.$hasTimeWindow = 0;
    $this.$mServiceCost = 0;
    $this.$maxSpeed = 0;
    oc_Link$Zone_$callClinit();
    $this.$zone = oc_Link$Zone_NOT_SET;
    oc_Link$HighwayType_$callClinit();
    $this.$type = oc_Link$HighwayType_NOT_SET;
},
oc_Link_getLabel = $this => {
    return $this.$mLabel;
},
oc_Link_setLabel = ($this, $mLabel) => {
    $this.$mLabel = $mLabel;
},
oc_Link_getEndpoints = $this => {
    return $this.$mEndpoints;
},
oc_Link_setEndpoints = ($this, $mEndpoints) => {
    $this.$mEndpoints = $mEndpoints;
},
oc_Link_getCost = $this => {
    return $this.$mCost0;
},
oc_Link_setCost = ($this, $mCost) => {
    $this.$mCost0 = $mCost;
},
oc_Link_getId = $this => {
    return $this.$mId;
},
oc_Link_setId = ($this, $mId) => {
    $this.$mId = $mId;
},
oc_Link_getFirstEndpointId = $this => {
    return ($this.$mEndpoints.$getFirst()).$getId();
},
oc_Link_getSecondEndpointId = $this => {
    return ($this.$mEndpoints.$getSecond()).$getId();
},
oc_Link_isDirected = $this => {
    return $this.$isDirected1;
},
oc_Link_setDirected = ($this, $isDirected) => {
    $this.$isDirected1 = $isDirected;
},
oc_Link_getMatchId = $this => {
    return $this.$matchId;
},
oc_Link_setMatchId = ($this, $matchId) => {
    $this.$matchId = $matchId;
},
oc_Link_getCapacity = $this => {
    if ($this.$capacitySet)
        return $this.$mCapacity;
    oc_Link_$callClinit();
    oc_Link_LOGGER.$error($rt_s(16));
    $rt_throw(oe_NoCapacitySetException__init_0());
},
oc_Link_setCapacity = ($this, $newCapacity) => {
    if ($newCapacity >= 0) {
        $this.$capacitySet = 1;
        $this.$mCapacity = $newCapacity;
        return;
    }
    oc_Link_$callClinit();
    oc_Link_LOGGER.$error($rt_s(17));
    $rt_throw(jl_IllegalArgumentException__init_());
},
oc_Link_isCapacitySet = $this => {
    return $this.$capacitySet;
},
oc_Link_isRequired = $this => {
    return $this.$isRequired1;
},
oc_Link_setRequired = ($this, $isRequired) => {
    $this.$isRequired1 = $isRequired;
},
oc_Link_setGraphId = ($this, $mGraphId) => {
    $this.$mGraphId0 = $mGraphId;
},
oc_Link_toString = $this => {
    return ((((jl_StringBuilder__init_()).$append2((($this.$getEndpoints()).$getFirst()).$getId())).$append4($rt_s(18))).$append2((($this.$getEndpoints()).$getSecond()).$getId())).$toString();
},
oc_Link_getMaxSpeed = $this => {
    return $this.$maxSpeed;
},
oc_Link_setMaxSpeed = ($this, $maxSpeed) => {
    $this.$maxSpeed = $maxSpeed;
},
oc_Link_getZone = $this => {
    return $this.$zone;
},
oc_Link_setZone = ($this, $zone) => {
    $this.$zone = $zone;
},
oc_Link_getType = $this => {
    return $this.$type;
},
oc_Link_setType = ($this, $type) => {
    $this.$type = $type;
},
oc_Link__clinit_ = () => {
    oc_Link_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_Link));
    oc_Link_maxTime = 1000000;
},
oli_MixedEdge = $rt_classWithoutFields(oc_Link),
oli_MixedEdge__init_0 = ($this, $label, $endpoints, $cost, $isDirected) => {
    oc_Link__init_($this, $label, $endpoints, $cost);
    $this.$setDirected($isDirected);
},
oli_MixedEdge__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new oli_MixedEdge();
    oli_MixedEdge__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
oli_MixedEdge_getHead = $this => {
    if (!$this.$isDirected())
        $rt_throw(oe_WrongEdgeTypeException__init_());
    return ($this.$getEndpoints()).$getSecond();
},
oli_MixedEdge_getTail = $this => {
    if (!$this.$isDirected())
        $rt_throw(oe_WrongEdgeTypeException__init_());
    return ($this.$getEndpoints()).$getFirst();
},
oli_MixedEdge_isWindy = $this => {
    return 0;
},
jl_Cloneable = $rt_classWithoutFields(0);
function gt_THash() {
    let a = this; jl_Object.call(a);
    a.$_size = 0;
    a.$_free = 0;
    a.$_deadkeys = 0;
    a.$_loadFactor = 0.0;
    a.$_maxSize = 0;
}
let gt_THash_EMPTY_OBJECT_ARRAY = null,
gt_THash_$callClinit = () => {
    gt_THash_$callClinit = $rt_eraseClinit(gt_THash);
    gt_THash__clinit_();
},
gt_THash__init_ = $this => {
    gt_THash_$callClinit();
    gt_THash__init_0($this, (-1), 0.800000011920929);
},
gt_THash__init_0 = ($this, $initialCapacity, $loadFactor) => {
    gt_THash_$callClinit();
    jl_Object__init_($this);
    $this.$_loadFactor = $loadFactor;
    $this.$setUp($initialCapacity == (-1) ? (-1) : ($initialCapacity / $loadFactor | 0) + 1 | 0);
},
gt_THash_isEmpty = $this => {
    return 0 != $this.$_size ? 0 : 1;
},
gt_THash_size = $this => {
    return $this.$_size;
},
gt_THash_compact = $this => {
    $this.$rehash(gt_PrimeFinder_nextPrime(($this.$size() / $this.$_loadFactor | 0) + 2 | 0));
    gt_THash_computeMaxSize($this, $this.$capacity());
},
gt_THash_removeAt = ($this, $index) => {
    $this.$_size = $this.$_size - 1 | 0;
    $this.$_deadkeys = $this.$_deadkeys + 1 | 0;
    gt_THash_compactIfNecessary($this);
},
gt_THash_compactIfNecessary = $this => {
    if ($this.$_deadkeys > $this.$_size && $this.$capacity() > 42)
        $this.$compact();
},
gt_THash_setUp = ($this, $initialCapacity) => {
    let $capacity;
    $capacity = $initialCapacity != (-1) ? gt_PrimeFinder_nextPrime($initialCapacity) : 0;
    gt_THash_computeMaxSize($this, $capacity);
    return $capacity;
},
gt_THash_computeMaxSize = ($this, $capacity) => {
    $this.$_maxSize = jl_Math_max(0, jl_Math_min($capacity - 1 | 0, $capacity * $this.$_loadFactor | 0));
    $this.$_free = $capacity - $this.$_size | 0;
    $this.$_deadkeys = 0;
},
gt_THash_postInsertHook = ($this, $usedFreeSlot) => {
    let var$2;
    if (!$usedFreeSlot)
        $this.$_deadkeys = $this.$_deadkeys - 1 | 0;
    else
        $this.$_free = $this.$_free - 1 | 0;
    var$2 = $this.$_size + 1 | 0;
    $this.$_size = var$2;
    if (!(var$2 <= $this.$_maxSize && $this.$_free)) {
        $this.$rehash(gt_PrimeFinder_nextPrime($this.$calculateGrownCapacity()));
        gt_THash_computeMaxSize($this, $this.$capacity());
    }
},
gt_THash_calculateGrownCapacity = $this => {
    return $this.$capacity() << 1;
},
gt_THash__clinit_ = () => {
    gt_THash_EMPTY_OBJECT_ARRAY = $rt_createArray(jl_Object, 0);
};
function gt_TPrimitiveHash() {
    gt_THash.call(this);
    this.$_states = null;
}
let gt_TPrimitiveHash__init_ = $this => {
    gt_THash__init_($this);
},
gt_TPrimitiveHash_setUp = ($this, $initialCapacity) => {
    let $capacity;
    $capacity = gt_THash_setUp($this, $initialCapacity);
    $this.$_states = $initialCapacity != (-1) ? $rt_createByteArray($capacity) : null;
    return $capacity;
},
gt_TIntHashingStrategy = $rt_classWithoutFields(0);
function gt_TIntHash() {
    let a = this; gt_TPrimitiveHash.call(a);
    a.$_set0 = null;
    a.$_hashingStrategy0 = null;
}
let gt_TIntHash__init_ = $this => {
    gt_TPrimitiveHash__init_($this);
    $this.$_hashingStrategy0 = $this;
},
gt_TIntHash_setUp = ($this, $initialCapacity) => {
    let $capacity;
    $capacity = gt_TPrimitiveHash_setUp($this, $initialCapacity);
    $this.$_set0 = $initialCapacity != (-1) ? $rt_createIntArray($capacity) : null;
    return $capacity;
},
gt_TIntHash_index = ($this, $val) => {
    let $states, var$3, $set, $length, $hash, $index, $probe;
    $states = $this.$_states;
    if ($states === null)
        return (-1);
    a: {
        var$3 = $states.data;
        $set = $this.$_set0;
        $length = var$3.length;
        $hash = $this.$_hashingStrategy0.$computeHashCode($val) & 2147483647;
        $index = $hash % $length | 0;
        if (var$3[$index] && !(var$3[$index] != 2 && $set.data[$index] == $val)) {
            $probe = 1 + ($hash % ($length - 2 | 0) | 0) | 0;
            while (true) {
                $index = $index - $probe | 0;
                if ($index < 0)
                    $index = $index + $length | 0;
                if (!var$3[$index])
                    break a;
                if (var$3[$index] == 2)
                    continue;
                if ($set.data[$index] == $val)
                    break;
            }
        }
    }
    if (!var$3[$index])
        $index = (-1);
    return $index;
},
gt_TIntHash_computeHashCode = ($this, $val) => {
    return gt_HashFunctions_hash($val);
};
function jur_UCIBackReferenceSet() {
    jur_CIBackReferenceSet.call(this);
    this.$groupIndex1 = 0;
}
let jur_UCIBackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_UCIBackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_UCIBackReferenceSet();
    jur_UCIBackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_UCIBackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $i, var$6, var$7;
    $group = $this.$getString($matchResult);
    if ($group !== null && ($stringIndex + $group.$length() | 0) <= $matchResult.$getRightBound()) {
        $i = 0;
        while (true) {
            if ($i >= $group.$length()) {
                $matchResult.$setConsumed($this.$consCounter1, $group.$length());
                return $this.$next2.$matches($stringIndex + $group.$length() | 0, $testString, $matchResult);
            }
            var$6 = jl_Character_toLowerCase(jl_Character_toUpperCase($group.$charAt($i)));
            var$7 = $stringIndex + $i | 0;
            var$7 = jl_Character_toUpperCase($testString.$charAt(var$7));
            if (var$6 != jl_Character_toLowerCase(var$7))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
},
jur_UCIBackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex1;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(19)), var$1);
    return jl_StringBuilder_toString(var$2);
};
function jur_CharClass$13() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz4 = null;
    a.$this$024 = null;
}
let jur_CharClass$13__init_ = ($this, $this$0, var$2) => {
    $this.$this$024 = $this$0;
    $this.$val$clazz4 = var$2;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$13__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass$13();
    jur_CharClass$13__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass$13_contains = ($this, $ch) => {
    return $this.$val$clazz4.$contains($ch);
};
function jur_CharClass$12() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz5 = null;
    a.$this$034 = null;
}
let jur_CharClass$12__init_ = ($this, $this$0, var$2) => {
    $this.$this$034 = $this$0;
    $this.$val$clazz5 = var$2;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$12__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass$12();
    jur_CharClass$12__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass$12_contains = ($this, $ch) => {
    return $this.$val$clazz5.$contains($ch) ? 0 : 1;
};
function jur_CharClass$11() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt4 = 0;
    a.$val$nb2 = null;
    a.$val$clazz8 = null;
    a.$this$015 = null;
}
let jur_CharClass$11__init_ = ($this, $this$0, var$2, var$3, var$4) => {
    $this.$this$015 = $this$0;
    $this.$val$curAlt4 = var$2;
    $this.$val$nb2 = var$3;
    $this.$val$clazz8 = var$4;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$11__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CharClass$11();
    jur_CharClass$11__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CharClass$11_contains = ($this, $ch) => {
    return !($this.$val$curAlt4 ^ $this.$val$nb2.$contains($ch)) && !$this.$val$clazz8.$contains($ch) ? 0 : 1;
};
function jur_AbstractCharClass$LazyCategory() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category1 = 0;
    a.$mayContainSupplCodepoints1 = 0;
    a.$containsAllSurrogates0 = 0;
}
let jur_AbstractCharClass$LazyCategory__init_0 = ($this, $cat, $mayContainSupplCodepoints) => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategory__init_1 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
    $this.$containsAllSurrogates0 = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category1 = $cat;
},
jur_AbstractCharClass$LazyCategory__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_1(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategory_computeValue = $this => {
    let $chCl;
    $chCl = jur_UnicodeCategory__init_0($this.$category1);
    if ($this.$containsAllSurrogates0)
        $chCl.$lowHighSurrogates.$set(0, 2048);
    $chCl.$mayContainSupplCodepoints0 = $this.$mayContainSupplCodepoints1;
    return $chCl;
},
otci_Base46 = $rt_classWithoutFields(),
otci_Base46_decodeUnsigned = $seq => {
    let $number, $pos, var$4, var$5, $digit, $hasMore;
    $number = 0;
    $pos = 1;
    while (true) {
        var$4 = $seq.$characters.data;
        var$5 = $seq.$pointer;
        $seq.$pointer = var$5 + 1 | 0;
        $digit = otci_Base46_decodeDigit(var$4[var$5]);
        $hasMore = ($digit % 2 | 0) != 1 ? 0 : 1;
        $number = $number + $rt_imul($pos, $digit / 2 | 0) | 0;
        $pos = $pos * 46 | 0;
        if (!$hasMore)
            break;
    }
    return $number;
},
otci_Base46_decode = $seq => {
    let $number, $result;
    $number = otci_Base46_decodeUnsigned($seq);
    $result = $number / 2 | 0;
    if ($number % 2 | 0)
        $result =  -$result | 0;
    return $result;
},
otci_Base46_decodeDigit = $c => {
    if ($c < 34)
        return $c - 32 | 0;
    if ($c >= 92)
        return ($c - 32 | 0) - 2 | 0;
    return ($c - 32 | 0) - 1 | 0;
};
function jur_CharClass$10() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt6 = 0;
    a.$val$nb0 = null;
    a.$val$clazz0 = null;
    a.$this$022 = null;
}
let jur_CharClass$10__init_ = ($this, $this$0, var$2, var$3, var$4) => {
    $this.$this$022 = $this$0;
    $this.$val$curAlt6 = var$2;
    $this.$val$nb0 = var$3;
    $this.$val$clazz0 = var$4;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$10__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CharClass$10();
    jur_CharClass$10__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CharClass$10_contains = ($this, $ch) => {
    return !($this.$val$curAlt6 ^ $this.$val$nb0.$contains($ch)) && !$this.$val$clazz0.$contains($ch) ? 1 : 0;
};
function jur_CharClass$17() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt5 = 0;
    a.$val$nb1 = null;
    a.$val$clazz10 = null;
    a.$this$019 = null;
}
let jur_CharClass$17__init_ = ($this, $this$0, var$2, var$3, var$4) => {
    $this.$this$019 = $this$0;
    $this.$val$curAlt5 = var$2;
    $this.$val$nb1 = var$3;
    $this.$val$clazz10 = var$4;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$17__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CharClass$17();
    jur_CharClass$17__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CharClass$17_contains = ($this, $ch) => {
    return $this.$val$curAlt5 ^ $this.$val$nb1.$contains($ch) && $this.$val$clazz10.$contains($ch) ? 1 : 0;
};
function jur_UCISequenceSet() {
    jur_LeafSet.call(this);
    this.$string1 = null;
}
let jur_UCISequenceSet__init_ = ($this, $substring) => {
    let $res, $i;
    jur_LeafSet__init_($this);
    $res = jl_StringBuilder__init_();
    $i = 0;
    while ($i < $substring.$length()) {
        $res.$append0(jl_Character_toLowerCase(jl_Character_toUpperCase($substring.$charAt($i))));
        $i = $i + 1 | 0;
    }
    $this.$string1 = $res.$toString();
    $this.$charCount0 = $res.$length();
},
jur_UCISequenceSet__init_0 = var_0 => {
    let var_1 = new jur_UCISequenceSet();
    jur_UCISequenceSet__init_(var_1, var_0);
    return var_1;
},
jur_UCISequenceSet_accepts = ($this, $strIndex, $testString) => {
    let $i;
    $i = 0;
    while (true) {
        if ($i >= $this.$string1.$length())
            return $this.$string1.$length();
        if ($this.$string1.$charAt($i) != jl_Character_toLowerCase(jl_Character_toUpperCase($testString.$charAt($strIndex + $i | 0))))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_UCISequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string1;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(20)), var$1);
    return jl_StringBuilder_toString(var$2);
};
function jur_CharClass$16() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt3 = 0;
    a.$val$nb = null;
    a.$val$clazz3 = null;
    a.$this$026 = null;
}
let jur_CharClass$16__init_ = ($this, $this$0, var$2, var$3, var$4) => {
    $this.$this$026 = $this$0;
    $this.$val$curAlt3 = var$2;
    $this.$val$nb = var$3;
    $this.$val$clazz3 = var$4;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$16__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CharClass$16();
    jur_CharClass$16__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CharClass$16_contains = ($this, $ch) => {
    return $this.$val$curAlt3 ^ $this.$val$nb.$contains($ch) && $this.$val$clazz3.$contains($ch) ? 0 : 1;
},
jur_DotAllQuantifierSet = $rt_classWithoutFields(jur_QuantifierSet),
jur_DotAllQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_DotAllQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_DotAllQuantifierSet();
    jur_DotAllQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_DotAllQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$getRightBound();
    if ($strLength > $stringIndex)
        return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_DotAllQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength;
    $strLength = $matchResult.$getRightBound();
    if ($this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
        return $stringIndex;
    return (-1);
},
jur_DotAllQuantifierSet_getName = $this => {
    return $rt_s(21);
};
function jur_CharClass$15() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz9 = null;
    a.$val$curAlt1 = 0;
    a.$this$09 = null;
}
let jur_CharClass$15__init_ = ($this, $this$0, var$2, var$3) => {
    $this.$this$09 = $this$0;
    $this.$val$clazz9 = var$2;
    $this.$val$curAlt1 = var$3;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$15__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_CharClass$15();
    jur_CharClass$15__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_CharClass$15_contains = ($this, $ch) => {
    return $this.$val$clazz9.$contains($ch) && $this.$val$curAlt1 ^ $this.$this$09.$bits.$get0($ch) ? 1 : 0;
};
function jur_AbstractCharClass$LazyJavaDefined$1() {
    jur_AbstractCharClass.call(this);
    this.$this$028 = null;
}
let jur_AbstractCharClass$LazyJavaDefined$1__init_ = ($this, $this$0) => {
    $this.$this$028 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaDefined$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaDefined$1();
    jur_AbstractCharClass$LazyJavaDefined$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaDefined$1_contains = ($this, $ch) => {
    return jl_Character_isDefined($ch);
};
function jur_CharClass$14() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz2 = null;
    a.$val$curAlt10 = 0;
    a.$this$06 = null;
}
let jur_CharClass$14__init_ = ($this, $this$0, var$2, var$3) => {
    $this.$this$06 = $this$0;
    $this.$val$clazz2 = var$2;
    $this.$val$curAlt10 = var$3;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$14__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_CharClass$14();
    jur_CharClass$14__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_CharClass$14_contains = ($this, $ch) => {
    return $this.$val$clazz2.$contains($ch) && $this.$val$curAlt10 ^ $this.$this$06.$bits.$get0($ch) ? 0 : 1;
};
function jur_FSet() {
    let a = this; jur_AbstractSet.call(a);
    a.$isBackReferenced = 0;
    a.$groupIndex0 = 0;
}
let jur_FSet_posFSet = null,
jur_FSet_$callClinit = () => {
    jur_FSet_$callClinit = $rt_eraseClinit(jur_FSet);
    jur_FSet__clinit_();
},
jur_FSet__init_ = ($this, $groupIndex) => {
    jur_FSet_$callClinit();
    jur_AbstractSet__init_($this);
    $this.$groupIndex0 = $groupIndex;
},
jur_FSet__init_0 = var_0 => {
    let var_1 = new jur_FSet();
    jur_FSet__init_(var_1, var_0);
    return var_1;
},
jur_FSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $end, $shift;
    $end = $matchResult.$getEnd($this.$groupIndex0);
    $matchResult.$setEnd($this.$groupIndex0, $stringIndex);
    $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $matchResult.$setEnd($this.$groupIndex0, $end);
    return $shift;
},
jur_FSet_getGroupIndex = $this => {
    return $this.$groupIndex0;
},
jur_FSet_getName = $this => {
    return $rt_s(22);
},
jur_FSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jur_FSet__clinit_ = () => {
    jur_FSet_posFSet = jur_FSet$PossessiveFSet__init_0();
},
jur_BehindFSet = $rt_classWithoutFields(jur_FSet),
jur_BehindFSet__init_ = ($this, $groupIndex) => {
    jur_FSet__init_($this, $groupIndex);
},
jur_BehindFSet__init_0 = var_0 => {
    let var_1 = new jur_BehindFSet();
    jur_BehindFSet__init_(var_1, var_0);
    return var_1;
},
jur_BehindFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr, $rightBound;
    $gr = $this.$getGroupIndex();
    $rightBound = $matchResult.$getConsumed($gr);
    if ($rightBound != $stringIndex)
        $stringIndex = (-1);
    return $stringIndex;
},
jur_BehindFSet_getName = $this => {
    return $rt_s(23);
};
function jl_AbstractStringBuilder() {
    let a = this; jl_Object.call(a);
    a.$buffer = null;
    a.$length1 = 0;
}
let jl_AbstractStringBuilder__init_0 = $this => {
    jl_AbstractStringBuilder__init_($this, 16);
},
jl_AbstractStringBuilder__init_2 = () => {
    let var_0 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_0(var_0);
    return var_0;
},
jl_AbstractStringBuilder__init_ = ($this, $capacity) => {
    jl_Object__init_($this);
    $this.$buffer = $rt_createCharArray($capacity);
},
jl_AbstractStringBuilder__init_1 = var_0 => {
    let var_1 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_(var_1, var_0);
    return var_1;
},
jl_AbstractStringBuilder_append6 = ($this, $obj) => {
    return $this.$insert($this.$length1, $obj);
},
jl_AbstractStringBuilder_append2 = ($this, $string) => {
    return $this.$insert0($this.$length1, $string);
},
jl_AbstractStringBuilder_insert3 = ($this, $index, $string) => {
    let $i, var$4, var$5;
    if ($index >= 0 && $index <= $this.$length1) {
        if ($string === null)
            $string = $rt_s(24);
        else if ($string.$isEmpty())
            return $this;
        $this.$ensureCapacity($this.$length1 + $string.$length() | 0);
        $i = $this.$length1 - 1 | 0;
        while ($i >= $index) {
            $this.$buffer.data[$i + $string.$length() | 0] = $this.$buffer.data[$i];
            $i = $i + (-1) | 0;
        }
        $this.$length1 = $this.$length1 + $string.$length() | 0;
        $i = 0;
        while ($i < $string.$length()) {
            var$4 = $this.$buffer.data;
            var$5 = $index + 1 | 0;
            var$4[$index] = $string.$charAt($i);
            $i = $i + 1 | 0;
            $index = var$5;
        }
        return $this;
    }
    $rt_throw(jl_StringIndexOutOfBoundsException__init_());
},
jl_AbstractStringBuilder_append3 = ($this, $value) => {
    return $this.$append1($value, 10);
},
jl_AbstractStringBuilder_append7 = ($this, $value, $radix) => {
    return $this.$insert1($this.$length1, $value, $radix);
},
jl_AbstractStringBuilder_insert5 = ($this, $target, $value, $radix) => {
    let $positive, var$5, var$6, $pos, $sz, $posLimit, var$10, var$11;
    $positive = 1;
    if ($value < 0) {
        $positive = 0;
        $value =  -$value | 0;
    }
    a: {
        if ($rt_ucmp($value, $radix) < 0) {
            if ($positive)
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                var$5 = $this.$buffer.data;
                var$6 = $target + 1 | 0;
                var$5[$target] = 45;
                $target = var$6;
            }
            $this.$buffer.data[$target] = jl_Character_forDigit($value, $radix);
        } else {
            $pos = 1;
            $sz = 1;
            $posLimit = $rt_udiv((-1), $radix);
            b: {
                while (true) {
                    var$10 = $rt_imul($pos, $radix);
                    if ($rt_ucmp(var$10, $value) > 0) {
                        var$10 = $pos;
                        break b;
                    }
                    $sz = $sz + 1 | 0;
                    if ($rt_ucmp(var$10, $posLimit) > 0)
                        break;
                    $pos = var$10;
                }
            }
            if (!$positive)
                $sz = $sz + 1 | 0;
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
            if ($positive)
                var$11 = $target;
            else {
                var$5 = $this.$buffer.data;
                var$11 = $target + 1 | 0;
                var$5[$target] = 45;
            }
            while (true) {
                if (!var$10)
                    break a;
                var$5 = $this.$buffer.data;
                var$6 = var$11 + 1 | 0;
                var$5[var$11] = jl_Character_forDigit($rt_udiv($value, var$10), $radix);
                $value = $rt_umod($value, var$10);
                var$10 = $rt_udiv(var$10, $radix);
                var$11 = var$6;
            }
        }
    }
    return $this;
},
jl_AbstractStringBuilder_append5 = ($this, $value) => {
    return $this.$insert2($this.$length1, $value);
},
jl_AbstractStringBuilder_insert2 = ($this, $target, $value) => {
    let var$3, var$4, var$5, $number, $mantissa, $exp, $negative, $intPart, $sz, $digits, $zeros, $leadingZeros, $leadingZero, var$16, $pos, $i, $intDigit, var$20;
    var$3 = $rt_compare($value, 0.0);
    if (!var$3) {
        if (1.0 / $value === Infinity) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
            var$4 = $this.$buffer.data;
            var$3 = $target + 1 | 0;
            var$4[$target] = 48;
            var$4 = $this.$buffer.data;
            var$5 = var$3 + 1 | 0;
            var$4[var$3] = 46;
            $this.$buffer.data[var$5] = 48;
            return $this;
        }
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
        var$4 = $this.$buffer.data;
        var$3 = $target + 1 | 0;
        var$4[$target] = 45;
        var$4 = $this.$buffer.data;
        var$5 = var$3 + 1 | 0;
        var$4[var$3] = 48;
        var$4 = $this.$buffer.data;
        var$3 = var$5 + 1 | 0;
        var$4[var$5] = 46;
        $this.$buffer.data[var$3] = 48;
        return $this;
    }
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        var$3 = $target + 1 | 0;
        var$4[$target] = 78;
        var$4 = $this.$buffer.data;
        var$5 = var$3 + 1 | 0;
        var$4[var$3] = 97;
        $this.$buffer.data[var$5] = 78;
        return $this;
    }
    if (!isFinite($value) ? 1 : 0) {
        if (var$3 > 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
            var$3 = $target;
        } else {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
            var$4 = $this.$buffer.data;
            var$3 = $target + 1 | 0;
            var$4[$target] = 45;
        }
        var$4 = $this.$buffer.data;
        var$5 = var$3 + 1 | 0;
        var$4[var$3] = 73;
        var$4 = $this.$buffer.data;
        var$3 = var$5 + 1 | 0;
        var$4[var$5] = 110;
        var$4 = $this.$buffer.data;
        var$5 = var$3 + 1 | 0;
        var$4[var$3] = 102;
        var$4 = $this.$buffer.data;
        var$3 = var$5 + 1 | 0;
        var$4[var$5] = 105;
        var$4 = $this.$buffer.data;
        var$5 = var$3 + 1 | 0;
        var$4[var$3] = 110;
        var$4 = $this.$buffer.data;
        var$3 = var$5 + 1 | 0;
        var$4[var$5] = 105;
        var$4 = $this.$buffer.data;
        var$5 = var$3 + 1 | 0;
        var$4[var$3] = 116;
        $this.$buffer.data[var$5] = 121;
        return $this;
    }
    jl_AbstractStringBuilder$Constants_$callClinit();
    $number = jl_AbstractStringBuilder$Constants_doubleAnalysisResult;
    otcit_DoubleAnalyzer_analyze($value, $number);
    $mantissa = $number.$mantissa;
    $exp = $number.$exponent;
    $negative = $number.$sign;
    $intPart = 1;
    $sz = 1;
    if ($negative)
        $sz = 2;
    $digits = 18;
    $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
    if ($zeros > 0)
        $digits = $digits - $zeros | 0;
    $leadingZeros = 0;
    $leadingZero = 0;
    if ($exp < 7 && $exp >= (-3)) {
        if ($exp >= 0) {
            $intPart = $exp + 1 | 0;
            $digits = jl_Math_max($digits, $intPart + 1 | 0);
            $exp = 0;
        } else {
            $intPart = 0;
            $leadingZeros = ( -$exp | 0) - 1 | 0;
            $leadingZero = 1;
            $sz = $sz + 1 | 0;
            $exp = 0;
        }
    }
    if ($exp) {
        $sz = $sz + 2 | 0;
        if (!($exp > (-10) && $exp < 10))
            $sz = $sz + 1 | 0;
        if (!($exp > (-100) && $exp < 100))
            $sz = $sz + 1 | 0;
        if ($exp < 0)
            $sz = $sz + 1 | 0;
    }
    if ($exp && $digits == $intPart)
        $digits = $digits + 1 | 0;
    var$3 = $sz + ($digits + $leadingZeros | 0) | 0;
    jl_AbstractStringBuilder_insertSpace($this, $target, $target + var$3 | 0);
    if (!$negative)
        var$16 = $target;
    else {
        var$4 = $this.$buffer.data;
        var$16 = $target + 1 | 0;
        var$4[$target] = 45;
    }
    $pos = Long_create(1569325056, 23283064);
    if ($leadingZero) {
        var$4 = $this.$buffer.data;
        var$3 = var$16 + 1 | 0;
        var$4[var$16] = 48;
        var$4 = $this.$buffer.data;
        var$16 = var$3 + 1 | 0;
        var$4[var$3] = 46;
        while (true) {
            var$3 = $leadingZeros + (-1) | 0;
            if ($leadingZeros <= 0)
                break;
            var$4 = $this.$buffer.data;
            var$5 = var$16 + 1 | 0;
            var$4[var$16] = 48;
            $leadingZeros = var$3;
            var$16 = var$5;
        }
    }
    $i = 0;
    while ($i < $digits) {
        if (Long_le($pos, Long_ZERO))
            $intDigit = 0;
        else {
            $intDigit = Long_lo(Long_div($mantissa, $pos));
            $mantissa = Long_rem($mantissa, $pos);
        }
        var$4 = $this.$buffer.data;
        var$3 = var$16 + 1 | 0;
        var$4[var$16] = (48 + $intDigit | 0) & 65535;
        $intPart = $intPart + (-1) | 0;
        if ($intPart)
            var$16 = var$3;
        else {
            var$4 = $this.$buffer.data;
            var$16 = var$3 + 1 | 0;
            var$4[var$3] = 46;
        }
        $pos = Long_div($pos, Long_fromInt(10));
        $i = $i + 1 | 0;
    }
    if ($exp) {
        var$4 = $this.$buffer.data;
        var$5 = var$16 + 1 | 0;
        var$4[var$16] = 69;
        if ($exp >= 0)
            var$20 = var$5;
        else {
            $exp =  -$exp | 0;
            var$4 = $this.$buffer.data;
            var$20 = var$5 + 1 | 0;
            var$4[var$5] = 45;
        }
        if ($exp >= 100) {
            var$4 = $this.$buffer.data;
            var$3 = var$20 + 1 | 0;
            var$4[var$20] = (48 + ($exp / 100 | 0) | 0) & 65535;
            $exp = $exp % 100 | 0;
            var$4 = $this.$buffer.data;
            var$5 = var$3 + 1 | 0;
            var$4[var$3] = (48 + ($exp / 10 | 0) | 0) & 65535;
        } else if ($exp < 10)
            var$5 = var$20;
        else {
            var$4 = $this.$buffer.data;
            var$5 = var$20 + 1 | 0;
            var$4[var$20] = (48 + ($exp / 10 | 0) | 0) & 65535;
        }
        $this.$buffer.data[var$5] = (48 + ($exp % 10 | 0) | 0) & 65535;
    }
    return $this;
},
jl_AbstractStringBuilder_trailingDecimalZeros = $n => {
    let $zeros, $result, $bit, $i;
    $zeros = Long_fromInt(1);
    $result = 0;
    $bit = 16;
    jl_AbstractStringBuilder$Constants_$callClinit();
    $i = jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data.length - 1 | 0;
    while ($i >= 0) {
        if (Long_eq(Long_rem($n, Long_mul($zeros, jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data[$i])), Long_ZERO)) {
            $result = $result | $bit;
            $zeros = Long_mul($zeros, jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data[$i]);
        }
        $bit = $bit >>> 1 | 0;
        $i = $i + (-1) | 0;
    }
    return $result;
},
jl_AbstractStringBuilder_append1 = ($this, $c) => {
    return $this.$insert3($this.$length1, $c);
},
jl_AbstractStringBuilder_insert0 = ($this, $index, $c) => {
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
    $this.$buffer.data[$index] = $c;
    return $this;
},
jl_AbstractStringBuilder_insert4 = ($this, $index, $obj) => {
    return $this.$insert0($index, $obj === null ? $rt_s(24) : $obj.$toString());
},
jl_AbstractStringBuilder_append4 = ($this, $b) => {
    return $this.$insert4($this.$length1, $b);
},
jl_AbstractStringBuilder_insert1 = ($this, $index, $b) => {
    return $this.$insert0($index, !$b ? $rt_s(25) : $rt_s(26));
},
jl_AbstractStringBuilder_ensureCapacity = ($this, $capacity) => {
    let $newLength;
    if ($this.$buffer.data.length >= $capacity)
        return;
    $newLength = $this.$buffer.data.length >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max($this.$buffer.data.length * 2 | 0, 5));
    $this.$buffer = ju_Arrays_copyOf1($this.$buffer, $newLength);
},
jl_AbstractStringBuilder_toString = $this => {
    return jl_String__init_2($this.$buffer, 0, $this.$length1);
},
jl_AbstractStringBuilder_length = $this => {
    return $this.$length1;
},
jl_AbstractStringBuilder_charAt = ($this, $index) => {
    if ($index >= 0 && $index < $this.$length1)
        return $this.$buffer.data[$index];
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
jl_AbstractStringBuilder_append0 = ($this, $chars, $offset, $len) => {
    return $this.$insert5($this.$length1, $chars, $offset, $len);
},
jl_AbstractStringBuilder_insert = ($this, $index, $chars, $offset, $len) => {
    let var$5, var$6, var$7, var$8, var$9;
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
    var$5 = $len + $offset | 0;
    while ($offset < var$5) {
        var$6 = $chars.data;
        var$7 = $this.$buffer.data;
        var$8 = $index + 1 | 0;
        var$9 = $offset + 1 | 0;
        var$7[$index] = var$6[$offset];
        $index = var$8;
        $offset = var$9;
    }
    return $this;
},
jl_AbstractStringBuilder_append = ($this, $chars) => {
    return $this.$append5($chars, 0, $chars.data.length);
},
jl_AbstractStringBuilder_deleteCharAt = ($this, $i) => {
    let var$2, var$3, $i_0;
    if ($i >= 0 && $i < $this.$length1) {
        $this.$length1 = $this.$length1 - 1 | 0;
        while ($i < $this.$length1) {
            var$2 = $this.$buffer.data;
            var$3 = $this.$buffer.data;
            $i_0 = $i + 1 | 0;
            var$2[$i] = var$3[$i_0];
            $i = $i_0;
        }
        return $this;
    }
    $rt_throw(jl_StringIndexOutOfBoundsException__init_());
},
jl_AbstractStringBuilder_delete = ($this, $start, $end) => {
    let var$3, $sz, $i, var$6, var$7, var$8;
    if ($start >= 0) {
        var$3 = $rt_compare($start, $end);
        if (var$3 <= 0 && $start <= $this.$length1) {
            if (!var$3)
                return $this;
            if ($end > $this.$length1)
                $end = $this.$length1;
            $sz = $this.$length1 - $end | 0;
            $this.$length1 = $this.$length1 - ($end - $start | 0) | 0;
            $i = 0;
            while ($i < $sz) {
                var$6 = $this.$buffer.data;
                var$3 = $start + 1 | 0;
                var$7 = $this.$buffer.data;
                var$8 = $end + 1 | 0;
                var$6[$start] = var$7[$end];
                $i = $i + 1 | 0;
                $start = var$3;
                $end = var$8;
            }
            return $this;
        }
    }
    $rt_throw(jl_StringIndexOutOfBoundsException__init_());
},
jl_AbstractStringBuilder_insertSpace = ($this, $start, $end) => {
    let $sz, $i;
    $sz = $this.$length1 - $start | 0;
    $this.$ensureCapacity(($this.$length1 + $end | 0) - $start | 0);
    $i = $sz - 1 | 0;
    while ($i >= 0) {
        $this.$buffer.data[$end + $i | 0] = $this.$buffer.data[$start + $i | 0];
        $i = $i + (-1) | 0;
    }
    $this.$length1 = $this.$length1 + ($end - $start | 0) | 0;
},
jl_Appendable = $rt_classWithoutFields(0),
jl_StringBuilder = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuilder__init_2 = ($this, $capacity) => {
    jl_AbstractStringBuilder__init_($this, $capacity);
},
jl_StringBuilder__init_0 = var_0 => {
    let var_1 = new jl_StringBuilder();
    jl_StringBuilder__init_2(var_1, var_0);
    return var_1;
},
jl_StringBuilder__init_1 = $this => {
    jl_AbstractStringBuilder__init_0($this);
},
jl_StringBuilder__init_ = () => {
    let var_0 = new jl_StringBuilder();
    jl_StringBuilder__init_1(var_0);
    return var_0;
},
jl_StringBuilder_append = ($this, $obj) => {
    jl_AbstractStringBuilder_append6($this, $obj);
    return $this;
},
jl_StringBuilder_append2 = ($this, $string) => {
    jl_AbstractStringBuilder_append2($this, $string);
    return $this;
},
jl_StringBuilder_append1 = ($this, $value) => {
    jl_AbstractStringBuilder_append3($this, $value);
    return $this;
},
jl_StringBuilder_append5 = ($this, $value) => {
    jl_AbstractStringBuilder_append5($this, $value);
    return $this;
},
jl_StringBuilder_append0 = ($this, $c) => {
    jl_AbstractStringBuilder_append1($this, $c);
    return $this;
},
jl_StringBuilder_append4 = ($this, $chars, $offset, $len) => {
    jl_AbstractStringBuilder_append0($this, $chars, $offset, $len);
    return $this;
},
jl_StringBuilder_append7 = ($this, $chars) => {
    jl_AbstractStringBuilder_append($this, $chars);
    return $this;
},
jl_StringBuilder_append3 = ($this, $b) => {
    jl_AbstractStringBuilder_append4($this, $b);
    return $this;
},
jl_StringBuilder_insert5 = ($this, $target, $value) => {
    jl_AbstractStringBuilder_insert2($this, $target, $value);
    return $this;
},
jl_StringBuilder_insert3 = ($this, $index, $chars, $offset, $len) => {
    jl_AbstractStringBuilder_insert($this, $index, $chars, $offset, $len);
    return $this;
},
jl_StringBuilder_insert6 = ($this, $index, $obj) => {
    jl_AbstractStringBuilder_insert4($this, $index, $obj);
    return $this;
},
jl_StringBuilder_insert1 = ($this, $index, $b) => {
    jl_AbstractStringBuilder_insert1($this, $index, $b);
    return $this;
},
jl_StringBuilder_insert2 = ($this, $index, $c) => {
    jl_AbstractStringBuilder_insert0($this, $index, $c);
    return $this;
},
jl_StringBuilder_delete = ($this, $start, $end) => {
    jl_AbstractStringBuilder_delete($this, $start, $end);
    return $this;
},
jl_StringBuilder_deleteCharAt = ($this, $index) => {
    jl_AbstractStringBuilder_deleteCharAt($this, $index);
    return $this;
},
jl_StringBuilder_insert8 = ($this, $index, $string) => {
    jl_AbstractStringBuilder_insert3($this, $index, $string);
    return $this;
};
let jl_StringBuilder_insert7 = ($this, var$1, var$2, var$3, var$4) => {
    return $this.$insert6(var$1, var$2, var$3, var$4);
},
jl_StringBuilder_append6 = ($this, var$1, var$2, var$3) => {
    return $this.$append13(var$1, var$2, var$3);
},
jl_StringBuilder_length = $this => {
    return jl_AbstractStringBuilder_length($this);
},
jl_StringBuilder_toString = $this => {
    return jl_AbstractStringBuilder_toString($this);
},
jl_StringBuilder_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuilder_insert9 = ($this, var$1, var$2) => {
    return $this.$insert7(var$1, var$2);
},
jl_StringBuilder_insert0 = ($this, var$1, var$2) => {
    return $this.$insert8(var$1, var$2);
},
jl_StringBuilder_insert = ($this, var$1, var$2) => {
    return $this.$insert9(var$1, var$2);
},
jl_StringBuilder_insert4 = ($this, var$1, var$2) => {
    return $this.$insert10(var$1, var$2);
},
jl_StringBuilder_insert10 = ($this, var$1, var$2) => {
    return $this.$insert11(var$1, var$2);
},
jur_AbstractCharClass$LazyAlnum = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlpha),
jur_AbstractCharClass$LazyAlnum__init_ = $this => {
    jur_AbstractCharClass$LazyAlpha__init_($this);
},
jur_AbstractCharClass$LazyAlnum__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyAlnum();
    jur_AbstractCharClass$LazyAlnum__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyAlnum_computeValue = $this => {
    return (jur_AbstractCharClass$LazyAlpha_computeValue($this)).$add0(48, 57);
},
ju_ConcurrentModificationException = $rt_classWithoutFields(jl_RuntimeException),
ju_ConcurrentModificationException__init_0 = $this => {
    jl_RuntimeException__init_($this);
},
ju_ConcurrentModificationException__init_ = () => {
    let var_0 = new ju_ConcurrentModificationException();
    ju_ConcurrentModificationException__init_0(var_0);
    return var_0;
};
function jur_CompositeRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$withoutSurrogates = null;
    a.$withSurrogates = null;
}
let jur_CompositeRangeSet__init_0 = ($this, $withoutSurrogates, $withSurrogates) => {
    jur_JointSet__init_($this);
    $this.$withoutSurrogates = $withoutSurrogates;
    $this.$withSurrogates = $withSurrogates;
},
jur_CompositeRangeSet__init_ = (var_0, var_1) => {
    let var_2 = new jur_CompositeRangeSet();
    jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_CompositeRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$withoutSurrogates.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $shift = $this.$withSurrogates.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    return (-1);
},
jur_CompositeRangeSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
    $this.$withSurrogates.$setNext($next);
    $this.$withoutSurrogates.$setNext($next);
},
jur_CompositeRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = jl_String_valueOf($this.$withoutSurrogates);
    var$2 = jl_String_valueOf($this.$withSurrogates);
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(27)), var$1), $rt_s(28)), var$2);
    return jl_StringBuilder_toString(var$3);
},
jur_CompositeRangeSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_CompositeRangeSet_first = ($this, $set) => {
    return 1;
},
jur_RandomGenerator = $rt_classWithoutFields(0);
function jur_LowHighSurrogateRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$surrChars = null;
    a.$alt1 = 0;
}
let jur_LowHighSurrogateRangeSet__init_ = ($this, $surrChars) => {
    jur_JointSet__init_($this);
    $this.$surrChars = $surrChars.$getInstance();
    $this.$alt1 = $surrChars.$alt;
},
jur_LowHighSurrogateRangeSet__init_0 = var_0 => {
    let var_1 = new jur_LowHighSurrogateRangeSet();
    jur_LowHighSurrogateRangeSet__init_(var_1, var_0);
    return var_1;
},
jur_LowHighSurrogateRangeSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_LowHighSurrogateRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $startStr, $strLength, var$6, var$7, $ch, $low, $high;
    $startStr = $matchResult.$getLeftBound();
    $strLength = $matchResult.$getRightBound();
    var$6 = $stringIndex + 1 | 0;
    var$7 = $rt_compare(var$6, $strLength);
    if (var$7 > 0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $ch = $testString.$charAt($stringIndex);
    if (!$this.$surrChars.$contains($ch))
        return (-1);
    if (jl_Character_isHighSurrogate($ch)) {
        if (var$7 < 0) {
            $low = $testString.$charAt(var$6);
            if (jl_Character_isLowSurrogate($low))
                return (-1);
        }
    } else if (jl_Character_isLowSurrogate($ch) && $stringIndex > $startStr) {
        $high = $testString.$charAt($stringIndex - 1 | 0);
        if (jl_Character_isHighSurrogate($high))
            return (-1);
    }
    return $this.$next2.$matches(var$6, $testString, $matchResult);
},
jur_LowHighSurrogateRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt1 ? $rt_s(29) : $rt_s(30);
    var$2 = $this.$surrChars.$toString();
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(31)), var$1), var$2);
    return jl_StringBuilder_toString(var$3);
},
oe_NoCapacitySetException = $rt_classWithoutFields(jl_Exception),
oe_NoCapacitySetException__init_ = $this => {
    jl_Exception__init_($this);
},
oe_NoCapacitySetException__init_0 = () => {
    let var_0 = new oe_NoCapacitySetException();
    oe_NoCapacitySetException__init_(var_0);
    return var_0;
},
jur_ReluctantGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_ReluctantGroupQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_GroupQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_ReluctantGroupQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_ReluctantGroupQuantifierSet();
    jur_ReluctantGroupQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_ReluctantGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $res;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $res = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        return $res;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
},
jur_FinalSet = $rt_classWithoutFields(jur_FSet),
jur_FinalSet__init_ = $this => {
    jur_FSet__init_($this, 0);
},
jur_FinalSet__init_0 = () => {
    let var_0 = new jur_FinalSet();
    jur_FinalSet__init_(var_0);
    return var_0;
},
jur_FinalSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($matchResult.$mode() != 1 && $stringIndex != $matchResult.$getRightBound())
        return (-1);
    $matchResult.$setValid();
    $matchResult.$setEnd(0, $stringIndex);
    return $stringIndex;
},
jur_FinalSet_getName = $this => {
    return $rt_s(32);
};
function oc_Problem() {
    let a = this; jl_Object.call(a);
    a.$mName = null;
    a.$mGraph = null;
    a.$mSol = null;
    a.$solved = 0;
    a.$mObjFunc = null;
    a.$mNumVehicles0 = 0;
}
let oc_Problem_LOGGER = null,
oc_Problem_$callClinit = () => {
    oc_Problem_$callClinit = $rt_eraseClinit(oc_Problem);
    oc_Problem__clinit_();
},
oc_Problem__init_ = ($this, $graph, $name, $objFunc) => {
    oc_Problem_$callClinit();
    jl_Object__init_($this);
    $this.$mName = $rt_s(33);
    $this.$mName = $name;
    $this.$mGraph = $graph;
    $this.$solved = 0;
    $this.$mObjFunc = $objFunc;
    $this.$mNumVehicles0 = 1;
},
oc_Problem_getGraph = $this => {
    return $this.$mGraph;
},
oc_Problem_getSol = $this => {
    if (!$this.$solved) {
        oc_Problem_$callClinit();
        oc_Problem_LOGGER.$error($rt_s(34));
    }
    return $this.$mSol;
},
oc_Problem_setSol = ($this, $newSol) => {
    let $container;
    $container = ju_ArrayList__init_();
    $container.$add2($newSol);
    $this.$mSol = $container;
    $this.$solved = 1;
},
oc_Problem__clinit_ = () => {
    oc_Problem_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_Problem));
},
ju_Comparator = $rt_classWithoutFields(0),
ot_TeaVMWrapper$main$lambda$_1_0 = $rt_classWithoutFields(),
ot_TeaVMWrapper$main$lambda$_1_0__init_ = var$0 => {
    jl_Object__init_(var$0);
},
ot_TeaVMWrapper$main$lambda$_1_0__init_0 = () => {
    let var_0 = new ot_TeaVMWrapper$main$lambda$_1_0();
    ot_TeaVMWrapper$main$lambda$_1_0__init_(var_0);
    return var_0;
},
ot_TeaVMWrapper$main$lambda$_1_0_compare0 = (var$0, var$1, var$2) => {
    return ot_TeaVMWrapper$main$lambda$_1_0_compare(var$0, var$1, var$2);
},
ot_TeaVMWrapper$main$lambda$_1_0_compare = (var$0, var$1, var$2) => {
    return ot_TeaVMWrapper_lambda$main$0(var$1, var$2);
},
jl_ClassCastException = $rt_classWithoutFields(jl_RuntimeException);
function ot_OARLibParser$VertexData() {
    let a = this; jl_Object.call(a);
    a.$id = 0;
    a.$x = 0.0;
    a.$y = 0.0;
}
let ot_OARLibParser$VertexData__init_ = $this => {
    jl_Object__init_($this);
},
ot_OARLibParser$VertexData__init_0 = () => {
    let var_0 = new ot_OARLibParser$VertexData();
    ot_OARLibParser$VertexData__init_(var_0);
    return var_0;
},
ot_OARLibParser$VertexData_toString = $this => {
    return ((((((((jl_StringBuilder__init_()).$append4($rt_s(35))).$append2($this.$id)).$append4($rt_s(36))).$append14($this.$x)).$append4($rt_s(37))).$append14($this.$y)).$append0(125)).$toString();
},
jur_PosPlusGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_PosPlusGroupQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_GroupQuantifierSet__init_($this, $innerSet, $next, $type);
    jur_FSet_$callClinit();
    $innerSet.$setNext(jur_FSet_posFSet);
},
jur_PosPlusGroupQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_PosPlusGroupQuantifierSet();
    jur_PosPlusGroupQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PosPlusGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex, var$5;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        return (-1);
    if ($nextIndex > $stringIndex) {
        while (true) {
            var$5 = $this.$innerSet.$matches($nextIndex, $testString, $matchResult);
            if (var$5 <= $nextIndex)
                break;
            $nextIndex = var$5;
        }
        $stringIndex = $nextIndex;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_EmptySet = $rt_classWithoutFields(jur_LeafSet),
jur_EmptySet__init_0 = ($this, $next) => {
    jur_LeafSet__init_0($this, $next);
    $this.$charCount0 = 0;
},
jur_EmptySet__init_ = var_0 => {
    let var_1 = new jur_EmptySet();
    jur_EmptySet__init_0(var_1, var_0);
    return var_1;
},
jur_EmptySet_accepts = ($this, $stringIndex, $testString) => {
    return 0;
},
jur_EmptySet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startStr, var$6, $low, $high;
    $strLength = $matchResult.$getRightBound();
    $startStr = $matchResult.$getLeftBound();
    while (true) {
        var$6 = $rt_compare($stringIndex, $strLength);
        if (var$6 > 0)
            return (-1);
        if (var$6 < 0) {
            $low = $testString.$charAt($stringIndex);
            if (jl_Character_isLowSurrogate($low) && $stringIndex > $startStr) {
                $high = $testString.$charAt($stringIndex - 1 | 0);
                if (jl_Character_isHighSurrogate($high)) {
                    $stringIndex = $stringIndex + 1 | 0;
                    continue;
                }
            }
        }
        if ($this.$next2.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
},
jur_EmptySet_findBack = ($this, $stringIndex, $startSearch, $testString, $matchResult) => {
    let $strLength, $startStr, $low, $high;
    $strLength = $matchResult.$getRightBound();
    $startStr = $matchResult.$getLeftBound();
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($startSearch < $strLength) {
            $low = $testString.$charAt($startSearch);
            if (jl_Character_isLowSurrogate($low) && $startSearch > $startStr) {
                $high = $testString.$charAt($startSearch - 1 | 0);
                if (jl_Character_isHighSurrogate($high)) {
                    $startSearch = $startSearch + (-1) | 0;
                    continue;
                }
            }
        }
        if ($this.$next2.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
},
jur_EmptySet_getName = $this => {
    return $rt_s(38);
},
jur_EmptySet_hasConsumed = ($this, $mr) => {
    return 0;
},
opi_ChinesePostmanProblem = $rt_classWithoutFields(oc_Problem),
opi_ChinesePostmanProblem_LOGGER = null,
opi_ChinesePostmanProblem_$callClinit = () => {
    opi_ChinesePostmanProblem_$callClinit = $rt_eraseClinit(opi_ChinesePostmanProblem);
    opi_ChinesePostmanProblem__clinit_();
},
opi_ChinesePostmanProblem__init_ = ($this, $graph, $name, $objFunc) => {
    let var$4, $l;
    opi_ChinesePostmanProblem_$callClinit();
    oc_Problem__init_($this, $graph, $name, $objFunc);
    var$4 = ($graph.$getEdges()).$iterator();
    while (var$4.$hasNext()) {
        $l = var$4.$next();
        if (!$l.$isRequired())
            opi_ChinesePostmanProblem_LOGGER.$warn($rt_s(39));
    }
},
opi_ChinesePostmanProblem__clinit_ = () => {
    opi_ChinesePostmanProblem_LOGGER = ou_SimpleLogger_getLogger($rt_cls(opi_ChinesePostmanProblem));
},
opic_WindyCPP = $rt_classWithoutFields(opi_ChinesePostmanProblem),
opic_WindyCPP__init_ = ($this, $g, $name) => {
    opi_ChinesePostmanProblem__init_($this, $g, $name, om_SumMetric__init_());
    $this.$mGraph = $g;
},
opic_WindyCPP__init_0 = (var_0, var_1) => {
    let var_2 = new opic_WindyCPP();
    opic_WindyCPP__init_(var_2, var_0, var_1);
    return var_2;
},
opic_WindyCPP_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_WINDY;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
};
function oc_Vertex() {
    let a = this; jl_Object.call(a);
    a.$mLabel0 = null;
    a.$mGraphId = 0;
    a.$mId0 = 0;
    a.$guid = 0;
    a.$matchId0 = 0;
    a.$myDemand = 0;
    a.$demandSet = 0;
    a.$myCost = 0;
    a.$mySize = 0;
    a.$myX = 0.0;
    a.$myY = 0.0;
    a.$hasCoordinates = 0;
    a.$isFinalized0 = 0;
}
let oc_Vertex_LOGGER = null,
oc_Vertex_counter = 0,
oc_Vertex_$callClinit = () => {
    oc_Vertex_$callClinit = $rt_eraseClinit(oc_Vertex);
    oc_Vertex__clinit_();
},
oc_Vertex__init_ = ($this, $label) => {
    oc_Vertex_$callClinit();
    jl_Object__init_($this);
    $this.$setId((-1));
    $this.$setGraphId((-1));
    $this.$setMatchId((-1));
    $this.$setCost(0);
    $this.$setSize(0);
    $this.$setLabel($label);
    $this.$setGuid(oc_Vertex_counter);
    oc_Vertex_counter = oc_Vertex_counter + 1 | 0;
    $this.$demandSet = 0;
    $this.$hasCoordinates = 0;
    $this.$isFinalized0 = 0;
},
oc_Vertex_getLabel = $this => {
    return $this.$mLabel0;
},
oc_Vertex_setLabel = ($this, $mLabel) => {
    $this.$mLabel0 = $mLabel;
},
oc_Vertex_getId = $this => {
    return $this.$mId0;
},
oc_Vertex_setId = ($this, $mId) => {
    $this.$mId0 = $mId;
},
oc_Vertex_getDemand = $this => {
    if ($this.$demandSet)
        return $this.$myDemand;
    $rt_throw(oe_NoDemandSetException__init_0());
},
oc_Vertex_setDemand = ($this, $newDemand) => {
    $this.$demandSet = 1;
    $this.$myDemand = $newDemand;
},
oc_Vertex_isDemandSet = $this => {
    return $this.$demandSet;
},
oc_Vertex_setGuid = ($this, $guid) => {
    $this.$guid = $guid;
},
oc_Vertex_getMatchId = $this => {
    return $this.$matchId0;
},
oc_Vertex_setMatchId = ($this, $matchId) => {
    $this.$matchId0 = $matchId;
},
oc_Vertex_getGraphId = $this => {
    return $this.$mGraphId;
},
oc_Vertex_setGraphId = ($this, $graphId) => {
    $this.$mGraphId = $graphId;
},
oc_Vertex_isFinalized = $this => {
    return $this.$isFinalized0;
},
oc_Vertex_setFinalized = ($this, $isFinalized) => {
    $this.$isFinalized0 = $isFinalized;
},
oc_Vertex_setCost = ($this, $myCost) => {
    $this.$myCost = $myCost;
},
oc_Vertex_setSize = ($this, $mySize) => {
    $this.$mySize = $mySize;
},
oc_Vertex_getX = $this => {
    return $this.$myX;
},
oc_Vertex_setCoordinates = ($this, $x, $y) => {
    $this.$myX = $x;
    $this.$myY = $y;
    $this.$hasCoordinates = 1;
},
oc_Vertex_getY = $this => {
    return $this.$myY;
},
oc_Vertex__clinit_ = () => {
    oc_Vertex_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_Vertex));
    oc_Vertex_counter = 1;
};
function ovi_UndirectedVertex() {
    let a = this; oc_Vertex.call(a);
    a.$degree = 0;
    a.$neighbors1 = null;
}
let ovi_UndirectedVertex__init_0 = ($this, $label) => {
    oc_Vertex__init_($this, $label);
    $this.$neighbors1 = ju_HashMap__init_();
    $this.$setDegree(0);
},
ovi_UndirectedVertex__init_ = var_0 => {
    let var_1 = new ovi_UndirectedVertex();
    ovi_UndirectedVertex__init_0(var_1, var_0);
    return var_1;
},
ovi_UndirectedVertex_addToNeighbors = ($this, $v, $e) => {
    if (!(($e.$getEndpoints()).$getFirst() !== $this && ($e.$getEndpoints()).$getSecond() !== $this) && !(($e.$getEndpoints()).$getFirst() !== $v && ($e.$getEndpoints()).$getSecond() !== $v) && $this.$getGraphId() == $v.$getGraphId()) {
        if (!$this.$neighbors1.$containsKey($v))
            $this.$neighbors1.$put($v, ju_ArrayList__init_());
        ($this.$neighbors1.$get1($v)).$add2($e);
        return;
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ovi_UndirectedVertex_removeFromNeighbors = ($this, $v, $a) => {
    if ($this.$neighbors1.$containsKey($v) && ($this.$neighbors1.$get1($v)).$contains0($a)) {
        ($this.$neighbors1.$get1($v)).$remove0($a);
        if (!($this.$neighbors1.$get1($v)).$size())
            $this.$neighbors1.$remove1($v);
        return 1;
    }
    return 0;
},
ovi_UndirectedVertex_getDegree = $this => {
    return $this.$degree;
},
ovi_UndirectedVertex_setDegree = ($this, $degree) => {
    $this.$degree = $degree;
},
ovi_UndirectedVertex_getNeighbors0 = $this => {
    return $this.$neighbors1;
},
ovi_UndirectedVertex_getNeighbors = $this => {
    return $this.$getNeighbors0();
},
jl_StringBuffer = $rt_classWithoutFields(jl_AbstractStringBuilder),
jl_StringBuffer__init_ = $this => {
    jl_AbstractStringBuilder__init_0($this);
},
jl_StringBuffer__init_0 = () => {
    let var_0 = new jl_StringBuffer();
    jl_StringBuffer__init_(var_0);
    return var_0;
},
jl_StringBuffer_append1 = ($this, $c) => {
    jl_AbstractStringBuilder_append1($this, $c);
    return $this;
},
jl_StringBuffer_append2 = ($this, $chars, $offset, $len) => {
    jl_AbstractStringBuilder_append0($this, $chars, $offset, $len);
    return $this;
},
jl_StringBuffer_append0 = ($this, $chars) => {
    jl_AbstractStringBuilder_append($this, $chars);
    return $this;
},
jl_StringBuffer_insert = ($this, $index, $chars, $offset, $len) => {
    jl_AbstractStringBuilder_insert($this, $index, $chars, $offset, $len);
    return $this;
},
jl_StringBuffer_insert2 = ($this, $index, $c) => {
    jl_AbstractStringBuilder_insert0($this, $index, $c);
    return $this;
},
jl_StringBuffer_insert1 = ($this, var$1, var$2, var$3, var$4) => {
    return $this.$insert12(var$1, var$2, var$3, var$4);
},
jl_StringBuffer_append = ($this, var$1, var$2, var$3) => {
    return $this.$append15(var$1, var$2, var$3);
},
jl_StringBuffer_charAt = ($this, var$1) => {
    return jl_AbstractStringBuilder_charAt($this, var$1);
},
jl_StringBuffer_length = $this => {
    return jl_AbstractStringBuilder_length($this);
},
jl_StringBuffer_toString = $this => {
    return jl_AbstractStringBuilder_toString($this);
},
jl_StringBuffer_ensureCapacity = ($this, var$1) => {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
},
jl_StringBuffer_insert0 = ($this, var$1, var$2) => {
    return $this.$insert13(var$1, var$2);
};
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$012 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1__init_ = ($this, $this$0) => {
    $this.$this$012 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains = ($this, $ch) => {
    return jl_Character_isUnicodeIdentifierPart($ch);
},
jur_AbstractCharClass$PredefinedCharacterClasses = $rt_classWithoutFields(),
jur_AbstractCharClass$PredefinedCharacterClasses_space = null,
jur_AbstractCharClass$PredefinedCharacterClasses_digit = null,
jur_AbstractCharClass$PredefinedCharacterClasses_contents = null,
jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit = () => {
    jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit = $rt_eraseClinit(jur_AbstractCharClass$PredefinedCharacterClasses);
    jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
},
jur_AbstractCharClass$PredefinedCharacterClasses__init_ = $this => {
    jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
    jl_Object__init_($this);
},
jur_AbstractCharClass$PredefinedCharacterClasses__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$PredefinedCharacterClasses();
    jur_AbstractCharClass$PredefinedCharacterClasses__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$PredefinedCharacterClasses_getObject = ($this, $name) => {
    let $i, $row, var$4;
    $i = 0;
    while (true) {
        jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit();
        if ($i >= jur_AbstractCharClass$PredefinedCharacterClasses_contents.data.length)
            $rt_throw(ju_MissingResourceException__init_0($rt_s(33), $rt_s(33), $name));
        $row = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data[$i];
        var$4 = $row.data;
        if ($name.$equals(var$4[0]))
            break;
        $i = $i + 1 | 0;
    }
    return var$4[1];
},
jur_AbstractCharClass$PredefinedCharacterClasses__clinit_ = () => {
    let var$1, var$2, var$3, var$4;
    jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_0();
    jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_0();
    var$1 = $rt_createArray($rt_arraycls(jl_Object), 194);
    var$2 = var$1.data;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(40);
    var$4[1] = jur_AbstractCharClass$LazyLower__init_0();
    var$2[0] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(41);
    var$4[1] = jur_AbstractCharClass$LazyUpper__init_0();
    var$2[1] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(42);
    var$4[1] = jur_AbstractCharClass$LazyASCII__init_0();
    var$2[2] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(43);
    var$4[1] = jur_AbstractCharClass$LazyAlpha__init_0();
    var$2[3] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(44);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[4] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(45);
    var$4[1] = jur_AbstractCharClass$LazyAlnum__init_0();
    var$2[5] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(46);
    var$4[1] = jur_AbstractCharClass$LazyPunct__init_0();
    var$2[6] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(47);
    var$4[1] = jur_AbstractCharClass$LazyGraph__init_0();
    var$2[7] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(48);
    var$4[1] = jur_AbstractCharClass$LazyPrint__init_0();
    var$2[8] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(49);
    var$4[1] = jur_AbstractCharClass$LazyBlank__init_0();
    var$2[9] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(50);
    var$4[1] = jur_AbstractCharClass$LazyCntrl__init_0();
    var$2[10] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(51);
    var$4[1] = jur_AbstractCharClass$LazyXDigit__init_0();
    var$2[11] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(52);
    var$4[1] = jur_AbstractCharClass$LazyJavaLowerCase__init_0();
    var$2[12] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(53);
    var$4[1] = jur_AbstractCharClass$LazyJavaUpperCase__init_0();
    var$2[13] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(54);
    var$4[1] = jur_AbstractCharClass$LazyJavaWhitespace__init_0();
    var$2[14] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(55);
    var$4[1] = jur_AbstractCharClass$LazyJavaMirrored__init_0();
    var$2[15] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(56);
    var$4[1] = jur_AbstractCharClass$LazyJavaDefined__init_0();
    var$2[16] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(57);
    var$4[1] = jur_AbstractCharClass$LazyJavaDigit__init_0();
    var$2[17] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(58);
    var$4[1] = jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0();
    var$2[18] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(59);
    var$4[1] = jur_AbstractCharClass$LazyJavaISOControl__init_0();
    var$2[19] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(60);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0();
    var$2[20] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(61);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0();
    var$2[21] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(62);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetter__init_0();
    var$2[22] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(63);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0();
    var$2[23] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(64);
    var$4[1] = jur_AbstractCharClass$LazyJavaSpaceChar__init_0();
    var$2[24] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(65);
    var$4[1] = jur_AbstractCharClass$LazyJavaTitleCase__init_0();
    var$2[25] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(66);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0();
    var$2[26] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(67);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0();
    var$2[27] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(68);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[28] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(69);
    var$4[1] = jur_AbstractCharClass$LazyWord__init_0();
    var$2[29] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(70);
    var$4[1] = jur_AbstractCharClass$LazyNonWord__init_0();
    var$2[30] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(71);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[31] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(72);
    var$4[1] = jur_AbstractCharClass$LazyNonSpace__init_0();
    var$2[32] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(73);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[33] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(74);
    var$4[1] = jur_AbstractCharClass$LazyNonDigit__init_0();
    var$2[34] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(75);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 127);
    var$2[35] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(76);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(128, 255);
    var$2[36] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(77);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(256, 383);
    var$2[37] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(78);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(384, 591);
    var$2[38] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(79);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(592, 687);
    var$2[39] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(80);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(688, 767);
    var$2[40] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(81);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(768, 879);
    var$2[41] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(82);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(880, 1023);
    var$2[42] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(83);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1024, 1279);
    var$2[43] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(84);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1280, 1327);
    var$2[44] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(85);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1328, 1423);
    var$2[45] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(86);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1424, 1535);
    var$2[46] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(87);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1536, 1791);
    var$2[47] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(88);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1792, 1871);
    var$2[48] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(89);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1872, 1919);
    var$2[49] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(90);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1920, 1983);
    var$2[50] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(91);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2304, 2431);
    var$2[51] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(92);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2432, 2559);
    var$2[52] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(93);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2560, 2687);
    var$2[53] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(94);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2688, 2815);
    var$2[54] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(95);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2816, 2943);
    var$2[55] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(96);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2944, 3071);
    var$2[56] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(97);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3072, 3199);
    var$2[57] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(98);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3200, 3327);
    var$2[58] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(99);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3328, 3455);
    var$2[59] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(100);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3456, 3583);
    var$2[60] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(101);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3584, 3711);
    var$2[61] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(102);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3712, 3839);
    var$2[62] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(103);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3840, 4095);
    var$2[63] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(104);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4096, 4255);
    var$2[64] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(105);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4256, 4351);
    var$2[65] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(106);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4352, 4607);
    var$2[66] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(107);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4608, 4991);
    var$2[67] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(108);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4992, 5023);
    var$2[68] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(109);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5024, 5119);
    var$2[69] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(110);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5120, 5759);
    var$2[70] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(111);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5760, 5791);
    var$2[71] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(112);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5792, 5887);
    var$2[72] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(113);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5888, 5919);
    var$2[73] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(114);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5920, 5951);
    var$2[74] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(115);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5952, 5983);
    var$2[75] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(116);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5984, 6015);
    var$2[76] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(117);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6016, 6143);
    var$2[77] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(118);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6144, 6319);
    var$2[78] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(119);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6400, 6479);
    var$2[79] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(120);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6480, 6527);
    var$2[80] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(121);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6528, 6623);
    var$2[81] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(122);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6624, 6655);
    var$2[82] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(123);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6656, 6687);
    var$2[83] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(124);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7424, 7551);
    var$2[84] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(125);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7552, 7615);
    var$2[85] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(126);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7616, 7679);
    var$2[86] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(127);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7680, 7935);
    var$2[87] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(128);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7936, 8191);
    var$2[88] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(129);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8192, 8303);
    var$2[89] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(130);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8304, 8351);
    var$2[90] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(131);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8352, 8399);
    var$2[91] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(132);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8400, 8447);
    var$2[92] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(133);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8448, 8527);
    var$2[93] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(134);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8528, 8591);
    var$2[94] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(135);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8592, 8703);
    var$2[95] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(136);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8704, 8959);
    var$2[96] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(137);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8960, 9215);
    var$2[97] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(138);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9216, 9279);
    var$2[98] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(139);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9280, 9311);
    var$2[99] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(140);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9312, 9471);
    var$2[100] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(141);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9472, 9599);
    var$2[101] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(142);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9600, 9631);
    var$2[102] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(143);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9632, 9727);
    var$2[103] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(144);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9728, 9983);
    var$2[104] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(145);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9984, 10175);
    var$2[105] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(146);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10176, 10223);
    var$2[106] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(147);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10224, 10239);
    var$2[107] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(148);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10240, 10495);
    var$2[108] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(149);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10496, 10623);
    var$2[109] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(150);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10624, 10751);
    var$2[110] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(151);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10752, 11007);
    var$2[111] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(152);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11008, 11263);
    var$2[112] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(153);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11264, 11359);
    var$2[113] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(154);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11392, 11519);
    var$2[114] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(155);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11520, 11567);
    var$2[115] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(156);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11568, 11647);
    var$2[116] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(157);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11648, 11743);
    var$2[117] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(158);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11776, 11903);
    var$2[118] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(159);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11904, 12031);
    var$2[119] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(160);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12032, 12255);
    var$2[120] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(161);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12272, 12287);
    var$2[121] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(162);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12288, 12351);
    var$2[122] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(163);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12352, 12447);
    var$2[123] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(164);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12448, 12543);
    var$2[124] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(165);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12544, 12591);
    var$2[125] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(166);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12592, 12687);
    var$2[126] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(167);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12688, 12703);
    var$2[127] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(168);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12704, 12735);
    var$2[128] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(169);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12736, 12783);
    var$2[129] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(170);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12784, 12799);
    var$2[130] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(171);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12800, 13055);
    var$2[131] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(172);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13056, 13311);
    var$2[132] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(173);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13312, 19893);
    var$2[133] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(174);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19904, 19967);
    var$2[134] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(175);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19968, 40959);
    var$2[135] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(176);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(40960, 42127);
    var$2[136] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(177);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42128, 42191);
    var$2[137] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(178);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42752, 42783);
    var$2[138] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(179);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(43008, 43055);
    var$2[139] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(180);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(44032, 55203);
    var$2[140] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(181);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(55296, 56191);
    var$2[141] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(182);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56192, 56319);
    var$2[142] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(183);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56320, 57343);
    var$2[143] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(184);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(57344, 63743);
    var$2[144] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(185);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(63744, 64255);
    var$2[145] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(186);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64256, 64335);
    var$2[146] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(187);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64336, 65023);
    var$2[147] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(188);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65024, 65039);
    var$2[148] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(189);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65040, 65055);
    var$2[149] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(190);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65056, 65071);
    var$2[150] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(191);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65072, 65103);
    var$2[151] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(192);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65104, 65135);
    var$2[152] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(193);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65136, 65279);
    var$2[153] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(194);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65280, 65519);
    var$2[154] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(195);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 1114111);
    var$2[155] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(196);
    var$4[1] = jur_AbstractCharClass$LazySpecialsBlock__init_0();
    var$2[156] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(197);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(0, 1);
    var$2[157] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(198);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(62, 1);
    var$2[158] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(199);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(1, 1);
    var$2[159] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(200);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(2, 1);
    var$2[160] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(201);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(3, 0);
    var$2[161] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(202);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(4, 0);
    var$2[162] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(203);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(5, 1);
    var$2[163] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(204);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(448, 1);
    var$2[164] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(205);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(6, 1);
    var$2[165] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(206);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(7, 0);
    var$2[166] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(207);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(8, 1);
    var$2[167] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(208);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1);
    var$2[168] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(209);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(9, 1);
    var$2[169] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(210);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(10, 1);
    var$2[170] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(211);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(11, 1);
    var$2[171] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(212);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0);
    var$2[172] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(213);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(12, 0);
    var$2[173] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(214);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(13, 0);
    var$2[174] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(215);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(14, 0);
    var$2[175] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(216);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_2(983040, 1, 1);
    var$2[176] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(217);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(15, 0);
    var$2[177] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(218);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(16, 1);
    var$2[178] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(219);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(18, 1);
    var$2[179] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(220);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_2(19, 0, 1);
    var$2[180] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(221);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1);
    var$2[181] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(222);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(20, 0);
    var$2[182] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(223);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(21, 0);
    var$2[183] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(224);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(22, 0);
    var$2[184] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(225);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(23, 0);
    var$2[185] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(226);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(24, 1);
    var$2[186] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(227);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1);
    var$2[187] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(228);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(25, 1);
    var$2[188] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(229);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(26, 0);
    var$2[189] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(230);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(27, 0);
    var$2[190] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(231);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(28, 1);
    var$2[191] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(232);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(29, 0);
    var$2[192] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(233);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(30, 0);
    var$2[193] = var$3;
    jur_AbstractCharClass$PredefinedCharacterClasses_contents = var$1;
};
function oc_Solver() {
    jl_Object.call(this);
    this.$mInstance = null;
}
let oc_Solver_LOGGER = null,
oc_Solver_$callClinit = () => {
    oc_Solver_$callClinit = $rt_eraseClinit(oc_Solver);
    oc_Solver__clinit_();
},
oc_Solver__init_ = ($this, $instance) => {
    oc_Solver_$callClinit();
    jl_Object__init_($this);
    if (($instance.$getProblemAttributes()).$isCompatibleWith($this.$getProblemAttributes())) {
        $this.$mInstance = $instance;
        return;
    }
    $rt_throw(jl_IllegalArgumentException__init_0($rt_s(234)));
},
oc_Solver_trySolve = $this => {
    if ($this.$checkGraphRequirements())
        return $this.$solve();
    $rt_throw(oe_GraphInfeasibleException__init_0());
},
oc_Solver__clinit_ = () => {
    oc_Solver_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_SingleVehicleSolver));
},
oc_SingleVehicleSolver = $rt_classWithoutFields(oc_Solver),
oc_SingleVehicleSolver_LOGGER = null,
oc_SingleVehicleSolver_$callClinit = () => {
    oc_SingleVehicleSolver_$callClinit = $rt_eraseClinit(oc_SingleVehicleSolver);
    oc_SingleVehicleSolver__clinit_();
},
oc_SingleVehicleSolver__init_ = ($this, $instance) => {
    oc_SingleVehicleSolver_$callClinit();
    oc_Solver__init_($this, $instance);
},
oc_SingleVehicleSolver_printCurrentSol = $this => {
    let $currSol, $ans, var$3, $r;
    $currSol = $this.$mInstance.$getSol();
    if ($currSol.$size() > 1) {
        oc_SingleVehicleSolver_$callClinit();
        oc_SingleVehicleSolver_LOGGER.$error0($rt_s(235), jl_IllegalStateException__init_());
    }
    if ($currSol === null) {
        oc_SingleVehicleSolver_$callClinit();
        oc_SingleVehicleSolver_LOGGER.$error0($rt_s(236), jl_IllegalStateException__init_());
    }
    $ans = $rt_s(237);
    var$3 = $currSol.$iterator();
    if (!var$3.$hasNext())
        return null;
    $r = var$3.$next();
    var$3 = ((((jl_StringBuilder__init_()).$append4($ans)).$append4($this.$getSolverName())).$append4($rt_s(238))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(239))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(240))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(239))).$toString();
    var$3 = (((((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(241))).$append2((($this.$mInstance.$getGraph()).$getVertices()).$size())).$append4($rt_s(239))).$toString();
    var$3 = (((((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(242))).$append2((($this.$mInstance.$getGraph()).$getEdges()).$size())).$append4($rt_s(239))).$toString();
    var$3 = (((((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(243))).$append2($r.$getCost())).$append4($rt_s(239))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(239))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(240))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(239))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(239))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($currSol.$toString())).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(239))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(239))).$toString();
    var$3 = (((jl_StringBuilder__init_()).$append4(var$3)).$append4($rt_s(240))).$toString();
    return var$3;
},
oc_SingleVehicleSolver__clinit_ = () => {
    oc_SingleVehicleSolver_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_SingleVehicleSolver));
};
function osi_WRPPSolver_Benavent_H1() {
    oc_SingleVehicleSolver.call(this);
    this.$exportSolToPDF = 0;
}
let osi_WRPPSolver_Benavent_H1__init_0 = ($this, $instance) => {
    osi_WRPPSolver_Benavent_H1__init_($this, $instance, 0);
},
osi_WRPPSolver_Benavent_H1__init_1 = var_0 => {
    let var_1 = new osi_WRPPSolver_Benavent_H1();
    osi_WRPPSolver_Benavent_H1__init_0(var_1, var_0);
    return var_1;
},
osi_WRPPSolver_Benavent_H1__init_ = ($this, $instance, $exportToPDF) => {
    oc_SingleVehicleSolver__init_($this, $instance);
    $this.$exportSolToPDF = $exportToPDF;
},
osi_WRPPSolver_Benavent_H1__init_2 = (var_0, var_1) => {
    let var_2 = new osi_WRPPSolver_Benavent_H1();
    osi_WRPPSolver_Benavent_H1__init_(var_2, var_0, var_1);
    return var_2;
},
osi_WRPPSolver_Benavent_H1_eulerAugment = ($fullGraph, $g, $L) => {
    let $n, $m, $fullGraphCopy, $i, $fullGraphEdges, $temp, var$10, $dist, $path, $edgePath, $matchingGraph, var$15, $v, $oddVertices, $traverseIj, var$19, $v2, $costCandidate, $candidateKey, $e, $matchingSolution, $indexedEdges, $p, $curr, $end, var$29, $next, $nextEdge, $$je;
    a: {
        try {
            $n = ($fullGraph.$getVertices0()).$size();
            $m = ($fullGraph.$getEdges0()).$size();
            $fullGraphCopy = ogi_WindyGraph__init_();
            $i = 1;
            while ($i <= $n) {
                $fullGraphCopy.$addVertex(ovi_WindyVertex__init_($rt_s(244)));
                $i = $i + 1 | 0;
            }
            $fullGraphEdges = $fullGraph.$getInternalEdgeMap();
            $i = 1;
            while ($i <= $m) {
                $temp = $fullGraphEdges.$get($i);
                if (!$L.$contains0(jl_Integer_valueOf($i)))
                    $fullGraphCopy.$addEdge((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(244), $temp.$getCost(), $temp.$getReverseCost());
                else
                    $fullGraphCopy.$addEdge((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(244), 0, 0);
                $i = $i + 1 | 0;
            }
            var$10 = $n + 1 | 0;
            $dist = $rt_createIntArray(var$10);
            $path = $rt_createIntArray(var$10);
            $edgePath = $rt_createIntArray(var$10);
            $matchingGraph = ogi_UndirectedGraph__init_();
            var$15 = ($g.$getVertices0()).$iterator();
            while (var$15.$hasNext()) {
                $v = var$15.$next();
                if (($v.$getDegree() % 2 | 0) == 1)
                    $matchingGraph.$addVertex0(ovi_UndirectedVertex__init_($rt_s(245)), $v.$getId());
            }
            $oddVertices = $matchingGraph.$getVertices0();
            $traverseIj = ju_HashMap__init_();
            var$19 = $oddVertices.$iterator();
            while (var$19.$hasNext()) {
                $v = var$19.$next();
                ogu_CommonAlgorithms_dijkstrasAlgorithm($fullGraphCopy, $v.$getMatchId(), $dist, $path, $edgePath);
                var$15 = $oddVertices.$iterator();
                while (var$15.$hasNext()) {
                    $v2 = var$15.$next();
                    if ($v.$getId() == $v2.$getId())
                        continue;
                    $costCandidate = osi_WRPPSolver_Benavent_H1_calculateAveragePathCost($fullGraphCopy, $v.$getMatchId(), $v2.$getMatchId(), $path, $edgePath);
                    $candidateKey = ogu_Pair__init_(jl_Integer_valueOf($v2.$getId()), jl_Integer_valueOf($v.$getId()));
                    if (!($traverseIj.$containsKey($candidateKey) && $costCandidate >= ($traverseIj.$get1($candidateKey)).$getCost())) {
                        $traverseIj.$remove1($candidateKey);
                        $traverseIj.$put(ogu_Pair__init_(jl_Integer_valueOf($v.$getId()), jl_Integer_valueOf($v2.$getId())), oli_Edge__init_($rt_s(246), ogu_Pair__init_($v, $v2), 2.0 * $costCandidate | 0));
                    }
                }
            }
            var$15 = ($traverseIj.$values()).$iterator();
            while (var$15.$hasNext()) {
                $e = var$15.$next();
                $matchingGraph.$addEdge0($e);
            }
            $matchingSolution = ogu_CommonAlgorithms_minCostMatching($matchingGraph);
            $indexedEdges = $fullGraph.$getInternalEdgeMap();
            var$15 = $matchingSolution.$iterator();
            while (var$15.$hasNext()) {
                $p = var$15.$next();
                if (!$traverseIj.$containsKey(ogu_Pair__init_(jl_Integer_valueOf(($p.$getFirst()).$getId()), jl_Integer_valueOf(($p.$getSecond()).$getId())))) {
                    $curr = ($p.$getSecond()).$getMatchId();
                    $end = ($p.$getFirst()).$getMatchId();
                } else {
                    $curr = ($p.$getFirst()).$getMatchId();
                    $end = ($p.$getSecond()).$getMatchId();
                }
                ogu_CommonAlgorithms_dijkstrasAlgorithm($fullGraphCopy, $curr, $dist, $path, $edgePath);
                while (true) {
                    var$29 = $edgePath.data;
                    $next = $path.data[$end];
                    $nextEdge = var$29[$end];
                    $temp = $indexedEdges.$get($nextEdge);
                    $g.$addEdge1((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(247), $temp.$getCost(), $temp.$getReverseCost(), $nextEdge, 0);
                    if ($next == $curr)
                        break;
                    $end = $next;
                }
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_WRPPSolver_Benavent_H1_buildL = ($gaux, $e1, $e2, $flowanswer) => {
    let $ans, $indexedArcs, $i, var$8, $temp, $tempMatchId;
    $ans = ju_HashSet__init_();
    $indexedArcs = $gaux.$getInternalEdgeMap();
    $i = 1;
    while (true) {
        var$8 = $flowanswer.data;
        if ($i >= var$8.length)
            break;
        $temp = $indexedArcs.$get($i);
        $tempMatchId = $temp.$getMatchId();
        if (!$temp.$isCapacitySet()) {
            if (var$8[$i] >= 1 && $e1.$contains0(jl_Integer_valueOf($tempMatchId)))
                $ans.$add2(jl_Integer_valueOf($tempMatchId));
            else if (var$8[$i] >= 2 && $e2.$contains0(jl_Integer_valueOf($tempMatchId)))
                $ans.$add2(jl_Integer_valueOf($tempMatchId));
        }
        $i = $i + 1 | 0;
    }
    return $ans;
},
osi_WRPPSolver_Benavent_H1_buildGdr = ($g, $unbalancedEdges) => {
    let $ans, $n, $i, $indexedEdges, var$7, $id, $temp, $e, $$je;
    a: {
        try {
            $ans = ogi_DirectedGraph__init_();
            $n = ($g.$getVertices0()).$size();
            $i = 1;
            while ($i <= $n) {
                $ans.$addVertex1(ovi_DirectedVertex__init_($rt_s(248)));
                $i = $i + 1 | 0;
            }
            $indexedEdges = $g.$getInternalEdgeMap();
            var$7 = $unbalancedEdges.$iterator();
            while (var$7.$hasNext()) {
                $id = var$7.$next();
                $temp = $indexedEdges.$get($id.$intValue());
                if ($temp.$getCost() >= $temp.$getReverseCost())
                    $ans.$addEdge2((($temp.$getEndpoints()).$getSecond()).$getId(), (($temp.$getEndpoints()).$getFirst()).$getId(), $rt_s(248), $temp.$getReverseCost());
                else
                    $ans.$addEdge2((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(248), $temp.$getCost());
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
osi_WRPPSolver_Benavent_H1_buildGaux = ($fullGraph, $unbalancedEdges) => {
    let $ans, $n, $i, var$6, $e, $j, $indexedEdges, $indexedVertices, var$11, $id, $temp, $tempCost, $toAdd, $$je;
    a: {
        try {
            $ans = ogi_DirectedGraph__init_();
            $n = ($fullGraph.$getVertices0()).$size();
            $i = 1;
            while ($i <= $n) {
                $ans.$addVertex1(ovi_DirectedVertex__init_($rt_s(249)));
                $i = $i + 1 | 0;
            }
            var$6 = ($fullGraph.$getEdges0()).$iterator();
            while (var$6.$hasNext()) {
                $e = var$6.$next();
                $i = (($e.$getEndpoints()).$getFirst()).$getId();
                $j = (($e.$getEndpoints()).$getSecond()).$getId();
                $ans.$addEdge($i, $j, $rt_s(249), 2 * $e.$getCost() | 0, $e.$getId());
                $ans.$addEdge($j, $i, $rt_s(249), 2 * $e.$getReverseCost() | 0, $e.$getId());
            }
            $indexedEdges = $fullGraph.$getInternalEdgeMap();
            $indexedVertices = $ans.$getInternalVertexMap();
            var$11 = $unbalancedEdges.$iterator();
            while (var$11.$hasNext()) {
                $id = var$11.$next();
                $temp = $indexedEdges.$get($id.$intValue());
                $i = (($temp.$getEndpoints()).$getFirst()).$getId();
                $j = (($temp.$getEndpoints()).$getSecond()).$getId();
                if ($temp.$getCost() >= $temp.$getReverseCost()) {
                    $tempCost = $temp.$getCost() - $temp.$getReverseCost() | 0;
                    $toAdd = oli_Arc__init_($rt_s(249), ogu_Pair__init_($indexedVertices.$get($i), $indexedVertices.$get($j)), $tempCost);
                    $toAdd.$setCapacity(2);
                    $ans.$addEdge3($toAdd);
                } else {
                    $tempCost = $temp.$getReverseCost() - $temp.$getCost() | 0;
                    $toAdd = oli_Arc__init_($rt_s(249), ogu_Pair__init_($indexedVertices.$get($j), $indexedVertices.$get($i)), $tempCost);
                    $toAdd.$setCapacity(2);
                    $ans.$addEdge3($toAdd);
                }
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
osi_WRPPSolver_Benavent_H1_buildEdgeSets = ($e1, $e2, $windyReq, $fullGraph, $averageCost) => {
    let $threshold, var$7, $e, $costDiff, var$10;
    $threshold = 0.2 * $averageCost;
    var$7 = ($windyReq.$getEdges0()).$iterator();
    while (var$7.$hasNext()) {
        $e = var$7.$next();
        $costDiff = jl_Math_abs($e.$getCost() - $e.$getReverseCost() | 0);
        if ($costDiff > $threshold)
            $e1.$add2(jl_Integer_valueOf($e.$getMatchId()));
    }
    var$10 = ($fullGraph.$getEdges0()).$iterator();
    while (var$10.$hasNext()) {
        $e = var$10.$next();
        if (!$e1.$contains0(jl_Integer_valueOf($e.$getId())))
            $e2.$add2(jl_Integer_valueOf($e.$getId()));
    }
},
osi_WRPPSolver_Benavent_H1_calculateAverageCost = $g => {
    let $ans, $m, var$4, $e;
    $ans = 0.0;
    $m = 2.0 * ($g.$getEdges0()).$size();
    var$4 = ($g.$getEdges0()).$iterator();
    while (var$4.$hasNext()) {
        $e = var$4.$next();
        $ans = $ans + ($e.$getCost() + $e.$getReverseCost() | 0);
    }
    return $ans / $m;
},
osi_WRPPSolver_Benavent_H1_calculateAveragePathCost = ($g, $i, $j, $path, $edgePath) => {
    let $ans, $indexedWindyEdges, var$8, $next, $temp;
    $ans = 0;
    $indexedWindyEdges = $g.$getInternalEdgeMap();
    while (true) {
        var$8 = $edgePath.data;
        $next = $path.data[$j];
        $temp = $indexedWindyEdges.$get(var$8[$j]);
        $ans = $ans + ($temp.$getCost() + $temp.$getReverseCost() | 0) | 0;
        if ($next == $i)
            break;
        $j = $next;
    }
    return $ans / 2.0;
},
osi_WRPPSolver_Benavent_H1_solve = $this => {
    let $copy, $windyReq, $averageCost, $E1, $E2, $Gdr, $L, $Gaux, $indexedVertices, var$10, $v, $flowanswer, $ans, $tour, $eulerTour, $indexedEdges, $i, $ret, $e, $$je;
    a: {
        try {
            $copy = ($this.$mInstance.$getGraph()).$getDeepCopy();
            $windyReq = osi_WRPPSolver_Win_connectRequiredComponents($copy);
            $averageCost = osi_WRPPSolver_Benavent_H1_calculateAverageCost($windyReq);
            $E1 = ju_HashSet__init_();
            $E2 = ju_HashSet__init_();
            osi_WRPPSolver_Benavent_H1_buildEdgeSets($E1, $E2, $windyReq, $copy, $averageCost);
            $Gdr = osi_WRPPSolver_Benavent_H1_buildGdr($copy, $E1);
            $L = ju_HashSet__init_();
            if (!ogu_CommonAlgorithms_isEulerian($Gdr)) {
                $Gaux = osi_WRPPSolver_Benavent_H1_buildGaux($copy, $E1);
                $indexedVertices = $Gdr.$getInternalVertexMap();
                var$10 = ($Gaux.$getVertices0()).$iterator();
                while (var$10.$hasNext()) {
                    $v = var$10.$next();
                    $v.$setDemand(($indexedVertices.$get($v.$getId())).$getDelta());
                }
                $flowanswer = ogu_CommonAlgorithms_shortestSuccessivePathsMinCostNetworkFlow($Gaux);
                $L = osi_WRPPSolver_Benavent_H1_buildL($Gaux, $E1, $E2, $flowanswer);
            }
            osi_WRPPSolver_Benavent_H1_eulerAugment($copy, $windyReq, $L);
            $ans = osi_WRPPSolver_Win_constructOptimalWindyTour($windyReq);
            $ans.$setDepotId($copy.$getDepotId());
            osi_WRPPSolver_Win_eliminateRedundantCycles($ans, $windyReq, $copy);
            osi_WRPPSolver_Win_repairSolution($ans, $copy);
            $tour = ogu_CommonAlgorithms_tryHierholzer($ans);
            $eulerTour = ori_Tour__init_();
            $indexedEdges = $ans.$getInternalEdgeMap();
            $i = 0;
            while ($i < $tour.$size()) {
                $eulerTour.$appendEdge0($indexedEdges.$get(($tour.$get($i)).$intValue()));
                $i = $i + 1 | 0;
            }
            $this.$mInstance.$setSol(ogu_Utils_reclaimTour($eulerTour, $this.$mInstance.$getGraph()));
            $ret = ju_HashSet__init_();
            $ret.$add2($eulerTour);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ret;
    }
    $e.$printStackTrace0();
    return null;
},
osi_WRPPSolver_Benavent_H1_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_WINDY;
    var$3 = null;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
},
osi_WRPPSolver_Benavent_H1_getSolverName = $this => {
    return $rt_s(250);
},
osi_WRPPSolver_Benavent_H1_checkGraphRequirements = $this => {
    let $mGraph;
    if ($this.$mInstance.$getGraph() === null)
        return 0;
    $mGraph = $this.$mInstance.$getGraph();
    if (ogu_CommonAlgorithms_isConnected($mGraph))
        return 1;
    return 0;
},
ogu_BlossomV = $rt_classWithoutFields(),
ogu_BlossomV_blossomV = ($n, $m, $edges, $weights) => {
    let $matching, $matched, $i, $edgeList, var$9, var$10, var$11, var$12, $edge, $u, $v, $j;
    $matching = $rt_createIntArray($n);
    $matched = $rt_createBooleanArray($n);
    $i = 0;
    while ($i < $n) {
        $matching.data[$i] = (-1);
        $i = $i + 1 | 0;
    }
    $edgeList = ju_ArrayList__init_();
    $i = 0;
    while ($i < $m) {
        var$9 = $weights.data;
        var$10 = $edges.data;
        var$11 = new ogu_BlossomV$EdgeInfo;
        var$12 = 2 * $i | 0;
        ogu_BlossomV$EdgeInfo__init_(var$11, var$10[var$12], var$10[var$12 + 1 | 0], var$9[$i]);
        $edgeList.$add2(var$11);
        $i = $i + 1 | 0;
    }
    ju_Collections_sort($edgeList, ogu_BlossomV$1__init_0());
    var$11 = $edgeList.$iterator();
    while (var$11.$hasNext()) {
        var$10 = $matched.data;
        $edge = var$11.$next();
        $u = $edge.$u;
        $v = $edge.$v;
        if (!var$10[$u] && !var$10[$v]) {
            var$9 = $matching.data;
            var$9[$u] = $v;
            var$9[$v] = $u;
            var$10[$u] = 1;
            var$10[$v] = 1;
        }
    }
    $i = 0;
    while ($i < $n) {
        a: {
            var$10 = $matched.data;
            if (!var$10[$i]) {
                (jl_System_err()).$println1((((jl_StringBuilder__init_()).$append4($rt_s(251))).$append2($i)).$toString());
                $j = $i + 1 | 0;
                while (true) {
                    if ($j >= $n)
                        break a;
                    if (!var$10[$j])
                        break;
                    $j = $j + 1 | 0;
                }
                var$9 = $matching.data;
                var$9[$i] = $j;
                var$9[$j] = $i;
                var$10[$i] = 1;
                var$10[$j] = 1;
            }
        }
        $i = $i + 1 | 0;
    }
    return $matching;
},
jur_AbstractCharClass$LazyJavaLetter = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetter__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaLetter__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetter();
    jur_AbstractCharClass$LazyJavaLetter__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetter_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaLetter$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
},
ji_Flushable = $rt_classWithoutFields(0),
om_Metric = $rt_classWithoutFields(),
om_Metric__init_ = $this => {
    jl_Object__init_($this);
},
om_SumMetric = $rt_classWithoutFields(om_Metric),
om_SumMetric__init_0 = $this => {
    om_Metric__init_($this);
},
om_SumMetric__init_ = () => {
    let var_0 = new om_SumMetric();
    om_SumMetric__init_0(var_0);
    return var_0;
};
function jur_DecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$readCharsForCodePoint = 0;
    a.$decomposedCharUTF160 = null;
    a.$decomposedChar0 = null;
    a.$decomposedCharLength0 = 0;
}
let jur_DecomposedCharSet__init_ = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_JointSet__init_($this);
    $this.$readCharsForCodePoint = 1;
    $this.$decomposedChar0 = $decomposedChar;
    $this.$decomposedCharLength0 = $decomposedCharLength;
},
jur_DecomposedCharSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_DecomposedCharSet();
    jur_DecomposedCharSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_DecomposedCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $decCodePoint, $readCodePoints, $rightBound, $curChar, var$8, $decCurCodePoint, var$10, var$11, var$12, var$13, var$14, var$15;
    $decCodePoint = $rt_createIntArray(4);
    $readCodePoints = 0;
    $rightBound = $matchResult.$getRightBound();
    if ($strIndex >= $rightBound)
        return (-1);
    $curChar = $this.$codePointAt($strIndex, $testString, $rightBound);
    var$8 = $strIndex + $this.$readCharsForCodePoint | 0;
    $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
    if ($decCurCodePoint === null) {
        var$10 = $decCodePoint.data;
        var$11 = 1;
        var$10[$readCodePoints] = $curChar;
    } else {
        var$11 = $decCurCodePoint.data.length;
        jl_System_fastArraycopy($decCurCodePoint, 0, $decCodePoint, 0, var$11);
        var$11 = $readCodePoints + var$11 | 0;
    }
    a: {
        if (var$8 < $rightBound) {
            var$12 = $this.$codePointAt(var$8, $testString, $rightBound);
            while (var$11 < 4) {
                if (!jur_Lexer_hasDecompositionNonNullCanClass(var$12)) {
                    var$10 = $decCodePoint.data;
                    var$13 = var$11 + 1 | 0;
                    var$10[var$11] = var$12;
                } else {
                    var$10 = (jur_Lexer_getDecomposition(var$12)).data;
                    if (var$10.length != 2) {
                        var$14 = $decCodePoint.data;
                        var$13 = var$11 + 1 | 0;
                        var$14[var$11] = var$10[0];
                    } else {
                        var$14 = $decCodePoint.data;
                        var$12 = var$11 + 1 | 0;
                        var$14[var$11] = var$10[0];
                        var$13 = var$12 + 1 | 0;
                        var$14[var$12] = var$10[1];
                    }
                }
                var$8 = var$8 + $this.$readCharsForCodePoint | 0;
                if (var$8 >= $rightBound) {
                    var$11 = var$13;
                    break a;
                }
                var$12 = $this.$codePointAt(var$8, $testString, $rightBound);
                var$11 = var$13;
            }
        }
    }
    if (var$11 != $this.$decomposedCharLength0)
        return (-1);
    var$15 = 0;
    while (true) {
        if (var$15 >= var$11)
            return $this.$next2.$matches(var$8, $testString, $matchResult);
        if ($decCodePoint.data[var$15] != $this.$decomposedChar0.data[var$15])
            break;
        var$15 = var$15 + 1 | 0;
    }
    return (-1);
},
jur_DecomposedCharSet_getDecomposedChar = $this => {
    let $strBuff, $i;
    if ($this.$decomposedCharUTF160 === null) {
        $strBuff = jl_StringBuilder__init_();
        $i = 0;
        while ($i < $this.$decomposedCharLength0) {
            $strBuff.$append3(jl_Character_toChars($this.$decomposedChar0.data[$i]));
            $i = $i + 1 | 0;
        }
        $this.$decomposedCharUTF160 = $strBuff.$toString();
    }
    return $this.$decomposedCharUTF160;
},
jur_DecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_DecomposedCharSet_getDecomposedChar($this);
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(252)), var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_DecomposedCharSet_codePointAt = ($this, $strIndex, $testString, $rightBound) => {
    let $curChar, var$5, $low, $curCodePointUTF16;
    $this.$readCharsForCodePoint = 1;
    if ($strIndex >= ($rightBound - 1 | 0))
        $curChar = $testString.$charAt($strIndex);
    else {
        var$5 = $strIndex + 1 | 0;
        $curChar = $testString.$charAt($strIndex);
        $low = $testString.$charAt(var$5);
        if (jl_Character_isSurrogatePair($curChar, $low)) {
            $curCodePointUTF16 = $rt_createCharArrayFromData([$curChar, $low]);
            $curChar = jl_Character_codePointAt($curCodePointUTF16, 0);
            $this.$readCharsForCodePoint = 2;
        }
    }
    return $curChar;
},
jur_DecomposedCharSet_first = ($this, $set) => {
    let var$2, var$3;
    a: {
        if ($set instanceof jur_DecomposedCharSet) {
            var$2 = $set;
            if (!(jur_DecomposedCharSet_getDecomposedChar(var$2)).$equals(jur_DecomposedCharSet_getDecomposedChar($this))) {
                var$3 = 0;
                break a;
            }
        }
        var$3 = 1;
    }
    return var$3;
},
jur_DecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_CIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_CIDecomposedCharSet__init_ = ($this, $decomp, $decomposedCharLength) => {
    jur_DecomposedCharSet__init_($this, $decomp, $decomposedCharLength);
},
jur_CIDecomposedCharSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CIDecomposedCharSet();
    jur_CIDecomposedCharSet__init_(var_2, var_0, var_1);
    return var_2;
},
gt_PrimeFinder = $rt_classWithoutFields(),
gt_PrimeFinder_primeCapacities = null,
gt_PrimeFinder_$callClinit = () => {
    gt_PrimeFinder_$callClinit = $rt_eraseClinit(gt_PrimeFinder);
    gt_PrimeFinder__clinit_();
},
gt_PrimeFinder_nextPrime = $desiredCapacity => {
    let $i;
    gt_PrimeFinder_$callClinit();
    $i = ju_Arrays_binarySearch(gt_PrimeFinder_primeCapacities, $desiredCapacity);
    if ($i < 0)
        $i = ( -$i | 0) - 1 | 0;
    return gt_PrimeFinder_primeCapacities.data[$i];
},
gt_PrimeFinder__clinit_ = () => {
    gt_PrimeFinder_primeCapacities = $rt_createIntArrayFromData([3, 5, 7, 11, 17, 23, 31, 37, 43, 47, 67, 79, 89, 97, 137, 163, 179, 197, 277, 311, 331, 359, 379, 397, 433, 557, 599, 631, 673, 719, 761, 797, 877, 953, 1039, 1117, 1201, 1277, 1361, 1439, 1523, 1597, 1759, 1907, 2081, 2237, 2411, 2557, 2729, 2879, 3049, 3203, 3527, 3821, 4177, 4481, 4831, 5119, 5471, 5779, 6101, 6421, 7057, 7643, 8363, 8963, 9677, 10243, 10949, 11579, 12203, 12853, 14143, 15287, 16729, 17929, 19373, 20507, 21911, 23159, 24407,
    25717, 28289, 30577, 33461, 35863, 38747, 41017, 43853, 46327, 48817, 51437, 56591, 61169, 66923, 71741, 77509, 82037, 87719, 92657, 97649, 102877, 113189, 122347, 133853, 143483, 155027, 164089, 175447, 185323, 195311, 205759, 226379, 244703, 267713, 286973, 310081, 328213, 350899, 370661, 390647, 411527, 452759, 489407, 535481, 573953, 620171, 656429, 701819, 741337, 781301, 823117, 905551, 978821, 1070981, 1147921, 1240361, 1312867, 1403641, 1482707, 1562611, 1646237, 1811107, 1957651, 2141977, 2295859,
    2480729, 2625761, 2807303, 2965421, 3125257, 3292489, 3622219, 3915341, 4283963, 4591721, 4961459, 5251529, 5614657, 5930887, 6250537, 6584983, 7244441, 7830701, 8567929, 9183457, 9922933, 10503061, 11229331, 11861791, 12501169, 13169977, 14488931, 15661423, 17135863, 18366923, 19845871, 21006137, 22458671, 23723597, 25002389, 26339969, 28977863, 31322867, 34271747, 36733847, 39691759, 42012281, 44917381, 47447201, 50004791, 52679969, 57955739, 62645741, 68543509, 73467739, 79383533, 84024581, 89834777,
    94894427, 100009607, 105359939, 115911563, 125291483, 137087021, 146935499, 158767069, 168049163, 179669557, 189788857, 200019221, 210719881, 231823147, 250582987, 274174111, 293871013, 317534141, 336098327, 359339171, 379577741, 400038451, 421439783, 463646329, 501165979, 548348231, 587742049, 635068283, 672196673, 718678369, 759155483, 800076929, 842879579, 927292699, 1002331963, 1096696463, 1175484103, 1270136683, 1344393353, 1437356741, 1518310967, 1600153859, 1685759167, 1854585413, 2004663929, 2147483647]);
};
function gt_TIntIntHashMap() {
    gt_TIntHash.call(this);
    this.$_values0 = null;
}
let gt_TIntIntHashMap__init_ = $this => {
    gt_TIntHash__init_($this);
},
gt_TIntIntHashMap__init_0 = () => {
    let var_0 = new gt_TIntIntHashMap();
    gt_TIntIntHashMap__init_(var_0);
    return var_0;
},
gt_TIntIntHashMap_setUp = ($this, $initialCapacity) => {
    let $capacity;
    $capacity = gt_TIntHash_setUp($this, $initialCapacity);
    $this.$_values0 = $initialCapacity != (-1) ? $rt_createIntArray($capacity) : null;
    return $capacity;
},
gt_TIntIntHashMap_get = ($this, $key) => {
    let $index;
    $index = $this.$index($key);
    return $index < 0 ? 0 : $this.$_values0.data[$index];
};
function ot_OARLibParser$LinkData() {
    let a = this; jl_Object.call(a);
    a.$v1 = null;
    a.$v2 = null;
    a.$cost = null;
    a.$reverseCost = null;
    a.$isDirected0 = null;
    a.$isRequired0 = null;
}
let ot_OARLibParser$LinkData__init_ = $this => {
    jl_Object__init_($this);
},
ot_OARLibParser$LinkData__init_0 = () => {
    let var_0 = new ot_OARLibParser$LinkData();
    ot_OARLibParser$LinkData__init_(var_0);
    return var_0;
},
ot_OARLibParser$LinkData_toString = $this => {
    return ((((((((((((((jl_StringBuilder__init_()).$append4($rt_s(253))).$append($this.$v1)).$append4($rt_s(254))).$append($this.$v2)).$append4($rt_s(255))).$append($this.$cost)).$append4($rt_s(256))).$append($this.$reverseCost)).$append4($rt_s(257))).$append($this.$isDirected0)).$append4($rt_s(258))).$append($this.$isRequired0)).$append0(125)).$toString();
};
function ogu_BlossomV$EdgeInfo() {
    let a = this; jl_Object.call(a);
    a.$u = 0;
    a.$v = 0;
    a.$weight = 0;
}
let ogu_BlossomV$EdgeInfo__init_ = ($this, $u, $v, $weight) => {
    jl_Object__init_($this);
    $this.$u = $u;
    $this.$v = $v;
    $this.$weight = $weight;
},
ogu_BlossomV$EdgeInfo__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new ogu_BlossomV$EdgeInfo();
    ogu_BlossomV$EdgeInfo__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AheadFSet = $rt_classWithoutFields(jur_FSet),
jur_AheadFSet__init_ = $this => {
    jur_FSet__init_($this, (-1));
},
jur_AheadFSet__init_0 = () => {
    let var_0 = new jur_AheadFSet();
    jur_AheadFSet__init_(var_0);
    return var_0;
},
jur_AheadFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_AheadFSet_getName = $this => {
    return $rt_s(259);
},
jur_AbstractCharClass$LazyASCII = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyASCII__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyASCII__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyASCII();
    jur_AbstractCharClass$LazyASCII__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyASCII_computeValue = $this => {
    return (jur_CharClass__init_()).$add0(0, 127);
},
jl_ArrayIndexOutOfBoundsException = $rt_classWithoutFields(jl_IndexOutOfBoundsException),
jl_ArrayIndexOutOfBoundsException__init_ = ($this, $index) => {
    jl_IndexOutOfBoundsException__init_1($this, jl_Integer_toString($index));
},
jl_ArrayIndexOutOfBoundsException__init_0 = var_0 => {
    let var_1 = new jl_ArrayIndexOutOfBoundsException();
    jl_ArrayIndexOutOfBoundsException__init_(var_1, var_0);
    return var_1;
},
jur_NonCapJointSet = $rt_classWithoutFields(jur_JointSet),
jur_NonCapJointSet__init_ = ($this, $children, $fSet) => {
    jur_JointSet__init_0($this, $children, $fSet);
},
jur_NonCapJointSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_NonCapJointSet();
    jur_NonCapJointSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_NonCapJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $e, $shift;
    $start = $matchResult.$getConsumed($this.$groupIndex);
    $matchResult.$setConsumed($this.$groupIndex, $stringIndex);
    $size = $this.$children.$size();
    $i = 0;
    while (true) {
        if ($i >= $size) {
            $matchResult.$setConsumed($this.$groupIndex, $start);
            return (-1);
        }
        $e = $this.$children.$get($i);
        $shift = $e.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
},
jur_NonCapJointSet_getName = $this => {
    return $rt_s(260);
},
jur_NonCapJointSet_hasConsumed = ($this, $matchResult) => {
    let $cons;
    $cons = $matchResult.$getConsumed($this.$groupIndex);
    return !$cons ? 0 : 1;
},
jur_AtomicJointSet = $rt_classWithoutFields(jur_NonCapJointSet),
jur_AtomicJointSet__init_ = ($this, $children, $fSet) => {
    jur_NonCapJointSet__init_($this, $children, $fSet);
},
jur_AtomicJointSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_AtomicJointSet();
    jur_AtomicJointSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_AtomicJointSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $start, $size, $i, $e, $shift;
    $start = $matchResult.$getConsumed($this.$groupIndex);
    $matchResult.$setConsumed($this.$groupIndex, $stringIndex);
    $size = $this.$children.$size();
    $i = 0;
    while ($i < $size) {
        $e = $this.$children.$get($i);
        $shift = $e.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $this.$next2.$matches($this.$fSet.$getIndex(), $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    $matchResult.$setConsumed($this.$groupIndex, $start);
    return (-1);
},
jur_AtomicJointSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_AtomicJointSet_getName = $this => {
    return $rt_s(260);
},
jur_PositiveLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookAhead__init_ = ($this, $children, $fSet) => {
    jur_AtomicJointSet__init_($this, $children, $fSet);
},
jur_PositiveLookAhead__init_0 = (var_0, var_1) => {
    let var_2 = new jur_PositiveLookAhead();
    jur_PositiveLookAhead__init_(var_2, var_0, var_1);
    return var_2;
},
jur_PositiveLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i, $e, $shift;
    $size = $this.$children.$size();
    $i = 0;
    while ($i < $size) {
        $e = $this.$children.$get($i);
        $shift = $e.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_PositiveLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookAhead_getName = $this => {
    return $rt_s(261);
},
jur_NegativeLookAhead = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookAhead__init_ = ($this, $children, $fSet) => {
    jur_AtomicJointSet__init_($this, $children, $fSet);
},
jur_NegativeLookAhead__init_0 = (var_0, var_1) => {
    let var_2 = new jur_NegativeLookAhead();
    jur_NegativeLookAhead__init_(var_2, var_0, var_1);
    return var_2;
},
jur_NegativeLookAhead_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i, $e;
    $size = $this.$children.$size();
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $e = $this.$children.$get($i);
        if ($e.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookAhead_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookAhead_getName = $this => {
    return $rt_s(262);
};
function ju_AbstractList$1() {
    let a = this; jl_Object.call(a);
    a.$index3 = 0;
    a.$modCount1 = 0;
    a.$size3 = 0;
    a.$removeIndex0 = 0;
    a.$this$01 = null;
}
let ju_AbstractList$1__init_ = ($this, $this$0) => {
    $this.$this$01 = $this$0;
    jl_Object__init_($this);
    $this.$modCount1 = $this.$this$01.$modCount;
    $this.$size3 = $this.$this$01.$size();
    $this.$removeIndex0 = (-1);
},
ju_AbstractList$1__init_0 = var_0 => {
    let var_1 = new ju_AbstractList$1();
    ju_AbstractList$1__init_(var_1, var_0);
    return var_1;
},
ju_AbstractList$1_hasNext = $this => {
    return $this.$index3 >= $this.$size3 ? 0 : 1;
},
ju_AbstractList$1_next = $this => {
    let var$1, var$2;
    ju_AbstractList$1_checkConcurrentModification($this);
    $this.$removeIndex0 = $this.$index3;
    var$1 = $this.$this$01;
    var$2 = $this.$index3;
    $this.$index3 = var$2 + 1 | 0;
    return var$1.$get(var$2);
},
ju_AbstractList$1_checkConcurrentModification = $this => {
    if ($this.$modCount1 >= $this.$this$01.$modCount)
        return;
    $rt_throw(ju_ConcurrentModificationException__init_());
};
function jl_Enum() {
    let a = this; jl_Object.call(a);
    a.$name1 = null;
    a.$ordinal0 = 0;
}
let jl_Enum__init_ = ($this, $name, $ordinal) => {
    jl_Object__init_($this);
    $this.$name1 = $name;
    $this.$ordinal0 = $ordinal;
},
jl_Enum_ordinal = $this => {
    return $this.$ordinal0;
},
oc_Graph$Type = $rt_classWithoutFields(jl_Enum),
oc_Graph$Type_DIRECTED = null,
oc_Graph$Type_UNDIRECTED = null,
oc_Graph$Type_MIXED = null,
oc_Graph$Type_WINDY = null,
oc_Graph$Type_$VALUES = null,
oc_Graph$Type_$callClinit = () => {
    oc_Graph$Type_$callClinit = $rt_eraseClinit(oc_Graph$Type);
    oc_Graph$Type__clinit_();
},
oc_Graph$Type__init_0 = ($this, var$1, var$2) => {
    oc_Graph$Type_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
oc_Graph$Type__init_ = (var_0, var_1) => {
    let var_2 = new oc_Graph$Type();
    oc_Graph$Type__init_0(var_2, var_0, var_1);
    return var_2;
},
oc_Graph$Type_$values = () => {
    let var$1, var$2;
    oc_Graph$Type_$callClinit();
    var$1 = $rt_createArray(oc_Graph$Type, 4);
    var$2 = var$1.data;
    var$2[0] = oc_Graph$Type_DIRECTED;
    var$2[1] = oc_Graph$Type_UNDIRECTED;
    var$2[2] = oc_Graph$Type_MIXED;
    var$2[3] = oc_Graph$Type_WINDY;
    return var$1;
},
oc_Graph$Type__clinit_ = () => {
    oc_Graph$Type_DIRECTED = oc_Graph$Type__init_($rt_s(263), 0);
    oc_Graph$Type_UNDIRECTED = oc_Graph$Type__init_($rt_s(264), 1);
    oc_Graph$Type_MIXED = oc_Graph$Type__init_($rt_s(265), 2);
    oc_Graph$Type_WINDY = oc_Graph$Type__init_($rt_s(266), 3);
    oc_Graph$Type_$VALUES = oc_Graph$Type_$values();
};
function ju_AbstractMap() {
    let a = this; jl_Object.call(a);
    a.$cachedKeySet = null;
    a.$cachedValues = null;
}
let ju_AbstractMap__init_ = $this => {
    jl_Object__init_($this);
},
ju_TemplateCollections$AbstractImmutableMap = $rt_classWithoutFields(ju_AbstractMap),
ju_TemplateCollections$AbstractImmutableMap__init_ = $this => {
    ju_AbstractMap__init_($this);
},
gt_Equality = $rt_classWithoutFields(0);
function jur_Quantifier() {
    let a = this; jur_SpecialToken.call(a);
    a.$min1 = 0;
    a.$max1 = 0;
}
let jur_Quantifier__init_ = ($this, $min, $max) => {
    jur_SpecialToken__init_($this);
    $this.$min1 = $min;
    $this.$max1 = $max;
},
jur_Quantifier__init_0 = (var_0, var_1) => {
    let var_2 = new jur_Quantifier();
    jur_Quantifier__init_(var_2, var_0, var_1);
    return var_2;
},
jur_Quantifier_min = $this => {
    return $this.$min1;
},
jur_Quantifier_max = $this => {
    return $this.$max1;
},
jur_Quantifier_toString = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$min1;
    var$2 = $this.$max1 == 2147483647 ? $rt_s(33) : jl_Integer_toString($this.$max1);
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append1(jl_StringBuilder_append0(var$3, 123), var$1), 44), var$2), 125);
    return jl_StringBuilder_toString(var$3);
},
oc_MultiEdge$EDGETYPE = $rt_classWithoutFields(jl_Enum),
oc_MultiEdge$EDGETYPE_A = null,
oc_MultiEdge$EDGETYPE_B = null,
oc_MultiEdge$EDGETYPE_C = null,
oc_MultiEdge$EDGETYPE_D = null,
oc_MultiEdge$EDGETYPE_E = null,
oc_MultiEdge$EDGETYPE_F = null,
oc_MultiEdge$EDGETYPE_$VALUES = null,
oc_MultiEdge$EDGETYPE_$callClinit = () => {
    oc_MultiEdge$EDGETYPE_$callClinit = $rt_eraseClinit(oc_MultiEdge$EDGETYPE);
    oc_MultiEdge$EDGETYPE__clinit_();
},
oc_MultiEdge$EDGETYPE__init_0 = ($this, var$1, var$2) => {
    oc_MultiEdge$EDGETYPE_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
oc_MultiEdge$EDGETYPE__init_ = (var_0, var_1) => {
    let var_2 = new oc_MultiEdge$EDGETYPE();
    oc_MultiEdge$EDGETYPE__init_0(var_2, var_0, var_1);
    return var_2;
},
oc_MultiEdge$EDGETYPE_$values = () => {
    let var$1, var$2;
    oc_MultiEdge$EDGETYPE_$callClinit();
    var$1 = $rt_createArray(oc_MultiEdge$EDGETYPE, 6);
    var$2 = var$1.data;
    var$2[0] = oc_MultiEdge$EDGETYPE_A;
    var$2[1] = oc_MultiEdge$EDGETYPE_B;
    var$2[2] = oc_MultiEdge$EDGETYPE_C;
    var$2[3] = oc_MultiEdge$EDGETYPE_D;
    var$2[4] = oc_MultiEdge$EDGETYPE_E;
    var$2[5] = oc_MultiEdge$EDGETYPE_F;
    return var$1;
},
oc_MultiEdge$EDGETYPE__clinit_ = () => {
    oc_MultiEdge$EDGETYPE_A = oc_MultiEdge$EDGETYPE__init_($rt_s(267), 0);
    oc_MultiEdge$EDGETYPE_B = oc_MultiEdge$EDGETYPE__init_($rt_s(268), 1);
    oc_MultiEdge$EDGETYPE_C = oc_MultiEdge$EDGETYPE__init_($rt_s(269), 2);
    oc_MultiEdge$EDGETYPE_D = oc_MultiEdge$EDGETYPE__init_($rt_s(74), 3);
    oc_MultiEdge$EDGETYPE_E = oc_MultiEdge$EDGETYPE__init_($rt_s(270), 4);
    oc_MultiEdge$EDGETYPE_F = oc_MultiEdge$EDGETYPE__init_($rt_s(271), 5);
    oc_MultiEdge$EDGETYPE_$VALUES = oc_MultiEdge$EDGETYPE_$values();
};
function jur_AbstractCharClass$LazyJavaUpperCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$013 = null;
}
let jur_AbstractCharClass$LazyJavaUpperCase$1__init_ = ($this, $this$0) => {
    $this.$this$013 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaUpperCase$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaUpperCase$1();
    jur_AbstractCharClass$LazyJavaUpperCase$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaUpperCase$1_contains = ($this, $ch) => {
    return jl_Character_isUpperCase($ch);
},
jlr_Array = $rt_classWithoutFields(),
jlr_Array_getLength = var$1 => {
    if (var$1 === null || var$1.constructor.$meta.item === 'undefined') {
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    return var$1.data.length;
},
jlr_Array_newInstance = (var$1, $length) => {
    if (var$1 === null)
        $rt_throw(jl_NullPointerException__init_());
    if (var$1 === $rt_cls($rt_voidcls))
        $rt_throw(jl_IllegalArgumentException__init_());
    if ($length < 0)
        $rt_throw(jl_NegativeArraySizeException__init_0());
    return jlr_Array_newInstanceImpl(jl_Class_getPlatformClass(var$1), $length);
},
jlr_Array_newInstanceImpl = (var$1, var$2) => {
    if (var$1.$meta.primitive) {
        switch (var$1) {
        }
        ;
    }
    return $rt_createArray(var$1, var$2);
},
ju_ListIterator = $rt_classWithoutFields(0),
jl_Iterable = $rt_classWithoutFields(0),
ju_Collection = $rt_classWithoutFields(0),
ju_AbstractCollection = $rt_classWithoutFields(),
ju_AbstractCollection__init_ = $this => {
    jl_Object__init_($this);
},
ju_AbstractCollection_isEmpty = $this => {
    return $this.$size() ? 0 : 1;
},
ju_AbstractCollection_contains = ($this, $o) => {
    let $iter, $e;
    $iter = $this.$iterator();
    while ($iter.$hasNext()) {
        $e = $iter.$next();
        if (ju_Objects_equals($e, $o))
            return 1;
    }
    return 0;
},
ju_AbstractCollection_toArray = ($this, $a) => {
    let var$2, $i, var$4, $iter;
    var$2 = $a.data;
    $i = $this.$size();
    var$4 = var$2.length;
    if (var$4 < $i)
        $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
    else
        while ($i < var$4) {
            var$2[$i] = null;
            $i = $i + 1 | 0;
        }
    $i = 0;
    $iter = $this.$iterator();
    while ($iter.$hasNext()) {
        var$2 = $a.data;
        var$4 = $i + 1 | 0;
        var$2[$i] = $iter.$next();
        $i = var$4;
    }
    return $a;
},
ju_AbstractCollection_remove = ($this, $o) => {
    let $iter, $e;
    $iter = $this.$iterator();
    while ($iter.$hasNext()) {
        $e = $iter.$next();
        if (ju_Objects_equals($e, $o)) {
            $iter.$remove2();
            return 1;
        }
    }
    return 0;
},
ju_AbstractCollection_addAll = ($this, $c) => {
    let $changed, $iter;
    $changed = 0;
    $iter = $c.$iterator();
    while ($iter.$hasNext()) {
        if (!$this.$add2($iter.$next()))
            continue;
        $changed = 1;
    }
    return $changed;
},
ju_AbstractCollection_toString = $this => {
    let $sb, $iter, $e, var$4;
    $sb = jl_StringBuilder__init_();
    $sb.$append0(91);
    $iter = $this.$iterator();
    if ($iter.$hasNext()) {
        $e = $iter.$next();
        if ($e === $this)
            $e = $rt_s(272);
        $sb.$append($e);
    }
    while ($iter.$hasNext()) {
        $e = $iter.$next();
        var$4 = $sb.$append4($rt_s(273));
        if ($e === $this)
            $e = $rt_s(272);
        var$4.$append($e);
    }
    $sb.$append0(93);
    return $sb.$toString();
},
ju_Queue = $rt_classWithoutFields(0),
ju_AbstractQueue = $rt_classWithoutFields(ju_AbstractCollection),
ju_AbstractQueue__init_ = $this => {
    ju_AbstractCollection__init_($this);
},
ju_AbstractQueue_add = ($this, $e) => {
    if ($this.$offer($e))
        return 1;
    $rt_throw(jl_IllegalStateException__init_());
};
function ju_PriorityQueue() {
    let a = this; ju_AbstractQueue.call(a);
    a.$data0 = null;
    a.$comparator = null;
    a.$originalComparator = null;
    a.$size1 = 0;
    a.$version = 0;
}
let ju_PriorityQueue__init_ = ($this, $initialCapacity, $comparator) => {
    ju_AbstractQueue__init_($this);
    if ($initialCapacity < 1)
        $rt_throw(jl_IllegalArgumentException__init_());
    $this.$data0 = $rt_createArray(jl_Object, $initialCapacity);
    ju_PriorityQueue_setComparator($this, $comparator);
},
ju_PriorityQueue__init_0 = (var_0, var_1) => {
    let var_2 = new ju_PriorityQueue();
    ju_PriorityQueue__init_(var_2, var_0, var_1);
    return var_2;
},
ju_PriorityQueue_setComparator = ($this, $comparator) => {
    $this.$originalComparator = $comparator;
    if ($comparator === null)
        $comparator = ju_Comparator$NaturalOrder_instance();
    $this.$comparator = $comparator;
},
ju_PriorityQueue_offer = ($this, $e) => {
    let $current, $current_0;
    if ($e === null)
        $rt_throw(jl_NullPointerException__init_());
    ju_PriorityQueue_ensureCapacity($this, $this.$size1 + 1 | 0);
    $current = $this.$size1;
    while ($current > 0) {
        $current_0 = ($current - 1 | 0) / 2 | 0;
        if ($this.$comparator.$compare1($e, $this.$data0.data[$current_0]) >= 0)
            break;
        $this.$data0.data[$current] = $this.$data0.data[$current_0];
        $current = $current_0;
    }
    $this.$data0.data[$current] = $e;
    $this.$size1 = $this.$size1 + 1 | 0;
    $this.$version = $this.$version + 1 | 0;
    return 1;
},
ju_PriorityQueue_poll = $this => {
    let $elem;
    if (!$this.$size1)
        return null;
    $elem = $this.$data0.data[0];
    ju_PriorityQueue_removeAt($this, 0);
    return $elem;
},
ju_PriorityQueue_size = $this => {
    return $this.$size1;
},
ju_PriorityQueue_iterator = $this => {
    return ju_PriorityQueue$1__init_0($this);
},
ju_PriorityQueue_removeAt = ($this, $index) => {
    let $item, $next, $next_0, var$5, var$6;
    $this.$version = $this.$version + 1 | 0;
    $item = $this.$data0.data[$this.$size1 - 1 | 0];
    a: {
        while (true) {
            $next = ($index * 2 | 0) + 1 | 0;
            $next_0 = $next + 1 | 0;
            if ($next >= $this.$size1)
                break;
            if ($next_0 < $this.$size1 && $this.$comparator.$compare1($this.$data0.data[$next], $this.$data0.data[$next_0]) >= 0)
                $next = $next_0;
            if ($this.$comparator.$compare1($item, $this.$data0.data[$next]) <= 0)
                break a;
            $this.$data0.data[$index] = $this.$data0.data[$next];
            $index = $next;
        }
    }
    $this.$data0.data[$index] = $item;
    var$5 = $this.$data0.data;
    var$6 = $this.$size1 - 1 | 0;
    $this.$size1 = var$6;
    var$5[var$6] = null;
},
ju_PriorityQueue_ensureCapacity = ($this, $capacity) => {
    let var$2;
    if ($this.$data0.data.length >= $capacity)
        return;
    var$2 = jl_Math_max($capacity, ($this.$data0.data.length * 3 | 0) / 2 | 0);
    $this.$data0 = ju_Arrays_copyOf($this.$data0, var$2);
};
function otcit_DoubleAnalyzer$Result() {
    let a = this; jl_Object.call(a);
    a.$mantissa = Long_ZERO;
    a.$exponent = 0;
    a.$sign = 0;
}
let otcit_DoubleAnalyzer$Result__init_0 = $this => {
    jl_Object__init_($this);
},
otcit_DoubleAnalyzer$Result__init_ = () => {
    let var_0 = new otcit_DoubleAnalyzer$Result();
    otcit_DoubleAnalyzer$Result__init_0(var_0);
    return var_0;
},
ju_Random = $rt_classWithoutFields(),
ju_Random__init_ = ($this, $seed) => {
    jl_Object__init_($this);
},
ju_Random__init_0 = var_0 => {
    let var_1 = new ju_Random();
    ju_Random__init_(var_1, var_0);
    return var_1;
},
ju_Random_nextInt = ($this, $n) => {
    if ($n <= 0)
        $rt_throw(jl_IllegalArgumentException__init_());
    return $this.$nextDouble() * $n | 0;
},
ju_Random_nextDouble = $this => {
    return jl_Math_random();
},
otpp_ResourceAccessor = $rt_classWithoutFields(),
jur_AbstractCharClass$LazyJavaDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDigit__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDigit();
    jur_AbstractCharClass$LazyJavaDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDigit_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaDigit$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
},
gt_HashFunctions = $rt_classWithoutFields(),
gt_HashFunctions_hash = $value => {
    return $value;
},
jur_PossessiveQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_PossessiveQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_PossessiveQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_PossessiveQuantifierSet();
    jur_PossessiveQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PossessiveQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    a: {
        while (true) {
            if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$getRightBound())
                break a;
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 < 1)
                break;
            $stringIndex = $stringIndex + var$4 | 0;
        }
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
otci_IntegerUtil = $rt_classWithoutFields(),
otci_IntegerUtil_toUnsignedLogRadixString = ($value, $radixLog2) => {
    let $radix, $mask, $sz, $chars, $pos, $target, var$9, $target_0;
    if (!$value)
        return $rt_s(274);
    $radix = 1 << $radixLog2;
    $mask = $radix - 1 | 0;
    $sz = (((32 - jl_Integer_numberOfLeadingZeros($value) | 0) + $radixLog2 | 0) - 1 | 0) / $radixLog2 | 0;
    $chars = $rt_createCharArray($sz);
    $pos = $rt_imul($sz - 1 | 0, $radixLog2);
    $target = 0;
    while ($pos >= 0) {
        var$9 = $chars.data;
        $target_0 = $target + 1 | 0;
        var$9[$target] = jl_Character_forDigit(($value >>> $pos | 0) & $mask, $radix);
        $pos = $pos - $radixLog2 | 0;
        $target = $target_0;
    }
    return jl_String__init_($chars);
};
function ju_Locale() {
    let a = this; jl_Object.call(a);
    a.$countryCode = null;
    a.$languageCode = null;
    a.$variantCode = null;
}
let ju_Locale_defaultLocale = null,
ju_Locale_CANADA = null,
ju_Locale_CANADA_FRENCH = null,
ju_Locale_CHINA = null,
ju_Locale_CHINESE = null,
ju_Locale_ENGLISH = null,
ju_Locale_FRANCE = null,
ju_Locale_FRENCH = null,
ju_Locale_GERMAN = null,
ju_Locale_GERMANY = null,
ju_Locale_ITALIAN = null,
ju_Locale_ITALY = null,
ju_Locale_JAPAN = null,
ju_Locale_JAPANESE = null,
ju_Locale_KOREA = null,
ju_Locale_KOREAN = null,
ju_Locale_PRC = null,
ju_Locale_SIMPLIFIED_CHINESE = null,
ju_Locale_TAIWAN = null,
ju_Locale_TRADITIONAL_CHINESE = null,
ju_Locale_UK = null,
ju_Locale_US = null,
ju_Locale_ROOT = null,
ju_Locale_$callClinit = () => {
    ju_Locale_$callClinit = $rt_eraseClinit(ju_Locale);
    ju_Locale__clinit_();
},
ju_Locale__init_1 = ($this, $language, $country) => {
    ju_Locale_$callClinit();
    ju_Locale__init_0($this, $language, $country, $rt_s(33));
},
ju_Locale__init_ = (var_0, var_1) => {
    let var_2 = new ju_Locale();
    ju_Locale__init_1(var_2, var_0, var_1);
    return var_2;
},
ju_Locale__init_0 = ($this, $language, $country, $variant) => {
    ju_Locale_$callClinit();
    jl_Object__init_($this);
    if ($language !== null && $country !== null && $variant !== null) {
        if ($language.$isEmpty() && $country.$isEmpty()) {
            $this.$languageCode = $rt_s(33);
            $this.$countryCode = $rt_s(33);
            $this.$variantCode = $variant;
            return;
        }
        $this.$languageCode = $language;
        $this.$countryCode = $country;
        $this.$variantCode = $variant;
        return;
    }
    $rt_throw(jl_NullPointerException__init_());
},
ju_Locale__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new ju_Locale();
    ju_Locale__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
ju_Locale_toLanguageTag = $this => {
    let $result;
    $result = jl_StringBuilder__init_();
    $result.$append4(!$this.$languageCode.$isEmpty() ? $this.$languageCode : $rt_s(275));
    if (!$this.$countryCode.$isEmpty()) {
        $result.$append0(45);
        $result.$append4($this.$countryCode);
    }
    if (!$this.$variantCode.$isEmpty() && $result.$length() > 0) {
        $result.$append0(45);
        $result.$append4($this.$variantCode);
    }
    return jl_String__init_(($result.$toString()).$toCharArray());
},
ju_Locale__clinit_ = () => {
    let $localeName, $countryIndex;
    ju_Locale_CANADA = ju_Locale__init_($rt_s(276), $rt_s(277));
    ju_Locale_CANADA_FRENCH = ju_Locale__init_($rt_s(278), $rt_s(277));
    ju_Locale_CHINA = ju_Locale__init_($rt_s(279), $rt_s(280));
    ju_Locale_CHINESE = ju_Locale__init_($rt_s(279), $rt_s(33));
    ju_Locale_ENGLISH = ju_Locale__init_($rt_s(276), $rt_s(33));
    ju_Locale_FRANCE = ju_Locale__init_($rt_s(278), $rt_s(281));
    ju_Locale_FRENCH = ju_Locale__init_($rt_s(278), $rt_s(33));
    ju_Locale_GERMAN = ju_Locale__init_($rt_s(282), $rt_s(33));
    ju_Locale_GERMANY = ju_Locale__init_($rt_s(282), $rt_s(283));
    ju_Locale_ITALIAN = ju_Locale__init_($rt_s(284), $rt_s(33));
    ju_Locale_ITALY = ju_Locale__init_($rt_s(284), $rt_s(285));
    ju_Locale_JAPAN = ju_Locale__init_($rt_s(286), $rt_s(287));
    ju_Locale_JAPANESE = ju_Locale__init_($rt_s(286), $rt_s(33));
    ju_Locale_KOREA = ju_Locale__init_($rt_s(288), $rt_s(289));
    ju_Locale_KOREAN = ju_Locale__init_($rt_s(288), $rt_s(33));
    ju_Locale_PRC = ju_Locale__init_($rt_s(279), $rt_s(280));
    ju_Locale_SIMPLIFIED_CHINESE = ju_Locale__init_($rt_s(279), $rt_s(280));
    ju_Locale_TAIWAN = ju_Locale__init_($rt_s(279), $rt_s(290));
    ju_Locale_TRADITIONAL_CHINESE = ju_Locale__init_($rt_s(279), $rt_s(290));
    ju_Locale_UK = ju_Locale__init_($rt_s(276), $rt_s(291));
    ju_Locale_US = ju_Locale__init_($rt_s(276), $rt_s(292));
    ju_Locale_ROOT = ju_Locale__init_($rt_s(33), $rt_s(33));
    $localeName = ((otciu_CLDRHelper_getDefaultLocale()).value !== null ? $rt_str((otciu_CLDRHelper_getDefaultLocale()).value) : null);
    $countryIndex = $localeName.$indexOf(95);
    ju_Locale_defaultLocale = ju_Locale__init_2($localeName.$substring(0, $countryIndex), $localeName.$substring0($countryIndex + 1 | 0), $rt_s(33));
},
jur_AltQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_AltQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_AltQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AltQuantifierSet();
    jur_AltQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    return $shift;
},
jur_AltQuantifierSet_setNext = ($this, $next) => {
    jur_AbstractSet_setNext($this, $next);
    $this.$innerSet.$setNext($next);
},
jur_PossessiveAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_PossessiveAltQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AltQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_PossessiveAltQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_PossessiveAltQuantifierSet();
    jur_PossessiveAltQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PossessiveAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$getRightBound()) {
        var$4 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$4 >= 1)
            $stringIndex = $stringIndex + var$4 | 0;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
};
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
    jur_AbstractCharClass.call(this);
    this.$this$033 = null;
}
let jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1__init_ = ($this, $this$0) => {
    $this.$this$033 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1();
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains = ($this, $ch) => {
    return jl_Character_isIdentifierIgnorable($ch);
},
otcir_FieldInfo = $rt_classWithoutFields(),
osi_WRPPSolver_Win = $rt_classWithoutFields(oc_SingleVehicleSolver),
osi_WRPPSolver_Win_LOGGER = null,
osi_WRPPSolver_Win_$callClinit = () => {
    osi_WRPPSolver_Win_$callClinit = $rt_eraseClinit(osi_WRPPSolver_Win);
    osi_WRPPSolver_Win__clinit_();
},
osi_WRPPSolver_Win__init_ = ($this, $instance) => {
    osi_WRPPSolver_Win_$callClinit();
    oc_SingleVehicleSolver__init_($this, $instance);
},
osi_WRPPSolver_Win__init_0 = var_0 => {
    let var_1 = new osi_WRPPSolver_Win();
    osi_WRPPSolver_Win__init_(var_1, var_0);
    return var_1;
},
osi_WRPPSolver_Win_connectRequiredComponents = $g => {
    let $n, $m, $windyReq, $gVertices, $i, $tempVertex, $indexedWindyEdges, $mreq, $edge1, $edge2, $temp, var$13, $component, var$15, $nodei, $nodej, $e1, $e2, var$20, var$21, $e, var$23, $extraComponents, $extraVertices, var$26, $wv, $dist, $path, $edgePath, $mstGraph, $mstN, $realComponents, $minCostPathVal, $minCostPathNodes, $comp1, $j, $comp2, $averagePathCost1, $tempKey, $key, $mst, $limi, $mstEdges, $selected, $pathToAdd, $curr, $end, $next, $toAdd, $$je;
    osi_WRPPSolver_Win_$callClinit();
    a: {
        try {
            $n = ($g.$getVertices0()).$size();
            $m = ($g.$getEdges0()).$size();
            $windyReq = ogi_WindyGraph__init_();
            $gVertices = $g.$getInternalVertexMap();
            $i = 1;
            while ($i <= $n) {
                $tempVertex = ovi_WindyVertex__init_($rt_s(293));
                $tempVertex.$setCoordinates(($gVertices.$get($i)).$getX(), ($gVertices.$get($i)).$getY());
                $windyReq.$addVertex($tempVertex);
                $i = $i + 1 | 0;
            }
            $windyReq.$setDepotId($g.$getDepotId());
            $indexedWindyEdges = $g.$getInternalEdgeMap();
            $mreq = 0;
            $edge1 = ju_ArrayList__init_();
            $edge2 = ju_ArrayList__init_();
            $edge1.$add2(null);
            $edge2.$add2(null);
            $i = 1;
            while ($i <= $m) {
                $temp = $indexedWindyEdges.$get($i);
                if ($temp.$isRequired()) {
                    $mreq = $mreq + 1 | 0;
                    $edge1.$add2(jl_Integer_valueOf((($temp.$getEndpoints()).$getFirst()).$getId()));
                    $edge2.$add2(jl_Integer_valueOf((($temp.$getEndpoints()).$getSecond()).$getId()));
                    $windyReq.$addEdge1((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(293), $temp.$getCost(), $temp.$getReverseCost(), $i, 1);
                }
                $i = $i + 1 | 0;
            }
            var$13 = $n + 1 | 0;
            $component = $rt_createIntArray(var$13);
            var$15 = $mreq + 1 | 0;
            $nodei = $rt_createIntArray(var$15);
            $nodej = $rt_createIntArray(var$15);
            $e1 = $edge1.$toArray($rt_createArray(jl_Integer, $edge1.$size()));
            $e2 = $edge2.$toArray($rt_createArray(jl_Integer, $edge2.$size()));
            $i = 1;
            while ($i <= $mreq) {
                var$20 = $nodej.data;
                var$21 = $e2.data;
                $nodei.data[$i] = $e1.data[$i].$intValue();
                var$20[$i] = var$21[$i].$intValue();
                $i = $i + 1 | 0;
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        b: {
            try {
                var$23 = $component.data;
                ogu_CommonAlgorithms_connectedComponents($n, $mreq, $nodei, $nodej, $component);
                if (var$23[0] != 1)
                    break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $windyReq;
        }
        try {
            $extraComponents = ju_HashSet__init_();
            $extraVertices = ju_HashSet__init_();
            var$26 = ($windyReq.$getVertices0()).$iterator();
            while (var$26.$hasNext()) {
                $wv = var$26.$next();
                if (!$wv.$getDegree()) {
                    $extraComponents.$add2(jl_Integer_valueOf(var$23[$wv.$getId()]));
                    $extraVertices.$add2(jl_Integer_valueOf($wv.$getId()));
                }
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        c: {
            try {
                $dist = $rt_createIntArray(var$13);
                $path = $rt_createIntArray(var$13);
                $edgePath = $rt_createIntArray(var$13);
                $mstGraph = ogi_UndirectedGraph__init_();
                $mstN = var$23[0] - $extraComponents.$size() | 0;
                if ($mstN > 1)
                    break c;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $windyReq;
        }
        try {
            $i = 1;
            while ($i <= $mstN) {
                $mstGraph.$addVertex2(ovi_UndirectedVertex__init_($rt_s(293)));
                $i = $i + 1 | 0;
            }
            $realComponents = ju_ArrayList__init_();
            $realComponents.$add2(jl_Integer_valueOf(0));
            $i = 1;
            while ($i <= var$23[0]) {
                if (!$extraComponents.$contains0(jl_Integer_valueOf($i)))
                    $realComponents.$add2(jl_Integer_valueOf($i));
                $i = $i + 1 | 0;
            }
            $minCostPathVal = ju_HashMap__init_();
            $minCostPathNodes = ju_HashMap__init_();
            $i = 1;
            while ($i <= $n) {
                d: {
                    if (!$extraVertices.$contains0(jl_Integer_valueOf($i))) {
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($g, $i, $dist, $path, $edgePath);
                        $comp1 = $realComponents.$indexOf0(jl_Integer_valueOf(var$23[$i]));
                        $j = 1;
                        while (true) {
                            if ($j > $n)
                                break d;
                            if (!$extraVertices.$contains0(jl_Integer_valueOf($j))) {
                                $comp2 = $realComponents.$indexOf0(jl_Integer_valueOf(var$23[$j]));
                                var$15 = $rt_compare($comp1, $comp2);
                                if (var$15) {
                                    $averagePathCost1 = jl_Double_valueOf(osi_WRPPSolver_Win_calculateAveragePathCost($g, $i, $j, $path, $edgePath));
                                    $tempKey = var$15 >= 0 ? ogu_Pair__init_(jl_Integer_valueOf($comp2), jl_Integer_valueOf($comp1)) : ogu_Pair__init_(jl_Integer_valueOf($comp1), jl_Integer_valueOf($comp2));
                                    if (!($minCostPathVal.$containsKey($tempKey) && (2.0 * $averagePathCost1.$doubleValue() | 0) >= ($minCostPathVal.$get1($tempKey)).$intValue())) {
                                        $minCostPathVal.$put($tempKey, jl_Integer_valueOf(2.0 * $averagePathCost1.$doubleValue() | 0));
                                        $minCostPathNodes.$put($tempKey, ogu_Pair__init_(jl_Integer_valueOf($i), jl_Integer_valueOf($j)));
                                    }
                                }
                            }
                            $j = $j + 1 | 0;
                        }
                    }
                }
                $i = $i + 1 | 0;
            }
            var$26 = ($minCostPathVal.$keySet()).$iterator();
            while (var$26.$hasNext()) {
                $key = var$26.$next();
                $mstGraph.$addEdge2(($key.$getFirst()).$intValue(), ($key.$getSecond()).$intValue(), $rt_s(294), ($minCostPathVal.$get1($key)).$intValue());
            }
            $mst = ogu_CommonAlgorithms_randomizedLowCostSpanningTree($mstGraph, 5);
            var$23 = $mst.data;
            $limi = var$23.length;
            $mstEdges = $mstGraph.$getInternalEdgeMap();
            $i = 1;
            while ($i < $limi) {
                e: {
                    if (var$23[$i] == 1) {
                        $selected = $mstEdges.$get($i);
                        $comp1 = (($selected.$getEndpoints()).$getFirst()).$getId();
                        $comp2 = (($selected.$getEndpoints()).$getSecond()).$getId();
                        $tempKey = ogu_Pair__init_(jl_Integer_valueOf($comp1), jl_Integer_valueOf($comp2));
                        $pathToAdd = $minCostPathNodes.$get1($tempKey);
                        $curr = ($pathToAdd.$getFirst()).$intValue();
                        $end = ($pathToAdd.$getSecond()).$intValue();
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($g, $curr, $dist, $path, $edgePath);
                        while (true) {
                            var$21 = $edgePath.data;
                            $next = $path.data[$end];
                            $toAdd = $indexedWindyEdges.$get(var$21[$end]);
                            $windyReq.$addEdge1((($toAdd.$getEndpoints()).$getFirst()).$getId(), (($toAdd.$getEndpoints()).$getSecond()).$getId(), $rt_s(295), $toAdd.$getCost(), $toAdd.$getReverseCost(), var$21[$end], $toAdd.$isRequired());
                            if ($next == $curr)
                                break e;
                            $end = $next;
                        }
                    }
                }
                $i = $i + 1 | 0;
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $windyReq;
    }
    $e.$printStackTrace0();
    return null;
},
osi_WRPPSolver_Win_eliminateRedundantCycles = ($ans, $windyReq, $orig) => {
    let $hasSelfDummyArc, var$5, $a, $ansVertices, $n, $i, $v, $vNeighbors, $vNeighborsList, var$13, $dv, $dvNeighbors, $vdvConnections, $xij, $dvvConnections, $xji, $toRemove, $removedReqVDV, $removedReqDVV, $j, $windyReqEdges, $flowGraph, $isReq, $tempCost, $temp, $windyReqTemp, var$30, $flowanswer, $flowArcs, var$33, $u1, $u2, $removeCandidates, $indexToRemove, $changeDir, $replaceDir, $cost, $dummyAdded, $ansDepotId, $depot, $components, $extraVertices, $connectMe, $we, $windyReq2, $tour, $ansArcs, $origEdges,
    $m, $startId, $endId, $midPath, $dist, $path, $edgePath, var$59, var$60, $next, $nextEdge, $origTemp, $dummyArc, $e, $$je;
    osi_WRPPSolver_Win_$callClinit();
    a: {
        try {
            $hasSelfDummyArc = 0;
            var$5 = ($ans.$getEdges0()).$iterator();
            while (var$5.$hasNext()) {
                $a = var$5.$next();
                if ($a.$isRequired() && (($a.$getEndpoints()).$getFirst()).$getId() == (($a.$getEndpoints()).$getSecond()).$getId())
                    $hasSelfDummyArc = 1;
            }
            var$5 = ($ans.$getEdges0()).$iterator();
            while (var$5.$hasNext()) {
                $a = var$5.$next();
                $a.$isRequired();
            }
            $ansVertices = $ans.$getInternalVertexMap();
            $n = ($ans.$getVertices0()).$size();
            $i = 1;
            while ($i <= $n) {
                $v = $ansVertices.$get($i);
                $vNeighbors = $v.$getNeighbors0();
                $vNeighborsList = ju_ArrayList__init_();
                var$13 = ($vNeighbors.$keySet()).$iterator();
                while (var$13.$hasNext()) {
                    $dv = var$13.$next();
                    $vNeighborsList.$add2($dv);
                }
                var$13 = $vNeighborsList.$iterator();
                while (var$13.$hasNext()) {
                    $dv = var$13.$next();
                    $dvNeighbors = $dv.$getNeighbors0();
                    if ($v.$getId() < $dv.$getId() && $dvNeighbors.$containsKey($v)) {
                        $vdvConnections = $vNeighbors.$get1($dv);
                        $xij = $vdvConnections.$size();
                        $dvvConnections = $dvNeighbors.$get1($v);
                        $xji = $dvvConnections.$size();
                        if (($xij + $xji | 0) >= 3) {
                            $toRemove = $xij != $xji ? jl_Math_min($xij, $xji) : $xij - 1 | 0;
                            $removedReqVDV = 0;
                            $removedReqDVV = 0;
                            $j = 0;
                            while ($j < $toRemove) {
                                if (($vdvConnections.$get(0)).$isRequired())
                                    $removedReqVDV = 1;
                                else if (($dvvConnections.$get(0)).$isRequired())
                                    $removedReqDVV = 1;
                                $ans.$removeEdge($vdvConnections.$get(0));
                                $ans.$removeEdge($dvvConnections.$get(0));
                                $j = $j + 1 | 0;
                            }
                            if ($removedReqVDV) {
                                if ($vdvConnections.$size())
                                    ($vdvConnections.$get(0)).$setRequired(1);
                            } else if ($removedReqDVV && $dvvConnections.$size())
                                ($dvvConnections.$get(0)).$setRequired(1);
                        }
                    }
                }
                $i = $i + 1 | 0;
            }
            $windyReqEdges = $windyReq.$getInternalEdgeMap();
            $flowGraph = ogi_DirectedGraph__init_();
            $i = 1;
            while ($i <= $n) {
                $flowGraph.$addVertex1(ovi_DirectedVertex__init_($rt_s(296)));
                $i = $i + 1 | 0;
            }
            $i = 1;
            while ($i <= $n) {
                $v = $ansVertices.$get($i);
                $vNeighbors = $v.$getNeighbors0();
                var$5 = ($vNeighbors.$keySet()).$iterator();
                while (var$5.$hasNext()) {
                    $dv = var$5.$next();
                    $vdvConnections = $vNeighbors.$get1($dv);
                    $isReq = ($vdvConnections.$get(0)).$isRequired();
                    $xij = $vdvConnections.$size();
                    $tempCost = ($vdvConnections.$get(0)).$getCost();
                    if ($xij >= 3 && $isReq) {
                        $temp = $flowGraph.$constructEdge($dv.$getId(), $v.$getId(), $rt_s(297), (-2) * $tempCost | 0);
                        $temp.$setCapacity(jl_Math_floor(($xij - 1 | 0) / 2.0) | 0);
                        $flowGraph.$addEdge3($temp);
                    } else if ($xij >= 2 && !$isReq) {
                        $temp = $flowGraph.$constructEdge($dv.$getId(), $v.$getId(), $rt_s(298), (-2) * $tempCost | 0);
                        $temp.$setCapacity(jl_Math_floor($xij / 2.0) | 0);
                        $flowGraph.$addEdge3($temp);
                    } else if ($xij > 0) {
                        $windyReqTemp = $windyReqEdges.$get(($vdvConnections.$get(0)).$getMatchId());
                        var$30 = $windyReqTemp.$getCost() != $tempCost ? $windyReqTemp.$getCost() - $tempCost | 0 : $windyReqTemp.$getReverseCost() - $tempCost | 0;
                        $temp = $flowGraph.$constructEdge($dv.$getId(), $v.$getId(), $rt_s(299), var$30);
                        $temp.$setMatchId(($vdvConnections.$get(0)).$getMatchId());
                        $temp.$setCapacity($xij);
                        $flowGraph.$addEdge3($temp);
                    }
                }
                $i = $i + 1 | 0;
            }
            $flowanswer = osi_WRPPSolver_Win_solvePseudoMinCostFlow($flowGraph);
            $flowArcs = $flowGraph.$getInternalEdgeMap();
            $i = 1;
            while (true) {
                var$33 = $flowanswer.data;
                if ($i >= var$33.length)
                    break;
                b: {
                    $temp = $flowArcs.$get($i);
                    $u1 = $ansVertices.$get(($temp.$getTail()).$getId());
                    $u2 = $ansVertices.$get(($temp.$getHead()).$getId());
                    if (!(!($temp.$getLabel()).$equals($rt_s(297)) && !($temp.$getLabel()).$equals($rt_s(298)))) {
                        $removeCandidates = ($u2.$getNeighbors0()).$get1($u1);
                        $j = 0;
                        while ($j < var$33[$i]) {
                            $indexToRemove = 0;
                            while (($removeCandidates.$get($indexToRemove)).$isRequired()) {
                                $indexToRemove = $indexToRemove + 1 | 0;
                            }
                            $ans.$removeEdge($removeCandidates.$get($indexToRemove));
                            while (($removeCandidates.$get($indexToRemove)).$isRequired()) {
                                $indexToRemove = $indexToRemove + 1 | 0;
                            }
                            $ans.$removeEdge($removeCandidates.$get($indexToRemove));
                            $j = $j + 1 | 0;
                        }
                    } else if (var$33[$i] > 0) {
                        $removeCandidates = ($u2.$getNeighbors0()).$get1($u1);
                        $changeDir = $removeCandidates.$get(0);
                        $replaceDir = $windyReqEdges.$get($changeDir.$getMatchId());
                        $cost = $changeDir.$getCost() != $replaceDir.$getCost() ? $replaceDir.$getCost() : $replaceDir.$getReverseCost();
                        if ($changeDir.$getSecondEndpointId() == 2 && $changeDir.$getFirstEndpointId() == 8)
                            (jl_System_out()).$println1($rt_s(300));
                        $ans.$addEdge4(($changeDir.$getHead()).$getId(), ($changeDir.$getTail()).$getId(), $rt_s(301), $cost, $replaceDir.$isRequired());
                        $ans.$removeEdge($removeCandidates.$get(0));
                        $j = 1;
                        while (true) {
                            if ($j >= var$33[$i])
                                break b;
                            $ans.$addEdge4(($changeDir.$getHead()).$getId(), ($changeDir.$getTail()).$getId(), $rt_s(301), $cost, 0);
                            $ans.$removeEdge($removeCandidates.$get(0));
                            $j = $j + 1 | 0;
                        }
                    }
                }
                $i = $i + 1 | 0;
            }
            $dummyAdded = 0;
            $ansDepotId = $ans.$getDepotId();
            $depot = ($ans.$getInternalVertexMap()).$get($ansDepotId);
            if ((($depot.$getNeighbors0()).$keySet()).$isEmpty()) {
                $ans.$addEdge5($ansDepotId, $ansDepotId, 2, 1);
                $dummyAdded = 1;
            }
            $components = ogu_CommonAlgorithms_stronglyConnectedComponents0($ans);
            $extraVertices = 0;
            var$13 = ($ans.$getVertices0()).$iterator();
            while (var$13.$hasNext()) {
                $dv = var$13.$next();
                if (!$dv.$getInDegree() && !$dv.$getOutDegree())
                    $extraVertices = $extraVertices + 1 | 0;
            }
            c: {
                if (($components.data[0] - $extraVertices | 0) != 1) {
                    $connectMe = ogi_WindyGraph__init_();
                    $i = 1;
                    while ($i <= $n) {
                        $connectMe.$addVertex(ovi_WindyVertex__init_($rt_s(302)));
                        $i = $i + 1 | 0;
                    }
                    var$13 = ($ans.$getEdges0()).$iterator();
                    while (var$13.$hasNext()) {
                        $a = var$13.$next();
                        $connectMe.$addEdge6(($a.$getTail()).$getId(), ($a.$getHead()).$getId(), $rt_s(302), 100 * $a.$getCost() | 0, 100 * $a.$getCost() | 0, 1);
                    }
                    var$13 = ($orig.$getEdges0()).$iterator();
                    while (var$13.$hasNext()) {
                        $we = var$13.$next();
                        if (!$we.$isRequired())
                            $connectMe.$addEdge6((($we.$getEndpoints()).$getFirst()).$getId(), (($we.$getEndpoints()).$getSecond()).$getId(), $rt_s(303), $we.$getCost(), $we.$getReverseCost(), $we.$isRequired());
                    }
                    $windyReq2 = osi_WRPPSolver_Win_connectRequiredComponents($connectMe);
                    var$13 = ($windyReq2.$getEdges0()).$iterator();
                    while (true) {
                        if (!var$13.$hasNext())
                            break c;
                        $we = var$13.$next();
                        if (!$we.$isRequired()) {
                            $ans.$addEdge4((($we.$getEndpoints()).$getFirst()).$getId(), (($we.$getEndpoints()).$getSecond()).$getId(), $rt_s(304), $we.$getCost(), 0);
                            $ans.$addEdge4((($we.$getEndpoints()).$getSecond()).$getId(), (($we.$getEndpoints()).$getFirst()).$getId(), $rt_s(305), $we.$getReverseCost(), 0);
                        }
                    }
                }
            }
            $tour = ogu_CommonAlgorithms_tryHierholzer($ans);
            $ansArcs = $ans.$getInternalEdgeMap();
            $origEdges = $orig.$getInternalEdgeMap();
            $m = ($ans.$getEdges0()).$size();
            $startId = (-1);
            $endId = (-1);
            $midPath = 0;
            var$30 = $n + 1 | 0;
            $dist = $rt_createIntArray(var$30);
            $path = $rt_createIntArray(var$30);
            $edgePath = $rt_createIntArray(var$30);
            $i = 1;
            while (true) {
                var$59 = $rt_compare($i, $m);
                if (var$59 > 0)
                    break;
                $temp = $ansArcs.$get(($tour.$get($i - 1 | 0)).$intValue());
                if (!$temp.$isRequired() && $startId < 0) {
                    $startId = ($temp.$getTail()).$getId();
                    $midPath = 1;
                    ogu_CommonAlgorithms_dijkstrasAlgorithm($orig, $startId, $dist, $path, $edgePath);
                    if (!var$59) {
                        d: {
                            $endId = ($temp.$getHead()).$getId();
                            if ($startId != $endId) {
                                var$59 = $endId;
                                while (true) {
                                    var$60 = $edgePath.data;
                                    $next = $path.data[var$59];
                                    $nextEdge = var$60[var$59];
                                    $origTemp = $origEdges.$get($nextEdge);
                                    $cost = (($origTemp.$getEndpoints()).$getFirst()).$getId() == $next ? $origTemp.$getCost() : $origTemp.$getReverseCost();
                                    $ans.$addEdge4($next, var$59, $rt_s(306), $cost, 0);
                                    if ($next == $startId)
                                        break d;
                                    var$59 = $next;
                                }
                            }
                        }
                        $midPath = 0;
                    }
                    $ans.$removeEdge($temp);
                } else if ($temp.$isRequired() && $startId > 0 && $endId < 0) {
                    e: {
                        var$30 = ($temp.$getTail()).$getId();
                        if ($startId != var$30)
                            while (true) {
                                var$60 = $edgePath.data;
                                $next = $path.data[var$30];
                                $nextEdge = var$60[var$30];
                                $origTemp = $origEdges.$get($nextEdge);
                                $cost = (($origTemp.$getEndpoints()).$getFirst()).$getId() == $next ? $origTemp.$getCost() : $origTemp.$getReverseCost();
                                $ans.$addEdge4($next, var$30, $rt_s(306), $cost, 0);
                                if ($next == $startId)
                                    break e;
                                var$30 = $next;
                            }
                    }
                    $startId = (-1);
                    $endId = (-1);
                    $midPath = 0;
                } else if ($midPath) {
                    if (!var$59) {
                        f: {
                            $endId = ($temp.$getHead()).$getId();
                            if ($startId != $endId) {
                                var$59 = $endId;
                                while (true) {
                                    var$60 = $edgePath.data;
                                    $next = $path.data[var$59];
                                    $nextEdge = var$60[var$59];
                                    $origTemp = $origEdges.$get($nextEdge);
                                    $cost = (($origTemp.$getEndpoints()).$getFirst()).$getId() == $next ? $origTemp.$getCost() : $origTemp.$getReverseCost();
                                    $ans.$addEdge4($next, var$59, $rt_s(306), $cost, 0);
                                    if ($next == $startId)
                                        break f;
                                    var$59 = $next;
                                }
                            }
                        }
                        $midPath = 0;
                    }
                    $ans.$removeEdge($temp);
                }
                $i = $i + 1 | 0;
            }
            if (!$hasSelfDummyArc && $dummyAdded) {
                var$13 = $ans.$getVertex($ans.$getDepotId());
                $dummyArc = ((var$13.$getNeighbors0()).$get1(var$13)).$get(0);
                $ans.$removeEdge($dummyArc);
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_WRPPSolver_Win_constructOptimalWindyTour = $g => {
    let $n, $m, $flowGraph, $flowVertices, $windyEdges, $i, $e, $tempCost, $temp, var$11, $ans, var$13, $v, $flowanswer, $flowEdges, $gVertices, $tempVertex, var$19, $artificial, $j, $arcSet, $cost, $a, $$je;
    osi_WRPPSolver_Win_$callClinit();
    if (!ogu_CommonAlgorithms_isEulerian0($g))
        $rt_throw(jl_IllegalArgumentException__init_());
    a: {
        try {
            $n = ($g.$getVertices0()).$size();
            $m = ($g.$getEdges0()).$size();
            $flowGraph = ogi_DirectedGraph__init_0($n);
            $flowGraph.$setDepotId($g.$getDepotId());
            $flowVertices = $flowGraph.$getInternalVertexMap();
            $windyEdges = $g.$getInternalEdgeMap();
            $i = 1;
            while ($i <= $m) {
                $e = $windyEdges.$get($i);
                $tempCost = jl_Math_abs($e.$getCost() - $e.$getReverseCost() | 0);
                if ($e.$getCost() <= $e.$getReverseCost()) {
                    $temp = oli_Arc__init_($rt_s(244), ogu_Pair__init_($flowVertices.$get((($e.$getEndpoints()).$getSecond()).$getId()), $flowVertices.$get((($e.$getEndpoints()).$getFirst()).$getId())), $tempCost);
                    $temp.$setCapacity(2);
                    $temp.$setRequired($e.$isRequired());
                    $temp.$setMatchId($e.$getId());
                    $flowGraph.$addEdge3($temp);
                    var$11 = $temp.$getId();
                } else {
                    $temp = oli_Arc__init_($rt_s(244), ogu_Pair__init_($flowVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $flowVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $tempCost);
                    $temp.$setCapacity(2);
                    $temp.$setRequired($e.$isRequired());
                    $temp.$setMatchId($e.$getId());
                    $flowGraph.$addEdge3($temp);
                    var$11 = $temp.$getId();
                }
                $flowGraph.$addEdge7(oli_Arc__init_($rt_s(244), ogu_Pair__init_($flowVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $flowVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), 2 * $e.$getCost() | 0), var$11);
                if ($e.$getFirstEndpointId() != $e.$getSecondEndpointId())
                    $flowGraph.$addEdge7(oli_Arc__init_($rt_s(244), ogu_Pair__init_($flowVertices.$get((($e.$getEndpoints()).$getSecond()).$getId()), $flowVertices.$get((($e.$getEndpoints()).$getFirst()).$getId())), 2 * $e.$getReverseCost() | 0), var$11);
                $i = $i + 1 | 0;
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        b: {
            try {
                if (!ogu_CommonAlgorithms_isEulerian($flowGraph))
                    break b;
                $ans = ogi_DirectedGraph__init_0($n);
                $ans.$setDepotId($g.$getDepotId());
                $i = 1;
                while ($i <= $m) {
                    $e = $windyEdges.$get($i);
                    if ($e.$getCost() <= $e.$getReverseCost())
                        $ans.$addEdge6((($e.$getEndpoints()).$getFirst()).$getId(), (($e.$getEndpoints()).$getSecond()).$getId(), $rt_s(307), $e.$getCost(), $e.$getId(), $e.$isRequired());
                    else
                        $ans.$addEdge6((($e.$getEndpoints()).$getSecond()).$getId(), (($e.$getEndpoints()).$getFirst()).$getId(), $rt_s(307), $e.$getReverseCost(), $e.$getId(), $e.$isRequired());
                    $i = $i + 1 | 0;
                }
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $ans;
        }
        try {
            var$13 = ($flowGraph.$getVertices0()).$iterator();
            while (var$13.$hasNext()) {
                $v = var$13.$next();
                if ($v.$getDelta())
                    $v.$setDemand((-1) * $v.$getDelta() | 0);
            }
            $flowanswer = ogu_CommonAlgorithms_shortestSuccessivePathsMinCostNetworkFlow($flowGraph);
            $flowEdges = $flowGraph.$getInternalEdgeMap();
            $gVertices = $g.$getInternalVertexMap();
            $ans = ogi_DirectedGraph__init_();
            $i = 1;
            while ($i <= $n) {
                $tempVertex = ovi_DirectedVertex__init_($rt_s(307));
                $tempVertex.$setCoordinates(($gVertices.$get($i)).$getX(), ($gVertices.$get($i)).$getY());
                $ans.$addVertex1($tempVertex);
                $i = $i + 1 | 0;
            }
            $ans.$setDepotId($g.$getDepotId());
            $i = 1;
            while (true) {
                var$19 = $flowanswer.data;
                if ($i >= var$19.length)
                    break;
                c: {
                    $temp = $flowEdges.$get($i);
                    if (!$temp.$isCapacitySet()) {
                        $artificial = $flowEdges.$get($temp.$getMatchId());
                        if (($artificial.$getHead()).$getId() == ($temp.$getHead()).$getId() && var$19[$temp.$getMatchId()] == 2) {
                            $ans.$addEdge6(($temp.$getTail()).$getId(), ($temp.$getHead()).$getId(), $rt_s(307), $temp.$getCost() / 2 | 0, $artificial.$getMatchId(), $artificial.$isRequired());
                            $j = 1;
                            while ($j <= var$19[$i]) {
                                $ans.$addEdge6(($temp.$getTail()).$getId(), ($temp.$getHead()).$getId(), $rt_s(307), $temp.$getCost() / 2 | 0, $artificial.$getMatchId(), 0);
                                $j = $j + 1 | 0;
                            }
                        } else if (($artificial.$getHead()).$getId() == ($temp.$getTail()).$getId() && !var$19[$temp.$getMatchId()]) {
                            $ans.$addEdge6(($temp.$getTail()).$getId(), ($temp.$getHead()).$getId(), $rt_s(307), $temp.$getCost() / 2 | 0, $artificial.$getMatchId(), $artificial.$isRequired());
                            $j = 1;
                            while (true) {
                                if ($j > var$19[$i])
                                    break c;
                                $ans.$addEdge6(($temp.$getTail()).$getId(), ($temp.$getHead()).$getId(), $rt_s(307), $temp.$getCost() / 2 | 0, $artificial.$getMatchId(), 0);
                                $j = $j + 1 | 0;
                            }
                        }
                    }
                }
                $i = $i + 1 | 0;
            }
            if (!ogu_CommonAlgorithms_isEulerian($ans)) {
                osi_WRPPSolver_Win_LOGGER.$error($rt_s(308));
                ogu_CommonAlgorithms_isEulerian($ans);
            }
            $arcSet = $ans.$getEdges0();
            $cost = 0;
            var$13 = $arcSet.$iterator();
            while (var$13.$hasNext()) {
                $a = var$13.$next();
                $cost = $cost + $a.$getCost() | 0;
            }
            osi_WRPPSolver_Win_LOGGER.$debug((((jl_StringBuilder__init_()).$append4($rt_s(309))).$append2($cost)).$toString());
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
osi_WRPPSolver_Win_eulerAugment = ($fullGraph, $g) => {
    let $n, var$4, $dist, $path, $edgePath, $matchingGraph, var$9, $v, $oddVertices, $traverseIj, var$13, var$14, $v2, $costCandidate, $candidateKey, $e, $matchingSolution, $indexedEdges, var$21, $p, $curr, $end, var$25, $next, $nextEdge, $temp, $$je;
    osi_WRPPSolver_Win_$callClinit();
    a: {
        try {
            $n = ($fullGraph.$getVertices0()).$size();
            var$4 = $n + 1 | 0;
            $dist = $rt_createIntArray(var$4);
            $path = $rt_createIntArray(var$4);
            $edgePath = $rt_createIntArray(var$4);
            $matchingGraph = ogi_UndirectedGraph__init_();
            var$9 = ($g.$getVertices0()).$iterator();
            while (var$9.$hasNext()) {
                $v = var$9.$next();
                if (($v.$getDegree() % 2 | 0) == 1)
                    $matchingGraph.$addVertex0(ovi_UndirectedVertex__init_($rt_s(245)), $v.$getId());
            }
            $oddVertices = $matchingGraph.$getVertices0();
            $traverseIj = ju_HashMap__init_();
            var$13 = $oddVertices.$iterator();
            while (var$13.$hasNext()) {
                $v = var$13.$next();
                ogu_CommonAlgorithms_dijkstrasAlgorithm($fullGraph, $v.$getMatchId(), $dist, $path, $edgePath);
                var$14 = $oddVertices.$iterator();
                while (var$14.$hasNext()) {
                    $v2 = var$14.$next();
                    if ($v.$getId() == $v2.$getId())
                        continue;
                    $costCandidate = osi_WRPPSolver_Win_calculateAveragePathCost($fullGraph, $v.$getMatchId(), $v2.$getMatchId(), $path, $edgePath);
                    $candidateKey = ogu_Pair__init_(jl_Integer_valueOf($v2.$getId()), jl_Integer_valueOf($v.$getId()));
                    if (!($traverseIj.$containsKey($candidateKey) && $costCandidate >= ($traverseIj.$get1($candidateKey)).$getCost())) {
                        $traverseIj.$remove1($candidateKey);
                        $traverseIj.$put(ogu_Pair__init_(jl_Integer_valueOf($v.$getId()), jl_Integer_valueOf($v2.$getId())), oli_Edge__init_($rt_s(246), ogu_Pair__init_($v, $v2), 2.0 * $costCandidate | 0));
                    }
                }
            }
            var$9 = ($traverseIj.$values()).$iterator();
            while (var$9.$hasNext()) {
                $e = var$9.$next();
                $matchingGraph.$addEdge0($e);
            }
            $matchingSolution = ogu_CommonAlgorithms_minCostMatching($matchingGraph);
            $indexedEdges = $fullGraph.$getInternalEdgeMap();
            var$21 = $matchingSolution.$iterator();
            while (var$21.$hasNext()) {
                $p = var$21.$next();
                if (!$traverseIj.$containsKey(ogu_Pair__init_(jl_Integer_valueOf(($p.$getFirst()).$getId()), jl_Integer_valueOf(($p.$getSecond()).$getId())))) {
                    $curr = ($p.$getSecond()).$getMatchId();
                    $end = ($p.$getFirst()).$getMatchId();
                } else {
                    $curr = ($p.$getFirst()).$getMatchId();
                    $end = ($p.$getSecond()).$getMatchId();
                }
                ogu_CommonAlgorithms_dijkstrasAlgorithm($fullGraph, $curr, $dist, $path, $edgePath);
                while (true) {
                    var$25 = $edgePath.data;
                    $next = $path.data[$end];
                    $nextEdge = var$25[$end];
                    $temp = $indexedEdges.$get($nextEdge);
                    $g.$addEdge1((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(247), $temp.$getCost(), $temp.$getReverseCost(), $nextEdge, $temp.$isRequired());
                    if ($next == $curr)
                        break;
                    $end = $next;
                }
            }
            if (!ogu_CommonAlgorithms_isEulerian0($g))
                osi_WRPPSolver_Win_LOGGER.$error($rt_s(310));
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_WRPPSolver_Win_solvePseudoMinCostFlow = $g => {
    let $copy, $n, $m, var$5, $ans, $realIds, $artIds, $i, $foundImprovement, $flowArcs, $dist, $path, $edgePath, $e, $maxFlow, $lim, $problemEdgePath, $temp, var$20, var$21, var$22, $temp2, $$je;
    osi_WRPPSolver_Win_$callClinit();
    a: {
        try {
            $copy = $g.$getDeepCopy0();
            $n = ($copy.$getVertices0()).$size();
            $m = ($copy.$getEdges0()).$size();
            var$5 = $m + 1 | 0;
            $ans = $rt_createIntArray(var$5);
            $realIds = $rt_createIntArray(var$5);
            $artIds = $rt_createIntArray(var$5);
            $i = 1;
            while ($i <= $m) {
                $realIds.data[$i] = $i;
                $i = $i + 1 | 0;
            }
            $foundImprovement = 1;
            $flowArcs = $copy.$getInternalEdgeMap();
            while ($foundImprovement) {
                $foundImprovement = 0;
                var$5 = $n + 1 | 0;
                $dist = $rt_createIntArray(var$5);
                $path = $rt_createIntArray(var$5);
                $edgePath = $rt_createIntArray(var$5);
                try {
                    ogu_CommonAlgorithms_slfShortestPaths($copy, $copy.$getDepotId(), $dist, $path, $edgePath);
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof oe_NegativeCycleException) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $foundImprovement = 1;
                $maxFlow = 2147483647;
                $lim = ($e.$getViolatingEdgePath()).data.length;
                $problemEdgePath = $e.$getViolatingEdgePath();
                $i = 0;
                while ($i < $lim) {
                    $temp = $flowArcs.$get($problemEdgePath.data[$i]);
                    if ($temp.$getCapacity() < $maxFlow)
                        $maxFlow = $temp.$getCapacity();
                    $i = $i + 1 | 0;
                }
                $i = 0;
                while ($i < $lim) {
                    var$20 = $artIds.data;
                    $temp = $flowArcs.$get($problemEdgePath.data[$i]);
                    if (var$20[$temp.$getMatchId()] == $temp.$getId()) {
                        var$21 = $realIds.data;
                        var$22 = $ans.data;
                        var$5 = $temp.$getMatchId();
                        var$22[var$5] = var$22[var$5] - $maxFlow | 0;
                        if (!var$21[$temp.$getMatchId()]) {
                            $temp2 = oli_Arc__init_($rt_s(311), ogu_Pair__init_($temp.$getHead(), $temp.$getTail()),  -$temp.$getCost() | 0);
                            $temp2.$setCapacity($maxFlow);
                            $copy.$addEdge7($temp2, $temp.$getMatchId());
                            var$21[$temp.$getMatchId()] = $temp2.$getId();
                        } else {
                            $temp2 = $flowArcs.$get(var$21[$temp.$getMatchId()]);
                            if ($temp2.$isCapacitySet())
                                $temp2.$setCapacity($temp2.$getCapacity() + $maxFlow | 0);
                        }
                        $temp.$setCapacity($temp.$getCapacity() - $maxFlow | 0);
                        if (!$temp.$getCapacity()) {
                            var$20[$temp.$getMatchId()] = 0;
                            $copy.$removeEdge($temp);
                        }
                    } else {
                        var$21 = $realIds.data;
                        if (var$21[$temp.$getMatchId()] != $temp.$getId())
                            osi_WRPPSolver_Win_LOGGER.$error($rt_s(312));
                        else {
                            var$22 = $ans.data;
                            var$5 = $temp.$getMatchId();
                            var$22[var$5] = var$22[var$5] + $maxFlow | 0;
                            if (var$20[$temp.$getMatchId()]) {
                                $temp2 = $flowArcs.$get(var$20[$temp.$getMatchId()]);
                                $temp2.$setCapacity($temp2.$getCapacity() + $maxFlow | 0);
                            } else {
                                $temp2 = oli_Arc__init_($rt_s(311), ogu_Pair__init_($temp.$getHead(), $temp.$getTail()),  -$temp.$getCost() | 0);
                                $temp2.$setCapacity($maxFlow);
                                $copy.$addEdge7($temp2, $temp.$getMatchId());
                                var$20[$temp.$getMatchId()] = $temp2.$getId();
                            }
                            if ($temp.$isCapacitySet()) {
                                $temp.$setCapacity($temp.$getCapacity() - $maxFlow | 0);
                                if (!$temp.$getCapacity()) {
                                    var$21[$temp.$getMatchId()] = 0;
                                    $copy.$removeEdge($temp);
                                }
                            }
                        }
                    }
                    $i = $i + 1 | 0;
                }
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
osi_WRPPSolver_Win_repairSolution = ($dg, $wg) => {
    let $dist, $path, $edgePath, $toRemove, $toAdd, var$8, var$9, $a, $i, $j, var$13, var$14, $next, $newArc, var$17, $e, $$je;
    osi_WRPPSolver_Win_$callClinit();
    ($wg.$getVertices0()).$size();
    $dist = $wg.$getAllPairsDistMatrix();
    $path = $wg.$getAllPairsPathMatrix();
    $edgePath = $wg.$getAllPairsEdgePathMatrix();
    $toRemove = ju_HashSet__init_();
    $toAdd = ju_HashSet__init_();
    a: {
        try {
            var$8 = ($dg.$getEdges0()).$iterator();
            while (var$8.$hasNext()) {
                b: {
                    var$9 = $dist.data;
                    $a = var$8.$next();
                    $i = $a.$getFirstEndpointId();
                    $j = $a.$getSecondEndpointId();
                    if ($a.$getCost() > var$9[$i].data[$j]) {
                        $toRemove.$add2($a);
                        if ($i != $j)
                            while (true) {
                                var$13 = $path.data;
                                var$14 = $edgePath.data;
                                $next = var$13[$i].data[$j];
                                $newArc = $dg.$constructEdge($i, $next, $rt_s(33), var$9[$i].data[$next]);
                                $newArc.$setRequired(($wg.$getEdge(var$14[$i].data[$j])).$isRequired());
                                $toAdd.$add2($newArc);
                                if ($next == $j)
                                    break b;
                                $i = $next;
                            }
                    }
                }
            }
            var$17 = $toAdd.$iterator();
            while (var$17.$hasNext()) {
                $a = var$17.$next();
                $dg.$addEdge3($a);
            }
            var$17 = $toRemove.$iterator();
            while (var$17.$hasNext()) {
                $a = var$17.$next();
                $dg.$removeEdge($a);
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return;
    }
    $e.$printStackTrace0();
},
osi_WRPPSolver_Win_calculateAveragePathCost = ($g, $i, $j, $path, $edgePath) => {
    let $ans, $indexedWindyEdges, var$8, $next, $temp;
    osi_WRPPSolver_Win_$callClinit();
    $ans = 0;
    $indexedWindyEdges = $g.$getInternalEdgeMap();
    while (true) {
        var$8 = $edgePath.data;
        $next = $path.data[$j];
        $temp = $indexedWindyEdges.$get(var$8[$j]);
        $ans = $ans + ($temp.$getCost() + $temp.$getReverseCost() | 0) | 0;
        if ($next == $i)
            break;
        $j = $next;
    }
    return $ans / 2.0;
},
osi_WRPPSolver_Win_solve = $this => {
    let $copy, $windyReq, $ans, $tour, $eulerTour, $indexedEdges, $i, $ret, $e, $$je;
    a: {
        try {
            $copy = ($this.$mInstance.$getGraph()).$getDeepCopy();
            $windyReq = osi_WRPPSolver_Win_connectRequiredComponents($copy);
            osi_WRPPSolver_Win_eulerAugment($copy, $windyReq);
            $ans = osi_WRPPSolver_Win_constructOptimalWindyTour($windyReq);
            osi_WRPPSolver_Win_eliminateRedundantCycles($ans, $windyReq, $copy);
            osi_WRPPSolver_Win_repairSolution($ans, $copy);
            $tour = ogu_CommonAlgorithms_tryHierholzer($ans);
            $eulerTour = ori_Tour__init_();
            $indexedEdges = $ans.$getInternalEdgeMap();
            $i = 0;
            while ($i < $tour.$size()) {
                $eulerTour.$appendEdge0($indexedEdges.$get(($tour.$get($i)).$intValue()));
                $i = $i + 1 | 0;
            }
            $this.$mInstance.$setSol(ogu_Utils_reclaimTour($eulerTour, $this.$mInstance.$getGraph()));
            $ret = ju_HashSet__init_();
            $ret.$add2($eulerTour);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ret;
    }
    $e.$printStackTrace0();
    return null;
},
osi_WRPPSolver_Win_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_WINDY;
    var$3 = null;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
},
osi_WRPPSolver_Win_getSolverName = $this => {
    return $rt_s(313);
},
osi_WRPPSolver_Win_checkGraphRequirements = $this => {
    let $mGraph;
    if ($this.$mInstance.$getGraph() === null)
        return 0;
    $mGraph = $this.$mInstance.$getGraph();
    if (ogu_CommonAlgorithms_isConnected($mGraph))
        return 1;
    return 0;
},
osi_WRPPSolver_Win__clinit_ = () => {
    osi_WRPPSolver_Win_LOGGER = ou_SimpleLogger_getLogger($rt_cls(osi_WRPPSolver_Win));
};
function gt_TIntArrayList() {
    let a = this; jl_Object.call(a);
    a.$_data = null;
    a.$_pos = 0;
}
let gt_TIntArrayList__init_3 = $this => {
    jl_Object__init_($this);
},
gt_TIntArrayList__init_ = () => {
    let var_0 = new gt_TIntArrayList();
    gt_TIntArrayList__init_3(var_0);
    return var_0;
},
gt_TIntArrayList__init_1 = ($this, $capacity) => {
    jl_Object__init_($this);
    $this.$_data = $rt_createIntArray($capacity);
    $this.$_pos = 0;
},
gt_TIntArrayList__init_4 = var_0 => {
    let var_1 = new gt_TIntArrayList();
    gt_TIntArrayList__init_1(var_1, var_0);
    return var_1;
},
gt_TIntArrayList__init_2 = ($this, $values) => {
    gt_TIntArrayList__init_1($this, jl_Math_max($values.data.length, 4));
    $this.$add3($values);
},
gt_TIntArrayList__init_0 = var_0 => {
    let var_1 = new gt_TIntArrayList();
    gt_TIntArrayList__init_2(var_1, var_0);
    return var_1;
},
gt_TIntArrayList_ensureCapacity = ($this, $capacity) => {
    let $newCap, $tmp_0;
    if ($this.$_data === null)
        $this.$_data = $rt_createIntArray(jl_Math_max(4, $capacity));
    if ($capacity > $this.$_data.data.length) {
        $newCap = jl_Math_max($this.$_data.data.length << 1, $capacity);
        $tmp_0 = $rt_createIntArray($newCap);
        jl_System_fastArraycopy($this.$_data, 0, $tmp_0, 0, $this.$_data.data.length);
        $this.$_data = $tmp_0;
    }
},
gt_TIntArrayList_size = $this => {
    return $this.$_pos;
},
gt_TIntArrayList_isEmpty = $this => {
    return $this.$_pos ? 0 : 1;
},
gt_TIntArrayList_add1 = ($this, $val) => {
    let var$2, var$3;
    $this.$ensureCapacity($this.$_pos + 1 | 0);
    var$2 = $this.$_data.data;
    var$3 = $this.$_pos;
    $this.$_pos = var$3 + 1 | 0;
    var$2[var$3] = $val;
},
gt_TIntArrayList_add = ($this, $vals) => {
    $this.$add4($vals, 0, $vals.data.length);
},
gt_TIntArrayList_add0 = ($this, $vals, $offset, $length) => {
    $this.$ensureCapacity($this.$_pos + $length | 0);
    jl_System_fastArraycopy($vals, $offset, $this.$_data, $this.$_pos, $length);
    $this.$_pos = $this.$_pos + $length | 0;
},
gt_TIntArrayList_get = ($this, $offset) => {
    if ($offset >= $this.$_pos)
        $rt_throw(jl_ArrayIndexOutOfBoundsException__init_0($offset));
    return $this.$_data.data[$offset];
},
gt_TIntArrayList_toNativeArray0 = $this => {
    return $this.$toNativeArray(0, $this.$_pos);
},
gt_TIntArrayList_toNativeArray = ($this, $offset, $len) => {
    let $rv;
    $rv = $rt_createIntArray($len);
    $this.$toNativeArray0($rv, $offset, $len);
    return $rv;
},
gt_TIntArrayList_toNativeArray1 = ($this, $dest, $offset, $len) => {
    if (!$len)
        return;
    if ($offset >= 0 && $offset < $this.$_pos) {
        jl_System_fastArraycopy($this.$_data, $offset, $dest, 0, $len);
        return;
    }
    $rt_throw(jl_ArrayIndexOutOfBoundsException__init_0($offset));
},
gt_TIntArrayList_sort = $this => {
    if (!$this.$isEmpty())
        ju_Arrays_sort1($this.$_data, 0, $this.$_pos);
};
function jur_AbstractCharClass$LazyJavaLetter$1() {
    jur_AbstractCharClass.call(this);
    this.$this$027 = null;
}
let jur_AbstractCharClass$LazyJavaLetter$1__init_ = ($this, $this$0) => {
    $this.$this$027 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaLetter$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaLetter$1();
    jur_AbstractCharClass$LazyJavaLetter$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaLetter$1_contains = ($this, $ch) => {
    return jl_Character_isLetter($ch);
},
jur_ReluctantQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_ReluctantQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_ReluctantQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_ReluctantQuantifierSet();
    jur_ReluctantQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_ReluctantQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    while (true) {
        var$4 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if (var$4 >= 0)
            break;
        if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$getRightBound()) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            $stringIndex = $stringIndex + var$4 | 0;
        }
        if (var$4 < 1)
            return (-1);
    }
    return var$4;
},
otji_JS = $rt_classWithoutFields();
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$037 = null;
}
let jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1__init_ = ($this, $this$0) => {
    $this.$this$037 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains = ($this, $ch) => {
    return jl_Character_isUnicodeIdentifierStart($ch);
},
otciu_UnicodeHelper = $rt_classWithoutFields(),
otciu_UnicodeHelper_decodeIntPairsDiff = $text => {
    let $flow, $sz, $data, $j, $lastKey, $lastValue, $i, var$9, var$10;
    $flow = otci_CharFlow__init_0($text.$toCharArray());
    $sz = otci_Base46_decodeUnsigned($flow);
    $data = $rt_createIntArray($sz * 2 | 0);
    $j = 0;
    $lastKey = 0;
    $lastValue = 0;
    $i = 0;
    while ($i < $sz) {
        var$9 = $data.data;
        $lastKey = $lastKey + otci_Base46_decode($flow) | 0;
        $lastValue = $lastValue + otci_Base46_decode($flow) | 0;
        var$10 = $j + 1 | 0;
        var$9[$j] = $lastKey;
        $j = var$10 + 1 | 0;
        var$9[var$10] = $lastValue;
        $i = $i + 1 | 0;
    }
    return $data;
},
otciu_UnicodeHelper_decodeCaseMapping = $text => {
    let $flow, $sz, $data, $last, $i, var$7, var$8;
    $flow = otci_CharFlow__init_0($text.$toCharArray());
    $sz = otci_Base46_decodeUnsigned($flow);
    $data = $rt_createIntArray($sz * 2 | 0);
    $last = 0;
    $i = 0;
    while ($i < $sz) {
        var$7 = $data.data;
        $last = $last + otci_Base46_decodeUnsigned($flow) | 0;
        var$8 = $i * 2 | 0;
        var$7[var$8] = $last;
        var$7[var$8 + 1 | 0] = otci_Base46_decode($flow);
        $i = $i + 1 | 0;
    }
    return $data;
},
otciu_UnicodeHelper_createCharMapping = $data => {
    let $result, $last, $lastValue, $i, var$6, var$7, $key, $value, var$10;
    $result = $rt_createIntArray(65536);
    $last = 0;
    $lastValue = 0;
    $i = 0;
    a: {
        while (true) {
            var$6 = $data.data;
            if ($i >= var$6.length)
                break a;
            var$7 = $result.data;
            $key = var$6[$i];
            $value = var$6[$i + 1 | 0];
            var$10 = var$7.length;
            if ($key < var$10)
                var$10 = $key;
            else if ($key == $last)
                break;
            ju_Arrays_fill1($result, $last, var$10, $lastValue);
            $i = $i + 2 | 0;
            $last = var$10;
            $lastValue = $value;
        }
    }
    return otciu_CharMapping__init_0($data, $result);
},
otciu_UnicodeHelper_decodeByte = $c => {
    if ($c > 92)
        return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
    if ($c <= 34)
        return ($c - 32 | 0) << 24 >> 24;
    return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
},
otciu_UnicodeHelper_extractRle = $encoded => {
    let $ranges, $buffer, $index, $rangeIndex, $codePoint, $i, $b, $count, $pos, $j, $digit, var$13, var$14, var$15, var$16, var$17;
    $ranges = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
    $buffer = $rt_createByteArray(16384);
    $index = 0;
    $rangeIndex = 0;
    $codePoint = 0;
    $i = 0;
    while ($i < $encoded.$length()) {
        $b = otciu_UnicodeHelper_decodeByte($encoded.$charAt($i));
        if ($b == 64) {
            $i = $i + 1 | 0;
            $b = otciu_UnicodeHelper_decodeByte($encoded.$charAt($i));
            $count = 0;
            $pos = 1;
            $j = 0;
            while ($j < 3) {
                $i = $i + 1 | 0;
                $digit = otciu_UnicodeHelper_decodeByte($encoded.$charAt($i));
                $count = $count | $rt_imul($pos, $digit);
                $pos = $pos * 64 | 0;
                $j = $j + 1 | 0;
            }
        } else if ($b < 32)
            $count = 1;
        else {
            $b = ($b - 32 | 0) << 24 >> 24;
            $i = $i + 1 | 0;
            $count = otciu_UnicodeHelper_decodeByte($encoded.$charAt($i));
        }
        if (!$b && $count >= 128) {
            if ($index > 0) {
                var$13 = $ranges.data;
                var$14 = $rangeIndex + 1 | 0;
                var$13[$rangeIndex] = otciu_UnicodeHelper$Range__init_0($codePoint, $codePoint + $index | 0, ju_Arrays_copyOf0($buffer, $index));
                $rangeIndex = var$14;
            }
            $codePoint = $codePoint + ($index + $count | 0) | 0;
            $index = 0;
        } else {
            var$15 = $buffer.data;
            var$14 = $index + $count | 0;
            if (var$14 < var$15.length)
                var$16 = $rangeIndex;
            else {
                var$13 = $ranges.data;
                var$16 = $rangeIndex + 1 | 0;
                var$13[$rangeIndex] = otciu_UnicodeHelper$Range__init_0($codePoint, $codePoint + $index | 0, ju_Arrays_copyOf0($buffer, $index));
                $codePoint = $codePoint + var$14 | 0;
                $index = 0;
            }
            while (true) {
                var$14 = $count + (-1) | 0;
                if ($count <= 0)
                    break;
                var$17 = $index + 1 | 0;
                var$15[$index] = $b;
                $index = var$17;
                $count = var$14;
            }
            $rangeIndex = var$16;
        }
        $i = $i + 1 | 0;
    }
    return ju_Arrays_copyOf($ranges, $rangeIndex);
},
ju_Objects = $rt_classWithoutFields(),
ju_Objects_equals = ($a, $b) => {
    if ($a === $b)
        return 1;
    return $a !== null ? $a.$equals($b) : $b !== null ? 0 : 1;
},
ju_Objects_hashCode = $o => {
    return $o !== null ? $o.$hashCode0() : 0;
},
ju_Objects_toString = $o => {
    return ju_Objects_toString0($o, $rt_s(24));
},
ju_Objects_toString0 = ($o, $nullDefault) => {
    if ($o !== null)
        $nullDefault = $o.$toString();
    return $nullDefault;
},
ju_Objects_deepEquals = ($a, $b) => {
    if ($a === $b)
        return 1;
    if ($a === null)
        return $b !== null ? 0 : 1;
    if ($rt_isInstance($a, $rt_arraycls($rt_booleancls)))
        return $rt_isInstance($b, $rt_arraycls($rt_booleancls)) && ju_Arrays_equals1($a, $b) ? 1 : 0;
    if ($rt_isInstance($b, $rt_arraycls($rt_booleancls)))
        return 0;
    if ($rt_isInstance($a, $rt_arraycls($rt_bytecls)))
        return $rt_isInstance($b, $rt_arraycls($rt_bytecls)) && ju_Arrays_equals2($a, $b) ? 1 : 0;
    if ($rt_isInstance($b, $rt_arraycls($rt_bytecls)))
        return 0;
    if ($rt_isInstance($a, $rt_arraycls($rt_shortcls)))
        return $rt_isInstance($b, $rt_arraycls($rt_shortcls)) && ju_Arrays_equals3($a, $b) ? 1 : 0;
    if ($rt_isInstance($b, $rt_arraycls($rt_shortcls)))
        return 0;
    if ($rt_isInstance($a, $rt_arraycls($rt_intcls)))
        return $rt_isInstance($b, $rt_arraycls($rt_intcls)) && ju_Arrays_equals($a, $b) ? 1 : 0;
    if ($rt_isInstance($b, $rt_arraycls($rt_intcls)))
        return 0;
    if ($rt_isInstance($a, $rt_arraycls($rt_charcls)))
        return $rt_isInstance($b, $rt_arraycls($rt_charcls)) && ju_Arrays_equals5($a, $b) ? 1 : 0;
    if ($rt_isInstance($b, $rt_arraycls($rt_charcls)))
        return 0;
    if ($rt_isInstance($a, $rt_arraycls($rt_floatcls)))
        return $rt_isInstance($b, $rt_arraycls($rt_floatcls)) && ju_Arrays_equals0($a, $b) ? 1 : 0;
    if ($rt_isInstance($b, $rt_arraycls($rt_floatcls)))
        return 0;
    if ($rt_isInstance($a, $rt_arraycls($rt_doublecls)))
        return $rt_isInstance($b, $rt_arraycls($rt_doublecls)) && ju_Arrays_equals4($a, $b) ? 1 : 0;
    if ($rt_isInstance($b, $rt_arraycls($rt_doublecls)))
        return 0;
    if (!$rt_isInstance($a, $rt_arraycls(jl_Object))) {
        if (!$rt_isInstance($b, $rt_arraycls(jl_Object)))
            return $a.$equals($b);
        return 0;
    }
    return $rt_isInstance($b, $rt_arraycls(jl_Object)) && ju_Arrays_deepEquals($a, $b) ? 1 : 0;
},
ju_Objects_checkFromIndexSize = ($fromIndex, $size, $length) => {
    if ($fromIndex >= 0 && $size >= 0 && $size <= ($length - $fromIndex | 0))
        return $fromIndex;
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
ogu_Utils$DijkstrasComparator = $rt_classWithoutFields(),
ogu_Utils$DijkstrasComparator__init_0 = $this => {
    jl_Object__init_($this);
},
ogu_Utils$DijkstrasComparator__init_ = () => {
    let var_0 = new ogu_Utils$DijkstrasComparator();
    ogu_Utils$DijkstrasComparator__init_0(var_0);
    return var_0;
},
ogu_Utils$DijkstrasComparator_compare0 = ($this, $arg0, $arg1) => {
    if (($arg0.$getSecond()).$intValue() > ($arg1.$getSecond()).$intValue())
        return 1;
    if (($arg0.$getSecond()).$intValue() >= ($arg1.$getSecond()).$intValue())
        return 0;
    return (-1);
},
ogu_Utils$DijkstrasComparator_compare = ($this, var$1, var$2) => {
    return $this.$compare2(var$1, var$2);
},
jur_AbstractCharClass$LazyGraph = $rt_classWithoutFields(jur_AbstractCharClass$LazyAlnum),
jur_AbstractCharClass$LazyGraph__init_ = $this => {
    jur_AbstractCharClass$LazyAlnum__init_($this);
},
jur_AbstractCharClass$LazyGraph__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyGraph();
    jur_AbstractCharClass$LazyGraph__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyGraph_computeValue = $this => {
    return (((jur_AbstractCharClass$LazyAlnum_computeValue($this)).$add0(33, 64)).$add0(91, 96)).$add0(123, 126);
},
jur_AbstractCharClass$LazyPrint = $rt_classWithoutFields(jur_AbstractCharClass$LazyGraph),
jur_AbstractCharClass$LazyPrint__init_ = $this => {
    jur_AbstractCharClass$LazyGraph__init_($this);
},
jur_AbstractCharClass$LazyPrint__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyPrint();
    jur_AbstractCharClass$LazyPrint__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPrint_computeValue = $this => {
    return (jur_AbstractCharClass$LazyGraph_computeValue($this)).$add(32);
},
jur_AbstractCharClass$LazyJavaSpaceChar = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaSpaceChar__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaSpaceChar__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
    jur_AbstractCharClass$LazyJavaSpaceChar__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaSpaceChar_computeValue = $this => {
    return jur_AbstractCharClass$LazyJavaSpaceChar$1__init_0($this);
},
ju_Map$Entry = $rt_classWithoutFields(0);
function ju_MapEntry() {
    let a = this; jl_Object.call(a);
    a.$key = null;
    a.$value = null;
}
let ju_MapEntry__init_ = ($this, $theKey, $theValue) => {
    jl_Object__init_($this);
    $this.$key = $theKey;
    $this.$value = $theValue;
},
ju_MapEntry__init_0 = (var_0, var_1) => {
    let var_2 = new ju_MapEntry();
    ju_MapEntry__init_(var_2, var_0, var_1);
    return var_2;
},
ju_MapEntry_equals = ($this, $object) => {
    let $entry;
    if ($this === $object)
        return 1;
    if (!$rt_isInstance($object, ju_Map$Entry))
        return 0;
    $entry = $object;
    return ju_Objects_equals($this.$key, $entry.$getKey()) && ju_Objects_equals($this.$value, $entry.$getValue0()) ? 1 : 0;
},
ju_MapEntry_getKey = $this => {
    return $this.$key;
},
ju_MapEntry_getValue = $this => {
    return $this.$value;
},
ju_MapEntry_hashCode = $this => {
    return ju_Objects_hashCode($this.$key) ^ ju_Objects_hashCode($this.$value);
},
ju_MapEntry_toString = $this => {
    let var$1, var$2, var$3;
    var$1 = jl_String_valueOf($this.$key);
    var$2 = jl_String_valueOf($this.$value);
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append0(jl_StringBuilder_append(var$3, var$1), 61), var$2);
    return jl_StringBuilder_toString(var$3);
};
function ju_HashMap$HashEntry() {
    let a = this; ju_MapEntry.call(a);
    a.$origKeyHash = 0;
    a.$next3 = null;
}
let ju_HashMap$HashEntry__init_ = ($this, $theKey, $hash) => {
    ju_MapEntry__init_($this, $theKey, null);
    $this.$origKeyHash = $hash;
},
ju_HashMap$HashEntry__init_0 = (var_0, var_1) => {
    let var_2 = new ju_HashMap$HashEntry();
    ju_HashMap$HashEntry__init_(var_2, var_0, var_1);
    return var_2;
},
jur_PositiveLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_PositiveLookBehind__init_ = ($this, $children, $fSet) => {
    jur_AtomicJointSet__init_($this, $children, $fSet);
},
jur_PositiveLookBehind__init_0 = (var_0, var_1) => {
    let var_2 = new jur_PositiveLookBehind();
    jur_PositiveLookBehind__init_(var_2, var_0, var_1);
    return var_2;
},
jur_PositiveLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $leftBound, $shift, $i, $e;
    $size = $this.$children.$size();
    $leftBound = !$matchResult.$hasTransparentBounds() ? $matchResult.$getLeftBound() : 0;
    a: {
        $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0) {
            $matchResult.$setConsumed($this.$groupIndex, $stringIndex);
            $i = 0;
            while (true) {
                if ($i >= $size)
                    break a;
                $e = $this.$children.$get($i);
                if ($e.$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                    $matchResult.$setConsumed($this.$groupIndex, (-1));
                    return $shift;
                }
                $i = $i + 1 | 0;
            }
        }
    }
    return (-1);
},
jur_PositiveLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PositiveLookBehind_getName = $this => {
    return $rt_s(314);
},
ju_Comparator$NaturalOrder = $rt_classWithoutFields(),
ju_Comparator$NaturalOrder_INSTANCE = null,
ju_Comparator$NaturalOrder_$callClinit = () => {
    ju_Comparator$NaturalOrder_$callClinit = $rt_eraseClinit(ju_Comparator$NaturalOrder);
    ju_Comparator$NaturalOrder__clinit_();
},
ju_Comparator$NaturalOrder__init_ = $this => {
    ju_Comparator$NaturalOrder_$callClinit();
    jl_Object__init_($this);
},
ju_Comparator$NaturalOrder__init_0 = () => {
    let var_0 = new ju_Comparator$NaturalOrder();
    ju_Comparator$NaturalOrder__init_(var_0);
    return var_0;
},
ju_Comparator$NaturalOrder_compare = ($this, $o1, $o2) => {
    return $o1.$compareTo0($o2);
},
ju_Comparator$NaturalOrder_instance = () => {
    ju_Comparator$NaturalOrder_$callClinit();
    return ju_Comparator$NaturalOrder_INSTANCE;
},
ju_Comparator$NaturalOrder__clinit_ = () => {
    ju_Comparator$NaturalOrder_INSTANCE = ju_Comparator$NaturalOrder__init_0();
};
function jur_SequenceSet() {
    let a = this; jur_LeafSet.call(a);
    a.$string = null;
    a.$leftToRight = null;
    a.$rightToLeft = null;
}
let jur_SequenceSet__init_ = ($this, $substring) => {
    let $j;
    jur_LeafSet__init_($this);
    $this.$string = $substring.$toString();
    $this.$charCount0 = $substring.$length();
    $this.$leftToRight = jur_SequenceSet$IntHash__init_($this.$charCount0);
    $this.$rightToLeft = jur_SequenceSet$IntHash__init_($this.$charCount0);
    $j = 0;
    while ($j < ($this.$charCount0 - 1 | 0)) {
        $this.$leftToRight.$put0($this.$string.$charAt($j), ($this.$charCount0 - $j | 0) - 1 | 0);
        $this.$rightToLeft.$put0($this.$string.$charAt(($this.$charCount0 - $j | 0) - 1 | 0), ($this.$charCount0 - $j | 0) - 1 | 0);
        $j = $j + 1 | 0;
    }
},
jur_SequenceSet__init_0 = var_0 => {
    let var_1 = new jur_SequenceSet();
    jur_SequenceSet__init_(var_1, var_0);
    return var_1;
},
jur_SequenceSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$startsWith($testString, $strIndex) ? (-1) : $this.$charCount0;
},
jur_SequenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $strLength, var$5;
    $strLength = $matchResult.$getRightBound();
    while (true) {
        if ($strIndex > $strLength)
            return (-1);
        var$5 = $this.$indexOf1($testString, $strIndex, $strLength);
        if (var$5 < 0)
            return (-1);
        if ($this.$next2.$matches(var$5 + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $strIndex = var$5 + 1 | 0;
    }
    return var$5;
},
jur_SequenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let var$5;
    while (true) {
        if ($lastIndex < $strIndex)
            return (-1);
        var$5 = $this.$lastIndexOf($testString, $strIndex, $lastIndex);
        if (var$5 < 0)
            return (-1);
        if ($this.$next2.$matches(var$5 + $this.$charCount0 | 0, $testString, $matchResult) >= 0)
            break;
        $lastIndex = var$5 + (-1) | 0;
    }
    return var$5;
},
jur_SequenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$string;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(315)), var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_SequenceSet_first = ($this, $set) => {
    let var$2, var$3, var$4, var$5, var$6;
    if ($set instanceof jur_CharSet)
        return $set.$getChar() != $this.$string.$charAt(0) ? 0 : 1;
    if ($set instanceof jur_RangeSet)
        return $set.$accepts(0, $this.$string.$substring(0, 1)) <= 0 ? 0 : 1;
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        a: {
            if ($this.$string.$length() > 1) {
                var$2 = $set;
                var$3 = var$2.$getCodePoint();
                var$4 = $this.$string.$charAt(0);
                var$2 = $this.$string;
                var$5 = var$2.$charAt(1);
                if (var$3 == jl_Character_toCodePoint(var$4, var$5)) {
                    var$4 = 1;
                    break a;
                }
            }
            var$4 = 0;
        }
        return var$4;
    }
    b: {
        c: {
            var$2 = $set;
            if (!var$2.$contains($this.$string.$charAt(0))) {
                var$6 = $this.$string;
                if (var$6.$length() <= 1)
                    break c;
                var$6 = $this.$string;
                var$4 = jl_Character_toCodePoint(var$6.$charAt(0), $this.$string.$charAt(1));
                if (!var$2.$contains(var$4))
                    break c;
            }
            var$4 = 1;
            break b;
        }
        var$4 = 0;
    }
    return var$4;
},
jur_SequenceSet_indexOf = ($this, $str, $i, $to) => {
    let $last, $ch;
    $last = $this.$string.$charAt($this.$charCount0 - 1 | 0);
    while (true) {
        if ($i > ($to - $this.$charCount0 | 0))
            return (-1);
        $ch = $str.$charAt(($i + $this.$charCount0 | 0) - 1 | 0);
        if ($ch == $last && $this.$startsWith($str, $i))
            break;
        $i = $i + $this.$leftToRight.$get2($ch) | 0;
    }
    return $i;
},
jur_SequenceSet_lastIndexOf = ($this, $str, $to, $i) => {
    let $first, $size, $delta, $ch;
    $first = $this.$string.$charAt(0);
    $size = $str.$length();
    $delta = ($size - $i | 0) - $this.$charCount0 | 0;
    if ($delta <= 0)
        $i = $i + $delta | 0;
    while (true) {
        if ($i < $to)
            return (-1);
        $ch = $str.$charAt($i);
        if ($ch == $first && $this.$startsWith($str, $i))
            break;
        $i = $i - $this.$rightToLeft.$get2($ch) | 0;
    }
    return $i;
},
jur_SequenceSet_startsWith = ($this, $str, $from) => {
    let $i;
    $i = 0;
    while ($i < $this.$charCount0) {
        if ($str.$charAt($i + $from | 0) != $this.$string.$charAt($i))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
},
oli_Arc = $rt_classWithoutFields(oc_Link),
oli_Arc__init_0 = ($this, $label, $endpoints, $cost) => {
    oc_Link__init_($this, $label, $endpoints, $cost);
    $this.$setDirected(1);
},
oli_Arc__init_ = (var_0, var_1, var_2) => {
    let var_3 = new oli_Arc();
    oli_Arc__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
oli_Arc_getHead = $this => {
    return ($this.$getEndpoints()).$getSecond();
},
oli_Arc_getTail = $this => {
    return ($this.$getEndpoints()).$getFirst();
},
oli_Arc_isWindy = $this => {
    return 0;
},
jur_EOISet = $rt_classWithoutFields(jur_AbstractSet),
jur_EOISet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_EOISet__init_0 = () => {
    let var_0 = new jur_EOISet();
    jur_EOISet__init_(var_0);
    return var_0;
},
jur_EOISet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $rightBound;
    $rightBound = !$matchResult.$hasTransparentBounds() ? $matchResult.$getRightBound() : $testString.$length();
    if ($stringIndex < $rightBound)
        return (-1);
    $matchResult.$hitEnd = 1;
    $matchResult.$requireEnd = 1;
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_EOISet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_EOISet_getName = $this => {
    return $rt_s(316);
},
oe_GraphInfeasibleException = $rt_classWithoutFields(jl_Exception),
oe_GraphInfeasibleException__init_ = $this => {
    jl_Exception__init_($this);
},
oe_GraphInfeasibleException__init_0 = () => {
    let var_0 = new oe_GraphInfeasibleException();
    oe_GraphInfeasibleException__init_(var_0);
    return var_0;
},
jl_ArrayStoreException = $rt_classWithoutFields(jl_RuntimeException),
jl_ArrayStoreException__init_0 = $this => {
    jl_RuntimeException__init_($this);
},
jl_ArrayStoreException__init_ = () => {
    let var_0 = new jl_ArrayStoreException();
    jl_ArrayStoreException__init_0(var_0);
    return var_0;
},
ju_SequencedCollection = $rt_classWithoutFields(0),
jur_AltGroupQuantifierSet = $rt_classWithoutFields(jur_GroupQuantifierSet),
jur_AltGroupQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_GroupQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_AltGroupQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AltGroupQuantifierSet();
    jur_AltGroupQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_AltGroupQuantifierSet_setNext = ($this, $next) => {
    jur_AbstractSet_setNext($this, $next);
    $this.$innerSet.$setNext($next);
},
jur_AbstractCharClass$LazyUpper = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyUpper__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyUpper__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyUpper();
    jur_AbstractCharClass$LazyUpper__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyUpper_computeValue = $this => {
    return (jur_CharClass__init_()).$add0(65, 90);
},
jur_MatchResult = $rt_classWithoutFields(0);
function jur_MatchResultImpl() {
    let a = this; jl_Object.call(a);
    a.$groupBounds = null;
    a.$consumers = null;
    a.$compQuantCounters = null;
    a.$string3 = null;
    a.$groupCount0 = 0;
    a.$valid = 0;
    a.$leftBound0 = 0;
    a.$rightBound0 = 0;
    a.$startIndex = 0;
    a.$transparentBounds = 0;
    a.$anchoringBounds = 0;
    a.$hitEnd = 0;
    a.$requireEnd = 0;
    a.$previousMatch = 0;
    a.$mode1 = 0;
}
let jur_MatchResultImpl__init_ = ($this, $string, $leftBound, $rightBound, $groupCount, $compQuantCount, $consumersCount) => {
    let var$7;
    jl_Object__init_($this);
    $this.$previousMatch = (-1);
    var$7 = $groupCount + 1 | 0;
    $this.$groupCount0 = var$7;
    $this.$groupBounds = $rt_createIntArray(var$7 * 2 | 0);
    $this.$consumers = $rt_createIntArray($consumersCount);
    ju_Arrays_fill($this.$consumers, (-1));
    if ($compQuantCount > 0)
        $this.$compQuantCounters = $rt_createIntArray($compQuantCount);
    ju_Arrays_fill($this.$groupBounds, (-1));
    $this.$reset($string, $leftBound, $rightBound);
},
jur_MatchResultImpl__init_0 = (var_0, var_1, var_2, var_3, var_4, var_5) => {
    let var_6 = new jur_MatchResultImpl();
    jur_MatchResultImpl__init_(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
    return var_6;
},
jur_MatchResultImpl_setConsumed = ($this, $counter, $value) => {
    $this.$consumers.data[$counter] = $value;
},
jur_MatchResultImpl_getConsumed = ($this, $counter) => {
    return $this.$consumers.data[$counter];
},
jur_MatchResultImpl_end = $this => {
    return $this.$end(0);
},
jur_MatchResultImpl_end0 = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_setStart = ($this, $group, $offset) => {
    $this.$groupBounds.data[$group * 2 | 0] = $offset;
},
jur_MatchResultImpl_setEnd = ($this, $group, $offset) => {
    $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
},
jur_MatchResultImpl_getStart = ($this, $group) => {
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_getEnd = ($this, $group) => {
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
},
jur_MatchResultImpl_getGroupNoCheck = ($this, $group) => {
    let $st, $end;
    $st = $this.$getStart($group);
    $end = $this.$getEnd($group);
    if (($end | $st | ($end - $st | 0)) >= 0 && $end <= $this.$string3.$length())
        return ($this.$string3.$subSequence($st, $end)).$toString();
    return null;
},
jur_MatchResultImpl_start = $this => {
    return $this.$start(0);
},
jur_MatchResultImpl_start0 = ($this, $group) => {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[$group * 2 | 0];
},
jur_MatchResultImpl_finalizeMatch = $this => {
    if ($this.$groupBounds.data[0] == (-1)) {
        $this.$groupBounds.data[0] = $this.$startIndex;
        $this.$groupBounds.data[1] = $this.$startIndex;
    }
    $this.$previousMatch = $this.$end0();
},
jur_MatchResultImpl_getEnterCounter = ($this, $setCounter) => {
    return $this.$compQuantCounters.data[$setCounter];
},
jur_MatchResultImpl_setEnterCounter = ($this, $setCounter, $value) => {
    $this.$compQuantCounters.data[$setCounter] = $value;
},
jur_MatchResultImpl_checkGroup = ($this, $group) => {
    if (!$this.$valid)
        $rt_throw(jl_IllegalStateException__init_());
    if ($group >= 0 && $group < $this.$groupCount0)
        return;
    $rt_throw(jl_IndexOutOfBoundsException__init_2(jl_String_valueOf0($group)));
},
jur_MatchResultImpl_setValid = $this => {
    $this.$valid = 1;
},
jur_MatchResultImpl_isValid = $this => {
    return $this.$valid;
},
jur_MatchResultImpl_reset0 = ($this, $newSequence, $leftBound, $rightBound) => {
    $this.$valid = 0;
    $this.$mode1 = 2;
    ju_Arrays_fill($this.$groupBounds, (-1));
    ju_Arrays_fill($this.$consumers, (-1));
    if ($newSequence !== null)
        $this.$string3 = $newSequence;
    if ($leftBound >= 0)
        jur_MatchResultImpl_setBounds($this, $leftBound, $rightBound);
    $this.$startIndex = $this.$leftBound0;
},
jur_MatchResultImpl_reset = $this => {
    $this.$reset(null, (-1), (-1));
},
jur_MatchResultImpl_setBounds = ($this, $leftBound, $rightBound) => {
    $this.$leftBound0 = $leftBound;
    $this.$rightBound0 = $rightBound;
},
jur_MatchResultImpl_setStartIndex = ($this, $startIndex) => {
    $this.$startIndex = $startIndex;
    if ($this.$previousMatch >= 0)
        $startIndex = $this.$previousMatch;
    $this.$previousMatch = $startIndex;
},
jur_MatchResultImpl_getLeftBound = $this => {
    return $this.$leftBound0;
},
jur_MatchResultImpl_getRightBound = $this => {
    return $this.$rightBound0;
},
jur_MatchResultImpl_setMode = ($this, $mode) => {
    $this.$mode1 = $mode;
},
jur_MatchResultImpl_mode = $this => {
    return $this.$mode1;
},
jur_MatchResultImpl_useAnchoringBounds = ($this, $value) => {
    $this.$anchoringBounds = $value;
},
jur_MatchResultImpl_hasAnchoringBounds = $this => {
    return $this.$anchoringBounds;
},
jur_MatchResultImpl_hasTransparentBounds = $this => {
    return $this.$transparentBounds;
},
jur_MatchResultImpl_getPreviousMatchEnd = $this => {
    return $this.$previousMatch;
};
function ju_HashMap$AbstractMapIterator() {
    let a = this; jl_Object.call(a);
    a.$position = 0;
    a.$expectedModCount = 0;
    a.$futureEntry = null;
    a.$currentEntry = null;
    a.$prevEntry0 = null;
    a.$associatedMap = null;
}
let ju_HashMap$AbstractMapIterator__init_ = ($this, $hm) => {
    jl_Object__init_($this);
    $this.$associatedMap = $hm;
    $this.$expectedModCount = $hm.$modCount0;
    $this.$futureEntry = null;
},
ju_HashMap$AbstractMapIterator__init_0 = var_0 => {
    let var_1 = new ju_HashMap$AbstractMapIterator();
    ju_HashMap$AbstractMapIterator__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$AbstractMapIterator_hasNext = $this => {
    if ($this.$futureEntry !== null)
        return 1;
    while ($this.$position < $this.$associatedMap.$elementData.data.length) {
        if ($this.$associatedMap.$elementData.data[$this.$position] !== null)
            return 1;
        $this.$position = $this.$position + 1 | 0;
    }
    return 0;
},
ju_HashMap$AbstractMapIterator_checkConcurrentMod = $this => {
    if ($this.$expectedModCount == $this.$associatedMap.$modCount0)
        return;
    $rt_throw(ju_ConcurrentModificationException__init_());
},
ju_HashMap$AbstractMapIterator_makeNext = $this => {
    let var$1, var$2;
    ju_HashMap$AbstractMapIterator_checkConcurrentMod($this);
    if (!$this.$hasNext())
        $rt_throw(ju_NoSuchElementException__init_());
    if ($this.$futureEntry === null) {
        var$1 = $this.$associatedMap.$elementData.data;
        var$2 = $this.$position;
        $this.$position = var$2 + 1 | 0;
        $this.$currentEntry = var$1[var$2];
        $this.$futureEntry = $this.$currentEntry.$next3;
        $this.$prevEntry0 = null;
    } else {
        if ($this.$currentEntry !== null)
            $this.$prevEntry0 = $this.$currentEntry;
        $this.$currentEntry = $this.$futureEntry;
        $this.$futureEntry = $this.$futureEntry.$next3;
    }
},
ju_HashMap$KeyIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator),
ju_HashMap$KeyIterator__init_ = ($this, $map) => {
    ju_HashMap$AbstractMapIterator__init_($this, $map);
},
ju_HashMap$KeyIterator__init_0 = var_0 => {
    let var_1 = new ju_HashMap$KeyIterator();
    ju_HashMap$KeyIterator__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$KeyIterator_next = $this => {
    ju_HashMap$AbstractMapIterator_makeNext($this);
    return $this.$currentEntry.$key;
},
osi_MCPPSolver_Frederickson = $rt_classWithoutFields(oc_SingleVehicleSolver),
osi_MCPPSolver_Frederickson_LOGGER = null,
osi_MCPPSolver_Frederickson_$callClinit = () => {
    osi_MCPPSolver_Frederickson_$callClinit = $rt_eraseClinit(osi_MCPPSolver_Frederickson);
    osi_MCPPSolver_Frederickson__clinit_();
},
osi_MCPPSolver_Frederickson__init_ = ($this, $instance) => {
    osi_MCPPSolver_Frederickson_$callClinit();
    oc_SingleVehicleSolver__init_($this, $instance);
},
osi_MCPPSolver_Frederickson__init_0 = var_0 => {
    let var_1 = new osi_MCPPSolver_Frederickson();
    osi_MCPPSolver_Frederickson__init_(var_1, var_0);
    return var_1;
},
osi_MCPPSolver_Frederickson_largeCycles = ($input, $U) => {
    let $G1, $G2, $maxCost, $inputN, $i, $g1Vertices, $g2Vertices, $uSize, $e, $inputEdges, $edgesSize, $oddVertexIndices, var$15, $v, $n, var$18, $dist, $path, $matchingGraph, $matchingVertices, $n2, var$24, $u1, $j, var$27, $u2, $matchSolution, $p, $curr, $end, var$33, var$34, $u, $$je;
    osi_MCPPSolver_Frederickson_$callClinit();
    a: {
        try {
            $G1 = ogi_UndirectedGraph__init_();
            $G2 = ogi_UndirectedGraph__init_();
            $maxCost = 0;
            $inputN = ($input.$getVertices0()).$size();
            $i = 1;
            while ($i <= $inputN) {
                $G1.$addVertex0(ovi_UndirectedVertex__init_($rt_s(317)), $i);
                $G2.$addVertex0(ovi_UndirectedVertex__init_($rt_s(317)), $i);
                $i = $i + 1 | 0;
            }
            $g1Vertices = $G1.$getInternalVertexMap();
            $g2Vertices = $G2.$getInternalVertexMap();
            $uSize = $U.$size();
            $i = 0;
            while ($i < $uSize) {
                $e = $U.$get($i);
                $G1.$addEdge0(oli_Edge__init_($rt_s(306), ogu_Pair__init_($g1Vertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $g1Vertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost()));
                $i = $i + 1 | 0;
            }
            $inputEdges = $input.$getInternalEdgeMap();
            $edgesSize = ($input.$getEdges0()).$size();
            $i = 1;
            while ($i <= $edgesSize) {
                $e = $inputEdges.$get($i);
                if (!$e.$isDirected()) {
                    $G2.$addEdge0(oli_Edge__init_($rt_s(306), ogu_Pair__init_($g2Vertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $g2Vertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost()));
                    $maxCost = $maxCost + $e.$getCost() | 0;
                }
                $i = $i + 1 | 0;
            }
            $oddVertexIndices = ju_ArrayList__init_();
            var$15 = ($G1.$getVertices0()).$iterator();
            while (var$15.$hasNext()) {
                $v = var$15.$next();
                if (($v.$getDegree() % 2 | 0) == 1)
                    $oddVertexIndices.$add2(jl_Integer_valueOf($v.$getId()));
            }
            $n = ($G2.$getVertices0()).$size();
            var$18 = $n + 1 | 0;
            $dist = $rt_createIntMultiArray([var$18, var$18]);
            $path = $rt_createIntMultiArray([var$18, var$18]);
            ogu_CommonAlgorithms_fwLeastCostPaths0($G2, $dist, $path);
            $matchingGraph = ogi_UndirectedGraph__init_();
            $i = 0;
            while ($i < $oddVertexIndices.$size()) {
                $matchingGraph.$addVertex0(ovi_UndirectedVertex__init_($rt_s(318)), ($oddVertexIndices.$get($i)).$intValue());
                $i = $i + 1 | 0;
            }
            $matchingVertices = $matchingGraph.$getInternalVertexMap();
            $n2 = ($matchingGraph.$getVertices0()).$size();
            $i = 1;
            while (true) {
                var$24 = $n2 + 1 | 0;
                if ($i >= var$24)
                    break;
                $u1 = $matchingVertices.$get($i);
                $j = 1;
                while ($j < var$24) {
                    if ($i > $j) {
                        var$27 = $dist.data;
                        $u2 = $matchingVertices.$get($j);
                        if (var$27[$u1.$getMatchId()].data[$u2.$getMatchId()] == 2147483647)
                            $matchingGraph.$addEdge0(oli_Edge__init_($rt_s(319), ogu_Pair__init_($u1, $u2), $maxCost));
                        else
                            $matchingGraph.$addEdge0(oli_Edge__init_($rt_s(319), ogu_Pair__init_($u1, $u2), var$27[$u1.$getMatchId()].data[$u2.$getMatchId()]));
                    }
                    $j = $j + 1 | 0;
                }
                $i = $i + 1 | 0;
            }
            $matchSolution = ogu_CommonAlgorithms_minCostMatching($matchingGraph);
            var$15 = $matchSolution.$iterator();
            while (var$15.$hasNext()) {
                $p = var$15.$next();
                $curr = ($p.$getFirst()).$getMatchId();
                $end = ($p.$getSecond()).$getMatchId();
                while (true) {
                    var$33 = $dist.data;
                    var$18 = $path.data[$curr].data[$end];
                    var$34 = var$33[$curr].data[var$18];
                    $u = ($input.$getInternalVertexMap()).$get($curr);
                    $v = ($input.$getInternalVertexMap()).$get(var$18);
                    $U.$add2(oli_MixedEdge__init_($rt_s(320), ogu_Pair__init_($u, $v), var$34, 0));
                    if (var$18 == $end)
                        break;
                    $curr = var$18;
                }
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Frederickson_evenParity = ($input, $U, $M, $inMdubPrime) => {
    let $Mprime, $Uprime, $temp, $i, $tempVertices, $e, $Vprime, var$12, $v, $temp2, $temp2Vertices, $inputVertices, $curr, $startId, $currNeighbors, $currEdge, $$je;
    osi_MCPPSolver_Frederickson_$callClinit();
    $Mprime = ju_ArrayList__init_();
    $Uprime = ju_ArrayList__init_();
    a: {
        try {
            $temp = ogi_MixedGraph__init_();
            $i = 1;
            while ($i <= ($input.$getVertices0()).$size()) {
                $temp.$addVertex0(ovi_MixedVertex__init_($rt_s(321)), $i);
                $i = $i + 1 | 0;
            }
            $tempVertices = $temp.$getInternalVertexMap();
            $i = 0;
            while ($i < $U.$size()) {
                $e = $U.$get($i);
                $temp.$addEdge7(oli_MixedEdge__init_($rt_s(322), ogu_Pair__init_($tempVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $tempVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost(), 0), $i);
                $i = $i + 1 | 0;
            }
            $Vprime = ju_ArrayList__init_();
            var$12 = ($temp.$getVertices0()).$iterator();
            while (var$12.$hasNext()) {
                $v = var$12.$next();
                if (($v.$getDegree() % 2 | 0) == 1)
                    $Vprime.$add2($v);
            }
            $temp2 = ogi_MixedGraph__init_();
            $temp2Vertices = $temp2.$getInternalVertexMap();
            $i = 1;
            while ($i <= ($input.$getVertices0()).$size()) {
                $temp2.$addVertex0(ovi_MixedVertex__init_($rt_s(321)), $i);
                $i = $i + 1 | 0;
            }
            $i = 0;
            while ($i < $M.$size()) {
                if (($inMdubPrime.$get($i)).$booleanValue()) {
                    $e = $M.$get($i);
                    $temp2.$addEdge7(oli_MixedEdge__init_($rt_s(323), ogu_Pair__init_($temp2Vertices.$get(($e.$getTail0()).$getId()), $temp2Vertices.$get(($e.$getHead0()).$getId())), $e.$getCost(), 0), $i);
                }
                $i = $i + 1 | 0;
            }
            b: {
                $inputVertices = $input.$getInternalVertexMap();
                if (!$Vprime.$isEmpty()) {
                    $curr = $temp2Vertices.$get(($Vprime.$remove(0)).$getId());
                    $startId = $curr.$getId();
                    c: while (true) {
                        if ($Vprime.$isEmpty())
                            break b;
                        var$12 = $temp2Vertices.$get($curr.$getId());
                        while (!$Vprime.$remove0($tempVertices.$get(var$12.$getId()))) {
                            $currNeighbors = var$12.$getNeighbors0();
                            $currEdge = ((($currNeighbors.$values()).$iterator()).$next()).$get(0);
                            if (!(($currEdge.$getEndpoints()).$getFirst()).$equals(var$12)) {
                                $M.$set0($currEdge.$getMatchId(), null);
                                $inMdubPrime.$set0($currEdge.$getMatchId(), null);
                                var$12 = ($currEdge.$getEndpoints()).$getFirst();
                                $temp2.$removeEdge0($currEdge);
                                continue;
                            }
                            $Mprime.$add2(oli_MixedEdge__init_($rt_s(324), ogu_Pair__init_($inputVertices.$get((($currEdge.$getEndpoints()).$getFirst()).$getId()), $inputVertices.$get((($currEdge.$getEndpoints()).$getSecond()).$getId())), $currEdge.$getCost(), 1));
                            var$12 = ($currEdge.$getEndpoints()).$getSecond();
                            $temp2.$removeEdge0($currEdge);
                        }
                        $curr = $tempVertices.$get(var$12.$getId());
                        while (!$Vprime.$remove0($curr)) {
                            if ($curr.$getId() == $startId)
                                continue c;
                            $currNeighbors = $curr.$getNeighbors0();
                            $currEdge = ((($currNeighbors.$values()).$iterator()).$next()).$get(0);
                            $U.$set0($currEdge.$getMatchId(), null);
                            if (!$curr.$equals(($currEdge.$getEndpoints()).$getFirst())) {
                                $Mprime.$add2(oli_MixedEdge__init_($rt_s(325), ogu_Pair__init_($inputVertices.$get((($currEdge.$getEndpoints()).$getSecond()).$getId()), $inputVertices.$get((($currEdge.$getEndpoints()).$getFirst()).$getId())), $currEdge.$getCost(), 1));
                                $curr = ($currEdge.$getEndpoints()).$getFirst();
                                $temp.$removeEdge0($currEdge);
                                continue;
                            }
                            $Mprime.$add2(oli_MixedEdge__init_($rt_s(325), ogu_Pair__init_($inputVertices.$get((($currEdge.$getEndpoints()).$getFirst()).$getId()), $inputVertices.$get((($currEdge.$getEndpoints()).$getSecond()).$getId())), $currEdge.$getCost(), 1));
                            $curr = ($currEdge.$getEndpoints()).$getSecond();
                            $temp.$removeEdge0($currEdge);
                        }
                    }
                }
            }
            $i = 0;
            while ($i < $M.$size()) {
                if ($M.$get($i) !== null)
                    $Mprime.$add2($M.$get($i));
                $i = $i + 1 | 0;
            }
            $i = 0;
            while ($i < $U.$size()) {
                if ($U.$get($i) !== null)
                    $Uprime.$add2($U.$get($i));
                $i = $i + 1 | 0;
            }
            $input.$clearEdges();
            $i = 0;
            while ($i < $Mprime.$size()) {
                $input.$addEdge8($Mprime.$get($i));
                $i = $i + 1 | 0;
            }
            $i = 0;
            while ($i < $Uprime.$size()) {
                $input.$addEdge8($Uprime.$get($i));
                $i = $i + 1 | 0;
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Frederickson_evenDegree = $input => {
    let $setup, $i, $indexedVertices, var$5, $e, $n, var$8, $dist, $path, $edgePath, $matchingGraph, $v, $oddVertices, var$15, var$16, $v2, var$18, $matchingSolution, $setupEdges, var$21, $p, $curr, $end, var$25, var$26, $$je;
    osi_MCPPSolver_Frederickson_$callClinit();
    a: {
        try {
            $setup = ogi_UndirectedGraph__init_();
            $i = 1;
            while ($i < (($input.$getVertices0()).$size() + 1 | 0)) {
                $setup.$addVertex0(ovi_UndirectedVertex__init_($rt_s(326)), $i);
                $i = $i + 1 | 0;
            }
            $indexedVertices = $setup.$getInternalVertexMap();
            var$5 = ($input.$getEdges0()).$iterator();
            while (var$5.$hasNext()) {
                $e = var$5.$next();
                $setup.$addEdge7(oli_Edge__init_($rt_s(326), ogu_Pair__init_($indexedVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $indexedVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost()), $e.$getId());
            }
            $n = ($setup.$getVertices0()).$size();
            var$8 = $n + 1 | 0;
            $dist = $rt_createIntMultiArray([var$8, var$8]);
            $path = $rt_createIntMultiArray([var$8, var$8]);
            $edgePath = $rt_createIntMultiArray([var$8, var$8]);
            ogu_CommonAlgorithms_fwLeastCostPaths($setup, $dist, $path, $edgePath);
            $matchingGraph = ogi_UndirectedGraph__init_();
            var$5 = ($setup.$getVertices0()).$iterator();
            while (var$5.$hasNext()) {
                $v = var$5.$next();
                if (($v.$getDegree() % 2 | 0) == 1)
                    $matchingGraph.$addVertex0(ovi_UndirectedVertex__init_($rt_s(245)), $v.$getId());
            }
            $oddVertices = $matchingGraph.$getVertices0();
            var$15 = $oddVertices.$iterator();
            while (var$15.$hasNext()) {
                $v = var$15.$next();
                var$16 = $oddVertices.$iterator();
                while (var$16.$hasNext()) {
                    $v2 = var$16.$next();
                    if ($v.$getId() <= $v2.$getId())
                        continue;
                    var$18 = $dist.data;
                    $matchingGraph.$addEdge0(oli_Edge__init_($rt_s(246), ogu_Pair__init_($v, $v2), var$18[$v.$getMatchId()].data[$v2.$getMatchId()]));
                }
            }
            $matchingSolution = ogu_CommonAlgorithms_minCostMatching($matchingGraph);
            $setupEdges = $setup.$getInternalEdgeMap();
            var$21 = $matchingSolution.$iterator();
            while (var$21.$hasNext()) {
                $p = var$21.$next();
                $curr = ($p.$getFirst()).$getMatchId();
                $end = ($p.$getSecond()).$getMatchId();
                while (true) {
                    var$25 = $edgePath.data;
                    var$8 = $path.data[$curr].data[$end];
                    var$26 = var$25[$curr].data[$end];
                    $e = ($input.$getInternalEdgeMap()).$get(($setupEdges.$get(var$26)).$getMatchId());
                    $input.$addEdge8(oli_MixedEdge__init_($rt_s(327), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), $e.$isDirected()));
                    if (var$8 == $end)
                        break;
                    $curr = var$8;
                }
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Frederickson_inOutDegree = ($input, $U, $M, $inMdubPrime) => {
    let $setup, $n, $i, $inputEdges, $inputVertices, $setupVertices, $setupEdges, $m, var$13, $e, $a, var$16, $setupVertexSet, $v, $flowanswer, $undirTraversals, $setupM, var$22, $j, $temp, $undirLength, $$je;
    osi_MCPPSolver_Frederickson_$callClinit();
    a: {
        try {
            $setup = ogi_DirectedGraph__init_();
            $n = ($input.$getVertices0()).$size();
            $i = 1;
            while ($i < ($n + 1 | 0)) {
                $setup.$addVertex0(ovi_DirectedVertex__init_($rt_s(317)), $i);
                $i = $i + 1 | 0;
            }
            $inputEdges = $input.$getInternalEdgeMap();
            $inputVertices = $input.$getInternalVertexMap();
            $setupVertices = $setup.$getInternalVertexMap();
            $setupEdges = $setup.$getInternalEdgeMap();
            $m = ($input.$getEdges0()).$size();
            $i = 1;
            while (true) {
                var$13 = $m + 1 | 0;
                if ($i >= var$13)
                    break;
                $e = $inputEdges.$get($i);
                if ($e.$isDirected())
                    $setup.$addEdge7(oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get(($e.$getTail0()).$getId()), $setupVertices.$get(($e.$getHead0()).$getId())), $e.$getCost()), $e.$getId());
                else {
                    $setup.$addEdge7(oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost()), $e.$getId());
                    $setup.$addEdge7(oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId())), $e.$getCost()), $e.$getId());
                    $a = oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), 0);
                    $a.$setCapacity(1);
                    $setup.$addEdge7($a, $e.$getId());
                    var$16 = oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId())), 0);
                    var$16.$setCapacity(1);
                    $setup.$addEdge7(var$16, $e.$getId());
                }
                $i = $i + 1 | 0;
            }
            $setupVertexSet = $setup.$getVertices0();
            var$16 = $setupVertexSet.$iterator();
            while (var$16.$hasNext()) {
                $v = var$16.$next();
                if ($v.$getDelta())
                    $v.$setDemand($v.$getDelta());
            }
            $flowanswer = ogu_CommonAlgorithms_shortestSuccessivePathsMinCostNetworkFlow($setup);
            $undirTraversals = $rt_createIntArray(var$13);
            $setupM = ($setup.$getEdges0()).$size();
            $i = 1;
            while ($i < ($setupM + 1 | 0)) {
                $e = $inputEdges.$get(($setupEdges.$get($i)).$getMatchId());
                $a = $setupEdges.$get($i);
                if ($e.$isDirected()) {
                    var$22 = $undirTraversals.data;
                    $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_($e.$getTail0(), $e.$getHead0()), $e.$getCost(), 1));
                    $inMdubPrime.$add2(jl_Boolean_valueOf(0));
                    var$22[$e.$getId()] = 2;
                    $j = 0;
                    while ($j < $flowanswer.data[$i]) {
                        $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_($e.$getTail0(), $e.$getHead0()), $e.$getCost(), 1));
                        $inMdubPrime.$add2(jl_Boolean_valueOf(1));
                        $j = $j + 1 | 0;
                    }
                } else if (!$a.$isCapacitySet()) {
                    $j = 0;
                    while ($j < $flowanswer.data[$i]) {
                        $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_($inputVertices.$get(($a.$getTail()).$getId()), $inputVertices.$get(($a.$getHead()).$getId())), $e.$getCost(), 1));
                        $inMdubPrime.$add2(jl_Boolean_valueOf(1));
                        $j = $j + 1 | 0;
                    }
                } else if ($flowanswer.data[$i]) {
                    $temp = $inputVertices.$get(($a.$getTail()).$getId());
                    if (!$temp.$equals(($e.$getEndpoints()).$getFirst())) {
                        var$22 = $undirTraversals.data;
                        if (!var$22[$e.$getId()])
                            var$22[$e.$getId()] = (-1);
                        else {
                            $U.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 0));
                            var$22[$e.$getId()] = 2;
                        }
                    } else {
                        var$22 = $undirTraversals.data;
                        if (!var$22[$e.$getId()])
                            var$22[$e.$getId()] = 1;
                        else {
                            $U.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 0));
                            var$22[$e.$getId()] = 2;
                        }
                    }
                }
                $i = $i + 1 | 0;
            }
            var$22 = $undirTraversals.data;
            $undirLength = var$22.length;
            $i = 1;
            while ($i < $undirLength) {
                $e = $inputEdges.$get($i);
                if (!var$22[$i])
                    $U.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 0));
                else if (var$22[$i] == 1) {
                    $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 1));
                    $inMdubPrime.$add2(jl_Boolean_valueOf(0));
                } else if (var$22[$i] == (-1)) {
                    $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getSecond(), ($e.$getEndpoints()).$getFirst()), $e.$getCost(), 1));
                    $inMdubPrime.$add2(jl_Boolean_valueOf(0));
                }
                $i = $i + 1 | 0;
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Frederickson_solve = $this => {
    let $ans1, $ans2, $U, $M, $inMdubPrime, var$6, var$7, var$8, $mSize, $uSize, $i, $cost1, $cost2, $temp, $eulerTour, $tour, $indexedEdges, $tourSize, $ret, $e, $$je;
    a: {
        try {
            $ans1 = ($this.$mInstance.$getGraph()).$getDeepCopy1();
            $ans2 = ($this.$mInstance.$getGraph()).$getDeepCopy1();
            $U = ju_ArrayList__init_();
            $M = ju_ArrayList__init_();
            $inMdubPrime = ju_ArrayList__init_();
            osi_MCPPSolver_Frederickson_evenDegree($ans1);
            osi_MCPPSolver_Frederickson_inOutDegree($ans1, $U, $M, $inMdubPrime);
            osi_MCPPSolver_Frederickson_evenParity($ans1, $U, $M, $inMdubPrime);
            var$6 = ju_ArrayList__init_();
            var$7 = ju_ArrayList__init_();
            var$8 = ju_ArrayList__init_();
            osi_MCPPSolver_Frederickson_inOutDegree($ans2, var$6, var$7, var$8);
            osi_MCPPSolver_Frederickson_largeCycles($ans2, var$6);
            $ans2.$clearEdges();
            $mSize = var$7.$size();
            $uSize = var$6.$size();
            $i = 0;
            while ($i < $mSize) {
                $ans2.$addEdge8(var$7.$get($i));
                $i = $i + 1 | 0;
            }
            $i = 0;
            while ($i < $uSize) {
                $ans2.$addEdge8(var$6.$get($i));
                $i = $i + 1 | 0;
            }
            $cost1 = 0;
            $cost2 = 0;
            var$6 = ($ans1.$getEdges0()).$iterator();
            while (var$6.$hasNext()) {
                $temp = var$6.$next();
                $cost1 = $cost1 + $temp.$getCost() | 0;
            }
            var$6 = ($ans2.$getEdges0()).$iterator();
            while (var$6.$hasNext()) {
                $temp = var$6.$next();
                $cost2 = $cost2 + $temp.$getCost() | 0;
            }
            b: {
                $eulerTour = ori_Tour__init_();
                if ($cost1 > $cost2) {
                    osi_MCPPSolver_Frederickson_LOGGER.$debug((((jl_StringBuilder__init_()).$append4($rt_s(329))).$append16(ogu_CommonAlgorithms_isStronglyConnected($ans2))).$toString());
                    $tour = ogu_CommonAlgorithms_tryHierholzer0($ans2);
                    $indexedEdges = $ans2.$getInternalEdgeMap();
                    $tourSize = $tour.$size();
                    $i = 0;
                    while (true) {
                        if ($i >= $tourSize)
                            break b;
                        $eulerTour.$appendEdge0($indexedEdges.$get(($tour.$get($i)).$intValue()));
                        $i = $i + 1 | 0;
                    }
                }
                osi_MCPPSolver_Frederickson_LOGGER.$debug((((jl_StringBuilder__init_()).$append4($rt_s(330))).$append16(ogu_CommonAlgorithms_isStronglyConnected($ans1))).$toString());
                $tour = ogu_CommonAlgorithms_tryHierholzer0($ans1);
                $indexedEdges = $ans1.$getInternalEdgeMap();
                $tourSize = $tour.$size();
                $i = 0;
                while ($i < $tourSize) {
                    $eulerTour.$appendEdge0($indexedEdges.$get(($tour.$get($i)).$intValue()));
                    $i = $i + 1 | 0;
                }
            }
            $this.$mInstance.$setSol($eulerTour);
            $ret = ju_HashSet__init_();
            $ret.$add2($eulerTour);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ret;
    }
    $e.$printStackTrace0();
    return null;
},
osi_MCPPSolver_Frederickson_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_MIXED;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
},
osi_MCPPSolver_Frederickson_getSolverName = $this => {
    return $rt_s(331);
},
osi_MCPPSolver_Frederickson_checkGraphRequirements = $this => {
    let $mGraph;
    if ($this.$mInstance.$getGraph() === null)
        return 0;
    $mGraph = $this.$mInstance.$getGraph();
    if (ogu_CommonAlgorithms_isStronglyConnected($mGraph))
        return 1;
    return 0;
},
osi_MCPPSolver_Frederickson__clinit_ = () => {
    osi_MCPPSolver_Frederickson_LOGGER = ou_SimpleLogger_getLogger($rt_cls(osi_MCPPSolver_Frederickson));
};
function jur_UCIRangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars1 = null;
    a.$alt3 = 0;
}
let jur_UCIRangeSet__init_ = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars1 = $cc.$getInstance();
    $this.$alt3 = $cc.$alt;
},
jur_UCIRangeSet__init_0 = var_0 => {
    let var_1 = new jur_UCIRangeSet();
    jur_UCIRangeSet__init_(var_1, var_0);
    return var_1;
},
jur_UCIRangeSet_accepts = ($this, $strIndex, $testString) => {
    let var$3, var$4;
    var$3 = $this.$chars1;
    var$4 = jl_Character_toUpperCase($testString.$charAt($strIndex));
    return !var$3.$contains(jl_Character_toLowerCase(var$4)) ? (-1) : 1;
},
jur_UCIRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt3 ? $rt_s(29) : $rt_s(30);
    var$2 = $this.$chars1.$toString();
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(332)), var$1), var$2);
    return jl_StringBuilder_toString(var$3);
},
jl_AutoCloseable = $rt_classWithoutFields(0),
ji_Closeable = $rt_classWithoutFields(0),
ji_OutputStream = $rt_classWithoutFields(),
ji_OutputStream__init_ = $this => {
    jl_Object__init_($this);
};
function ji_FilterOutputStream() {
    ji_OutputStream.call(this);
    this.$out0 = null;
}
let ji_FilterOutputStream__init_ = ($this, $out) => {
    ji_OutputStream__init_($this);
    $this.$out0 = $out;
},
ji_FilterOutputStream__init_0 = var_0 => {
    let var_1 = new ji_FilterOutputStream();
    ji_FilterOutputStream__init_(var_1, var_0);
    return var_1;
};
function ji_PrintStream() {
    let a = this; ji_FilterOutputStream.call(a);
    a.$autoFlush = 0;
    a.$sb = null;
    a.$buffer0 = null;
    a.$charset = null;
}
let ji_PrintStream__init_ = ($this, $out, $autoFlush, $charset) => {
    ji_FilterOutputStream__init_($this, $out);
    $this.$sb = jl_StringBuilder__init_();
    $this.$buffer0 = $rt_createCharArray(32);
    $this.$autoFlush = $autoFlush;
    $this.$charset = $charset;
},
ji_PrintStream__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new ji_PrintStream();
    ji_PrintStream__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
otcic_JsConsolePrintStream = $rt_classWithoutFields(ji_PrintStream),
otcic_JsConsolePrintStream__init_ = $this => {
    ji_PrintStream__init_($this, null, 0, null);
},
otcic_JsConsolePrintStream_println1 = ($this, $s) => {
    $this.$print($s);
    $this.$print($rt_s(239));
},
otcic_JsConsolePrintStream_println0 = $this => {
    $this.$print($rt_s(239));
},
otcic_JsConsolePrintStream_println = ($this, $s) => {
    $this.$println1(ju_Objects_toString($s));
},
otcic_JSStdoutPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStdoutPrintStream__init_ = $this => {
    otcic_JsConsolePrintStream__init_($this);
},
otcic_JSStdoutPrintStream__init_0 = () => {
    let var_0 = new otcic_JSStdoutPrintStream();
    otcic_JSStdoutPrintStream__init_(var_0);
    return var_0;
},
otcic_JSStdoutPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(24);
    $rt_putStdout($rt_ustr($s));
};
function oc_MultiEdge() {
    let a = this; jl_Object.call(a);
    a.$numCopies = 0;
    a.$first0 = null;
    a.$myType = null;
    a.$directedForward = 0;
    a.$directedBackward = 0;
}
let oc_MultiEdge_LOGGER = null,
oc_MultiEdge_$callClinit = () => {
    oc_MultiEdge_$callClinit = $rt_eraseClinit(oc_MultiEdge);
    oc_MultiEdge__clinit_();
},
oc_MultiEdge__init_0 = ($this, $e) => {
    oc_MultiEdge_$callClinit();
    jl_Object__init_($this);
    $this.$numCopies = 0;
    if (!$e.$isDirected()) {
        oc_MultiEdge$EDGETYPE_$callClinit();
        $this.$myType = oc_MultiEdge$EDGETYPE_A;
        $this.$directedForward = 0;
    } else {
        oc_MultiEdge$EDGETYPE_$callClinit();
        $this.$myType = oc_MultiEdge$EDGETYPE_E;
        $this.$directedForward = 1;
    }
    $this.$first0 = $e;
    $this.$directedBackward = 0;
},
oc_MultiEdge__init_ = var_0 => {
    let var_1 = new oc_MultiEdge();
    oc_MultiEdge__init_0(var_1, var_0);
    return var_1;
},
oc_MultiEdge_getCopy = $this => {
    let $ret, $i, $ex, $$je;
    a: {
        try {
            $ret = oc_MultiEdge__init_($this.$first0);
            if ($this.$directedForward && !$this.$first0.$isDirected())
                $ret.$directForward();
            else if ($this.$directedBackward && !$this.$first0.$isDirected())
                $ret.$directBackward();
            b: {
                if ($this.$numCopies == (-1)) {
                    $ret.$directForward();
                    $ret.$addReverseCopy();
                } else {
                    $i = 0;
                    while (true) {
                        if ($i >= $this.$numCopies)
                            break b;
                        $ret.$addCopy();
                        $i = $i + 1 | 0;
                    }
                }
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $ex = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ret;
    }
    $ex.$printStackTrace0();
    return null;
},
oc_MultiEdge_getNumCopies = $this => {
    return $this.$numCopies;
},
oc_MultiEdge_directForward = $this => {
    let var$1;
    var$1 = $this.$myType;
    oc_MultiEdge$EDGETYPE_$callClinit();
    if (var$1 === oc_MultiEdge$EDGETYPE_A) {
        $this.$myType = oc_MultiEdge$EDGETYPE_B;
        $this.$directedForward = 1;
        $this.$directedBackward = 0;
    } else {
        if ($this.$myType !== oc_MultiEdge$EDGETYPE_D) {
            oc_MultiEdge_$callClinit();
            oc_MultiEdge_LOGGER.$error($rt_s(333));
            $rt_throw(oe_WrongEdgeTypeException__init_());
        }
        $this.$myType = oc_MultiEdge$EDGETYPE_B;
        $this.$directedForward = 1;
        $this.$directedBackward = 0;
        $this.$numCopies = 0;
    }
},
oc_MultiEdge_directBackward = $this => {
    let var$1;
    var$1 = $this.$myType;
    oc_MultiEdge$EDGETYPE_$callClinit();
    if (var$1 === oc_MultiEdge$EDGETYPE_A) {
        $this.$myType = oc_MultiEdge$EDGETYPE_B;
        $this.$directedForward = 0;
        $this.$directedBackward = 1;
    } else {
        if ($this.$myType !== oc_MultiEdge$EDGETYPE_D) {
            oc_MultiEdge_$callClinit();
            oc_MultiEdge_LOGGER.$error($rt_s(333));
            $rt_throw(oe_WrongEdgeTypeException__init_());
        }
        $this.$myType = oc_MultiEdge$EDGETYPE_B;
        $this.$directedForward = 0;
        $this.$directedBackward = 1;
        $this.$numCopies = 0;
    }
},
oc_MultiEdge_addCopy = $this => {
    let var$1;
    var$1 = $this.$myType;
    oc_MultiEdge$EDGETYPE_$callClinit();
    if (var$1 === oc_MultiEdge$EDGETYPE_A) {
        oc_MultiEdge_$callClinit();
        oc_MultiEdge_LOGGER.$error($rt_s(334));
        $rt_throw(oe_WrongEdgeTypeException__init_());
    }
    if ($this.$myType === oc_MultiEdge$EDGETYPE_D) {
        oc_MultiEdge_$callClinit();
        oc_MultiEdge_LOGGER.$error($rt_s(335));
        $rt_throw(oe_WrongEdgeTypeException__init_());
    }
    if ($this.$myType === oc_MultiEdge$EDGETYPE_B)
        $this.$myType = oc_MultiEdge$EDGETYPE_C;
    else if ($this.$myType === oc_MultiEdge$EDGETYPE_E)
        $this.$myType = oc_MultiEdge$EDGETYPE_F;
    $this.$numCopies = $this.$numCopies + 1 | 0;
},
oc_MultiEdge_addReverseCopy = $this => {
    let var$1;
    var$1 = $this.$myType;
    oc_MultiEdge$EDGETYPE_$callClinit();
    if (var$1 !== oc_MultiEdge$EDGETYPE_B) {
        oc_MultiEdge_$callClinit();
        oc_MultiEdge_LOGGER.$error($rt_s(336));
        $rt_throw(oe_WrongEdgeTypeException__init_());
    }
    $this.$numCopies = (-1);
    $this.$directedForward = 0;
    $this.$directedBackward = 0;
    $this.$myType = oc_MultiEdge$EDGETYPE_D;
},
oc_MultiEdge_tryRemoveCopy = $this => {
    let var$1;
    if ($this.$numCopies < 1)
        return 0;
    $this.$numCopies = $this.$numCopies - 1 | 0;
    if (!$this.$numCopies) {
        var$1 = $this.$myType;
        oc_MultiEdge$EDGETYPE_$callClinit();
        if (var$1 === oc_MultiEdge$EDGETYPE_F)
            $this.$myType = oc_MultiEdge$EDGETYPE_E;
        else if ($this.$myType === oc_MultiEdge$EDGETYPE_C)
            $this.$myType = oc_MultiEdge$EDGETYPE_B;
    }
    return 1;
},
oc_MultiEdge_getFirst = $this => {
    return $this.$first0;
},
oc_MultiEdge_getType = $this => {
    return $this.$myType;
},
oc_MultiEdge_isDirectedForward = $this => {
    return $this.$directedForward;
},
oc_MultiEdge_isDirectedBackward = $this => {
    return $this.$directedBackward;
},
oc_MultiEdge__clinit_ = () => {
    oc_MultiEdge_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_MultiEdge));
},
otji_JSWrapper = $rt_classWithoutFields();
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$010 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1__init_ = ($this, $this$0) => {
    $this.$this$010 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1();
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains = ($this, $ch) => {
    return jl_Character_isJavaIdentifierPart($ch);
},
ju_Set = $rt_classWithoutFields(0),
ju_AbstractSet = $rt_classWithoutFields(ju_AbstractCollection),
ju_AbstractSet__init_ = $this => {
    ju_AbstractCollection__init_($this);
},
ju_AbstractSet_equals = ($this, $obj) => {
    let $other, $iter;
    if ($this === $obj)
        return 1;
    if (!$rt_isInstance($obj, ju_Set))
        return 0;
    $other = $obj;
    if ($this.$size() != $other.$size())
        return 0;
    $iter = $other.$iterator();
    while ($iter.$hasNext()) {
        if ($this.$contains0($iter.$next()))
            continue;
        else
            return 0;
    }
    return 1;
},
ju_AbstractSet_hashCode = $this => {
    let $result, $iter, $e;
    $result = 0;
    $iter = $this.$iterator();
    while ($iter.$hasNext()) {
        $e = $iter.$next();
        if ($e !== null)
            $result = $result + $e.$hashCode0() | 0;
    }
    return $result;
};
function ju_HashSet() {
    ju_AbstractSet.call(this);
    this.$backingMap = null;
}
let ju_HashSet__init_1 = $this => {
    ju_HashSet__init_0($this, ju_HashMap__init_());
},
ju_HashSet__init_ = () => {
    let var_0 = new ju_HashSet();
    ju_HashSet__init_1(var_0);
    return var_0;
},
ju_HashSet__init_0 = ($this, $backingMap) => {
    ju_AbstractSet__init_($this);
    $this.$backingMap = $backingMap;
},
ju_HashSet__init_2 = var_0 => {
    let var_1 = new ju_HashSet();
    ju_HashSet__init_0(var_1, var_0);
    return var_1;
},
ju_HashSet_add = ($this, $object) => {
    return $this.$backingMap.$put($object, $this) !== null ? 0 : 1;
},
ju_HashSet_clear = $this => {
    $this.$backingMap.$clear();
},
ju_HashSet_contains = ($this, $object) => {
    return $this.$backingMap.$containsKey($object);
},
ju_HashSet_iterator = $this => {
    return ($this.$backingMap.$keySet()).$iterator();
},
ju_HashSet_remove = ($this, $object) => {
    return $this.$backingMap.$remove1($object) === null ? 0 : 1;
},
ju_HashSet_size = $this => {
    return $this.$backingMap.$size();
},
otp_Platform = $rt_classWithoutFields(),
otp_Platform_isInstance = ($obj, $cls) => {
    return $obj !== null && !(typeof $obj.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($obj.constructor, $cls) ? 1 : 0;
},
otp_Platform_isAssignable = ($from, $to) => {
    let $supertypes, $i;
    if ($from === $to)
        return 1;
    $supertypes = $from.$meta.supertypes;
    $i = 0;
    while ($i < $supertypes.length) {
        if (otp_Platform_isAssignable($supertypes[$i], $to))
            return 1;
        $i = $i + 1 | 0;
    }
    return 0;
},
otp_Platform_isPrimitive = $cls => {
    return $cls.$meta.primitive ? 1 : 0;
},
otp_Platform_getArrayItem = $cls => {
    return $cls.$meta.item;
},
otp_Platform_getName = $cls => {
    return $rt_str($cls.$meta.name);
},
otp_Platform_getSimpleName = $cls => {
    return $rt_str($cls.$meta.simpleName);
},
otp_Platform_getEnclosingClass = $cls => {
    return $cls.$meta.enclosingClass;
},
jnc_Charset = $rt_classWithoutFields(),
oli_AsymmetricLink = $rt_classWithoutFields(0);
function oli_WindyEdge() {
    let a = this; oc_Link.call(a);
    a.$mReverseCost = 0;
    a.$mReverseServiceCost = 0;
    a.$mReverseRequired = 0;
}
let oli_WindyEdge__init_ = ($this, $label, $endpoints, $cost, $reverseCost) => {
    oc_Link__init_($this, $label, $endpoints, $cost);
    $this.$setReverseCost($reverseCost);
    $this.$setReverseServiceCost(0);
    $this.$setDirected(0);
    $this.$setReverseRequired(0);
},
oli_WindyEdge__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new oli_WindyEdge();
    oli_WindyEdge__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
oli_WindyEdge__init_1 = ($this, $label, $endpoints, $cost, $reverseCost, $required) => {
    oc_Link__init_0($this, $label, $endpoints, $cost, $required);
    $this.$setReverseCost($reverseCost);
    $this.$setReverseServiceCost(0);
    $this.$setDirected(0);
    $this.$setReverseRequired(0);
},
oli_WindyEdge__init_2 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new oli_WindyEdge();
    oli_WindyEdge__init_1(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
oli_WindyEdge_getReverseCost = $this => {
    return $this.$mReverseCost;
},
oli_WindyEdge_setReverseCost = ($this, $mReverseCost) => {
    $this.$mReverseCost = $mReverseCost;
},
oli_WindyEdge_setReverseServiceCost = ($this, $mReverseServiceCost) => {
    $this.$mReverseServiceCost = $mReverseServiceCost;
},
oli_WindyEdge_isReverseRequired = $this => {
    return $this.$mReverseRequired;
},
oli_WindyEdge_setReverseRequired = ($this, $mReverseRequired) => {
    $this.$mReverseRequired = $mReverseRequired;
},
oli_WindyEdge_isWindy = $this => {
    return 1;
},
opic_MixedCPP = $rt_classWithoutFields(opi_ChinesePostmanProblem),
opic_MixedCPP__init_ = ($this, $g, $name) => {
    opi_ChinesePostmanProblem__init_($this, $g, $name, om_SumMetric__init_());
    $this.$mGraph = $g;
},
opic_MixedCPP__init_0 = (var_0, var_1) => {
    let var_2 = new opic_MixedCPP();
    opic_MixedCPP__init_(var_2, var_0, var_1);
    return var_2;
},
opic_MixedCPP_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_MIXED;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
};
function jl_Boolean() {
    jl_Object.call(this);
    this.$value0 = 0;
}
let jl_Boolean_TRUE = null,
jl_Boolean_FALSE = null,
jl_Boolean_TYPE = null,
jl_Boolean_$callClinit = () => {
    jl_Boolean_$callClinit = $rt_eraseClinit(jl_Boolean);
    jl_Boolean__clinit_();
},
jl_Boolean__init_0 = ($this, $value) => {
    jl_Boolean_$callClinit();
    jl_Object__init_($this);
    $this.$value0 = $value;
},
jl_Boolean__init_ = var_0 => {
    let var_1 = new jl_Boolean();
    jl_Boolean__init_0(var_1, var_0);
    return var_1;
},
jl_Boolean_compareTo = ($this, $other) => {
    return jl_Boolean_compare($this.$value0, $other.$value0);
},
jl_Boolean_compare = ($x, $y) => {
    jl_Boolean_$callClinit();
    return $x == $y ? 0 : !$x ? (-1) : 1;
},
jl_Boolean_booleanValue = $this => {
    return $this.$value0;
},
jl_Boolean_valueOf = $value => {
    jl_Boolean_$callClinit();
    return !$value ? jl_Boolean_FALSE : jl_Boolean_TRUE;
},
jl_Boolean_toString0 = $value => {
    jl_Boolean_$callClinit();
    return !$value ? $rt_s(25) : $rt_s(26);
},
jl_Boolean_toString = $this => {
    return jl_Boolean_toString0($this.$value0);
},
jl_Boolean_hashCode = $this => {
    return jl_Boolean_hashCode0($this.$value0);
},
jl_Boolean_hashCode0 = $value => {
    jl_Boolean_$callClinit();
    return !$value ? 1237 : 1231;
},
jl_Boolean_equals = ($this, $obj) => {
    if ($this === $obj)
        return 1;
    return $obj instanceof jl_Boolean && $obj.$value0 == $this.$value0 ? 1 : 0;
},
jl_Boolean_compareTo0 = ($this, var$1) => {
    return $this.$compareTo1(var$1);
},
jl_Boolean__clinit_ = () => {
    jl_Boolean_TRUE = jl_Boolean__init_(1);
    jl_Boolean_FALSE = jl_Boolean__init_(0);
    jl_Boolean_TYPE = $rt_cls($rt_booleancls);
};
function jur_MultiLineSOLSet() {
    jur_AbstractSet.call(this);
    this.$lt1 = null;
}
let jur_MultiLineSOLSet__init_ = ($this, $lt) => {
    jur_AbstractSet__init_($this);
    $this.$lt1 = $lt;
},
jur_MultiLineSOLSet__init_0 = var_0 => {
    let var_1 = new jur_MultiLineSOLSet();
    jur_MultiLineSOLSet__init_(var_1, var_0);
    return var_1;
},
jur_MultiLineSOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let var$4, var$5;
    a: {
        if ($strIndex != $matchResult.$getRightBound()) {
            if (!$strIndex)
                break a;
            if ($matchResult.$hasAnchoringBounds() && $strIndex == $matchResult.$getLeftBound())
                break a;
            var$4 = $this.$lt1;
            var$5 = $strIndex - 1 | 0;
            if (var$4.$isAfterLineTerminator($testString.$charAt(var$5), $testString.$charAt($strIndex)))
                break a;
        }
        return (-1);
    }
    return $this.$next2.$matches($strIndex, $testString, $matchResult);
},
jur_MultiLineSOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_MultiLineSOLSet_getName = $this => {
    return $rt_s(337);
},
ju_List = $rt_classWithoutFields(0);
function ju_AbstractList() {
    ju_AbstractCollection.call(this);
    this.$modCount = 0;
}
let ju_AbstractList__init_ = $this => {
    ju_AbstractCollection__init_($this);
},
ju_AbstractList_add = ($this, $e) => {
    $this.$add1($this.$size(), $e);
    return 1;
},
ju_AbstractList_iterator = $this => {
    return ju_AbstractList$1__init_0($this);
},
ju_AbstractList_indexOf = ($this, $o) => {
    let $sz, $i;
    $sz = $this.$size();
    $i = 0;
    while (true) {
        if ($i >= $sz)
            return (-1);
        if (ju_Objects_equals($o, $this.$get($i)))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_AbstractList_equals = ($this, $other) => {
    let $list, $i;
    if (!$rt_isInstance($other, ju_List))
        return 0;
    $list = $other;
    if ($this.$size() != $list.$size())
        return 0;
    $i = 0;
    while ($i < $list.$size()) {
        if (!ju_Objects_equals($this.$get($i), $list.$get($i)))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
},
ju_AbstractSequentialList = $rt_classWithoutFields(ju_AbstractList),
ju_AbstractSequentialList__init_ = $this => {
    ju_AbstractList__init_($this);
},
ju_AbstractSequentialList_add = ($this, $index, $element) => {
    let $iter;
    if ($index < 0)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    $iter = $this.$listIterator($index);
    $iter.$add5($element);
},
ju_Deque = $rt_classWithoutFields(0);
function ju_LinkedList() {
    let a = this; ju_AbstractSequentialList.call(a);
    a.$firstEntry = null;
    a.$lastEntry = null;
    a.$size2 = 0;
}
let ju_LinkedList__init_0 = $this => {
    ju_AbstractSequentialList__init_($this);
},
ju_LinkedList__init_ = () => {
    let var_0 = new ju_LinkedList();
    ju_LinkedList__init_0(var_0);
    return var_0;
},
ju_LinkedList_size = $this => {
    return $this.$size2;
},
ju_LinkedList_listIterator = ($this, $index) => {
    let $next, $i, $prev;
    if ($index < 0)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    if ($index <= ($this.$size2 / 2 | 0)) {
        $next = $this.$firstEntry;
        $i = 0;
        while ($i < $index) {
            $next = $next.$next4;
            $i = $i + 1 | 0;
        }
        return ju_LinkedList$SequentialListIterator__init_($this, $next, $next === null ? null : $next.$previous, $index);
    }
    if ($index > $this.$size2)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    $prev = $this.$lastEntry;
    $i = $index;
    while ($i < $this.$size2) {
        $prev = $prev.$previous;
        $i = $i + 1 | 0;
    }
    return ju_LinkedList$SequentialListIterator__init_($this, $prev === null ? null : $prev.$next4, $prev, $index);
},
ju_LinkedList_remove = $this => {
    if (!$this.$isEmpty())
        return $this.$poll();
    $rt_throw(ju_NoSuchElementException__init_());
},
ju_LinkedList_poll = $this => {
    let $entry;
    if ($this.$firstEntry === null)
        return null;
    $entry = $this.$firstEntry;
    $this.$firstEntry = $this.$firstEntry.$next4;
    if ($this.$firstEntry === null)
        $this.$lastEntry = null;
    else
        $this.$firstEntry.$previous = null;
    $this.$size2 = $this.$size2 - 1 | 0;
    $this.$modCount = $this.$modCount + 1 | 0;
    return $entry.$item;
},
ju_LinkedList_peek = $this => {
    return $this.$firstEntry === null ? null : $this.$firstEntry.$item;
},
ju_LinkedList_addFirst = ($this, $e) => {
    let $entry;
    $entry = ju_LinkedList$Entry__init_();
    $entry.$item = $e;
    $entry.$next4 = $this.$firstEntry;
    if ($this.$firstEntry === null)
        $this.$lastEntry = $entry;
    else
        $this.$firstEntry.$previous = $entry;
    $this.$firstEntry = $entry;
    $this.$modCount = $this.$modCount + 1 | 0;
    $this.$size2 = $this.$size2 + 1 | 0;
},
ju_LinkedList_addLast = ($this, $e) => {
    let $entry;
    $entry = ju_LinkedList$Entry__init_();
    $entry.$item = $e;
    $entry.$previous = $this.$lastEntry;
    if ($this.$lastEntry === null)
        $this.$firstEntry = $entry;
    else
        $this.$lastEntry.$next4 = $entry;
    $this.$lastEntry = $entry;
    $this.$modCount = $this.$modCount + 1 | 0;
    $this.$size2 = $this.$size2 + 1 | 0;
},
ju_NoSuchElementException = $rt_classWithoutFields(jl_RuntimeException),
ju_NoSuchElementException__init_0 = $this => {
    jl_RuntimeException__init_($this);
},
ju_NoSuchElementException__init_ = () => {
    let var_0 = new ju_NoSuchElementException();
    ju_NoSuchElementException__init_0(var_0);
    return var_0;
},
otcic_JSStderrPrintStream = $rt_classWithoutFields(otcic_JsConsolePrintStream),
otcic_JSStderrPrintStream__init_ = $this => {
    otcic_JsConsolePrintStream__init_($this);
},
otcic_JSStderrPrintStream__init_0 = () => {
    let var_0 = new otcic_JSStderrPrintStream();
    otcic_JSStderrPrintStream__init_(var_0);
    return var_0;
},
otcic_JSStderrPrintStream_print = ($this, $s) => {
    if ($s === null)
        $s = $rt_s(24);
    $rt_putStderr($rt_ustr($s));
},
jur_NegativeLookBehind = $rt_classWithoutFields(jur_AtomicJointSet),
jur_NegativeLookBehind__init_ = ($this, $children, $fSet) => {
    jur_AtomicJointSet__init_($this, $children, $fSet);
},
jur_NegativeLookBehind__init_0 = (var_0, var_1) => {
    let var_2 = new jur_NegativeLookBehind();
    jur_NegativeLookBehind__init_(var_2, var_0, var_1);
    return var_2;
},
jur_NegativeLookBehind_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $size, $i, $e, $shift;
    $size = $this.$children.$size();
    $matchResult.$setConsumed($this.$groupIndex, $stringIndex);
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next2.$matches($stringIndex, $testString, $matchResult);
        $e = $this.$children.$get($i);
        $shift = $e.$findBack(0, $stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jur_NegativeLookBehind_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_NegativeLookBehind_getName = $this => {
    return $rt_s(338);
},
osi_DCPPSolver_Edmonds = $rt_classWithoutFields(oc_SingleVehicleSolver),
osi_DCPPSolver_Edmonds__init_ = ($this, $instance) => {
    oc_SingleVehicleSolver__init_($this, $instance);
    $this.$mInstance = $instance;
},
osi_DCPPSolver_Edmonds__init_0 = var_0 => {
    let var_1 = new osi_DCPPSolver_Edmonds();
    osi_DCPPSolver_Edmonds__init_(var_1, var_0);
    return var_1;
},
osi_DCPPSolver_Edmonds_eulerAugment = $input => {
    let var$2, $v, $flowanswer, $indexedArcs, $i, var$7, $temp, $j, $e, $$je;
    var$2 = ($input.$getVertices0()).$iterator();
    while (var$2.$hasNext()) {
        $v = var$2.$next();
        if ($v.$getDelta())
            $v.$setDemand($v.$getDelta());
    }
    a: {
        try {
            b: {
                if (!ogu_CommonAlgorithms_isEulerian($input)) {
                    $flowanswer = ogu_CommonAlgorithms_shortestSuccessivePathsMinCostNetworkFlow($input);
                    $indexedArcs = $input.$getInternalEdgeMap();
                    $i = 1;
                    while (true) {
                        var$7 = $flowanswer.data;
                        if ($i >= var$7.length)
                            break b;
                        $temp = $indexedArcs.$get($i);
                        $j = 0;
                        while ($j < var$7[$i]) {
                            $input.$addEdge3(oli_Arc__init_($rt_s(339), $temp.$getEndpoints(), $temp.$getCost()));
                            $j = $j + 1 | 0;
                        }
                        $i = $i + 1 | 0;
                    }
                }
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_DCPPSolver_Edmonds_solve = $this => {
    let $copy, $indexedArcs, $ans, $eulerTour, $i, $ret;
    $copy = ($this.$mInstance.$getGraph()).$getDeepCopy0();
    $indexedArcs = $copy.$getInternalEdgeMap();
    osi_DCPPSolver_Edmonds_eulerAugment($copy);
    $ans = ogu_CommonAlgorithms_tryHierholzer($copy);
    $eulerTour = ori_Tour__init_();
    $i = 0;
    while ($i < $ans.$size()) {
        $eulerTour.$appendEdge0($indexedArcs.$get(($ans.$get($i)).$intValue()));
        $i = $i + 1 | 0;
    }
    $this.$mInstance.$setSol($eulerTour);
    $ret = ju_HashSet__init_();
    $ret.$add2($eulerTour);
    return $ret;
},
osi_DCPPSolver_Edmonds_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_DIRECTED;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
},
osi_DCPPSolver_Edmonds_getSolverName = $this => {
    return $rt_s(340);
},
osi_DCPPSolver_Edmonds_checkGraphRequirements = $this => {
    let $mGraph;
    if ($this.$mInstance.$getGraph() === null)
        return 0;
    $mGraph = $this.$mInstance.$getGraph();
    if (ogu_CommonAlgorithms_isStronglyConnected0($mGraph))
        return 1;
    return 0;
},
jur_BackReferenceSet = $rt_classWithoutFields(jur_CIBackReferenceSet),
jur_BackReferenceSet__init_ = ($this, $groupIndex, $consCounter) => {
    jur_CIBackReferenceSet__init_($this, $groupIndex, $consCounter);
},
jur_BackReferenceSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_BackReferenceSet();
    jur_BackReferenceSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_BackReferenceSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $group, $shift;
    $group = $this.$getString($matchResult);
    if ($group !== null && ($stringIndex + $group.$length() | 0) <= $matchResult.$getRightBound()) {
        $shift = !($testString.$toString()).$startsWith0($group, $stringIndex) ? (-1) : $group.$length();
        if ($shift < 0)
            return (-1);
        $matchResult.$setConsumed($this.$consCounter1, $shift);
        return $this.$next2.$matches($stringIndex + $shift | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_BackReferenceSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $group, $strLength, $testStr, var$7;
    $group = $this.$getString($matchResult);
    $strLength = $matchResult.$getLeftBound();
    if ($group !== null && ($strIndex + $group.$length() | 0) <= $strLength) {
        $testStr = $testString.$toString();
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            var$7 = $testStr.$indexOf2($group, $strIndex);
            if (var$7 < 0)
                return (-1);
            if ($this.$next2.$matches(var$7 + $group.$length() | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = var$7 + 1 | 0;
        }
        return var$7;
    }
    return (-1);
},
jur_BackReferenceSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $group, $testStr, var$7;
    $group = $this.$getString($matchResult);
    if ($group === null)
        return (-1);
    $testStr = $testString.$toString();
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$7 = $testStr.$lastIndexOf0($group, $lastIndex);
            if (var$7 < 0)
                break a;
            if (var$7 < $strIndex)
                break a;
            if ($this.$next2.$matches(var$7 + $group.$length() | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$7 + (-1) | 0;
        }
        return var$7;
    }
    return (-1);
},
jur_BackReferenceSet_first = ($this, $set) => {
    return 1;
},
jur_BackReferenceSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$groupIndex;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append1(jl_StringBuilder_append(var$2, $rt_s(341)), var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_AbstractCharClass$LazyLower = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyLower__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyLower__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyLower();
    jur_AbstractCharClass$LazyLower__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyLower_computeValue = $this => {
    return (jur_CharClass__init_()).$add0(97, 122);
};
function jur_DotQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$lt = null;
}
let jur_DotQuantifierSet__init_ = ($this, $innerSet, $next, $type, $lt) => {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$lt = $lt;
},
jur_DotQuantifierSet__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_DotQuantifierSet();
    jur_DotQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_DotQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $startSearch;
    $strLength = $matchResult.$getRightBound();
    $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
    if ($startSearch >= 0)
        $strLength = $startSearch;
    if ($strLength > $stringIndex)
        return $this.$next2.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_DotQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, $res, $nextSearch, var$7, $leftBound;
    $strLength = $matchResult.$getRightBound();
    $res = $this.$next2.$find($stringIndex, $testString, $matchResult);
    if ($res < 0)
        return (-1);
    $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
    if ($nextSearch >= 0)
        $strLength = $nextSearch;
    var$7 = $this.$next2.$findBack($res, $strLength, $testString, $matchResult);
    var$7 = jl_Math_max($res, var$7);
    $leftBound = var$7 > 0 ? jur_DotQuantifierSet_findBackLineTerminator($this, $stringIndex, var$7 - 1 | 0, $testString) : var$7 ? (-1) : 0;
    if ($leftBound >= $stringIndex)
        $stringIndex = $leftBound >= var$7 ? $leftBound : $leftBound + 1 | 0;
    return $stringIndex;
},
jur_DotQuantifierSet_findLineTerminator = ($this, $i, $to, $testString) => {
    while (true) {
        if ($i >= $to)
            return (-1);
        if ($this.$lt.$isLineTerminator($testString.$charAt($i)))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jur_DotQuantifierSet_findBackLineTerminator = ($this, $from, $i, $testString) => {
    while (true) {
        if ($i < $from)
            return (-1);
        if ($this.$lt.$isLineTerminator($testString.$charAt($i)))
            break;
        $i = $i + (-1) | 0;
    }
    return $i;
},
jur_DotQuantifierSet_getName = $this => {
    return $rt_s(342);
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function oc_Graph() {
    let a = this; jl_Object.call(a);
    a.$vidCounter = 0;
    a.$eidCounter = 0;
    a.$graphId = 0;
    a.$depotId = 0;
    a.$mDist = null;
    a.$mPath = null;
    a.$mEdgePath = null;
    a.$incidenceMap = null;
    a.$distGenerated = 0;
}
let oc_Graph_graphIdCounter = 0,
oc_Graph_$callClinit = () => {
    oc_Graph_$callClinit = $rt_eraseClinit(oc_Graph);
    oc_Graph__clinit_();
},
oc_Graph__init_ = $this => {
    oc_Graph_$callClinit();
    jl_Object__init_($this);
    $this.$vidCounter = 1;
    $this.$eidCounter = 1;
    $this.$depotId = 1;
    $this.$distGenerated = 0;
    $this.$incidenceMap = gt_TIntObjectHashMap__init_();
    $this.$assignGraphId();
},
oc_Graph_assignVertexId = $this => {
    $this.$vidCounter = $this.$vidCounter + 1 | 0;
    return $this.$vidCounter - 1 | 0;
},
oc_Graph_assignEdgeId = $this => {
    $this.$eidCounter = $this.$eidCounter + 1 | 0;
    return $this.$eidCounter - 1 | 0;
},
oc_Graph_assignGraphId = $this => {
    oc_Graph_$callClinit();
    oc_Graph_graphIdCounter = oc_Graph_graphIdCounter + 1 | 0;
    return oc_Graph_graphIdCounter - 1 | 0;
},
oc_Graph_getEidCounter = $this => {
    return $this.$eidCounter;
},
oc_Graph_getGraphId = $this => {
    return $this.$graphId;
},
oc_Graph_getDepotId = $this => {
    return $this.$depotId;
},
oc_Graph_setDepotId = ($this, $newDepotId) => {
    if ($newDepotId >= 0 && $newDepotId <= ($this.$getVertices()).$size()) {
        $this.$depotId = $newDepotId;
        return;
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
oc_Graph_getAllPairsDistMatrix = $this => {
    let $n, var$2, $dist, $path, $edgePath;
    if (!$this.$distGenerated) {
        $n = ($this.$getVertices()).$size();
        var$2 = $n + 1 | 0;
        $dist = $rt_createIntMultiArray([var$2, var$2]);
        $path = $rt_createIntMultiArray([var$2, var$2]);
        $edgePath = $rt_createIntMultiArray([var$2, var$2]);
        ogu_CommonAlgorithms_fwLeastCostPaths($this, $dist, $path, $edgePath);
        $this.$mDist = $dist;
        $this.$mPath = $path;
        $this.$mEdgePath = $edgePath;
        $this.$distGenerated = 1;
    }
    return $this.$mDist;
},
oc_Graph_getAllPairsPathMatrix = $this => {
    let $n, var$2, $dist, $path, $edgePath;
    if (!$this.$distGenerated) {
        $n = ($this.$getVertices()).$size();
        var$2 = $n + 1 | 0;
        $dist = $rt_createIntMultiArray([var$2, var$2]);
        $path = $rt_createIntMultiArray([var$2, var$2]);
        $edgePath = $rt_createIntMultiArray([var$2, var$2]);
        ogu_CommonAlgorithms_fwLeastCostPaths($this, $dist, $path, $edgePath);
        $this.$mDist = $dist;
        $this.$mPath = $path;
        $this.$mEdgePath = $edgePath;
        $this.$distGenerated = 1;
    }
    return $this.$mPath;
},
oc_Graph_getAllPairsEdgePathMatrix = $this => {
    let $n, var$2, $dist, $path, $edgePath;
    if (!$this.$distGenerated) {
        $n = ($this.$getVertices()).$size();
        var$2 = $n + 1 | 0;
        $dist = $rt_createIntMultiArray([var$2, var$2]);
        $path = $rt_createIntMultiArray([var$2, var$2]);
        $edgePath = $rt_createIntMultiArray([var$2, var$2]);
        ogu_CommonAlgorithms_fwLeastCostPaths($this, $dist, $path, $edgePath);
        $this.$mDist = $dist;
        $this.$mPath = $path;
        $this.$mEdgePath = $edgePath;
        $this.$distGenerated = 1;
    }
    return $this.$mEdgePath;
},
oc_Graph_onStateChange = $this => {
    $this.$distGenerated = 0;
},
oc_Graph_resetEdgeCounter = $this => {
    $this.$eidCounter = 1;
},
oc_Graph__clinit_ = () => {
    oc_Graph_graphIdCounter = 1;
};
function oc_MutableGraph() {
    let a = this; oc_Graph.call(a);
    a.$mVertices = null;
    a.$mEdges = null;
    a.$mInternalVertexMap = null;
    a.$mInternalEdgeMap = null;
}
let oc_MutableGraph_LOGGER = null,
oc_MutableGraph_$callClinit = () => {
    oc_MutableGraph_$callClinit = $rt_eraseClinit(oc_MutableGraph);
    oc_MutableGraph__clinit_();
},
oc_MutableGraph__init_ = $this => {
    oc_MutableGraph_$callClinit();
    oc_Graph__init_($this);
    $this.$mVertices = ju_HashSet__init_();
    $this.$mEdges = ju_HashSet__init_();
    $this.$mInternalVertexMap = gt_TIntObjectHashMap__init_();
    $this.$mInternalEdgeMap = gt_TIntObjectHashMap__init_();
    $this.$assignGraphId();
},
oc_MutableGraph__init_0 = ($this, $n) => {
    let $i;
    oc_MutableGraph_$callClinit();
    oc_MutableGraph__init_($this);
    $i = 0;
    while ($i < $n) {
        $this.$addVertex3($this.$constructVertex($rt_s(343)));
        $i = $i + 1 | 0;
    }
},
oc_MutableGraph_addEdge6 = ($this, $e, $matchId) => {
    $this.$addEdge9($e);
    $e.$setMatchId($matchId);
},
oc_MutableGraph_addEdge3 = ($this, $i, $j, $desc, $cost, $matchId) => {
    let $temp;
    if ($i <= ($this.$getVertices0()).$size() && $j <= ($this.$getVertices0()).$size() && $i >= 0 && $j >= 0) {
        $temp = $this.$constructEdge0($i, $j, $desc, $cost);
        $temp.$setMatchId($matchId);
        $this.$addEdge9($temp);
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_addEdge5 = ($this, $i, $j, $desc, $cost, $matchId, $isReq) => {
    let $temp;
    if ($i <= ($this.$getVertices0()).$size() && $j <= ($this.$getVertices0()).$size() && $i >= 0 && $j >= 0) {
        $temp = $this.$constructEdge0($i, $j, $desc, $cost);
        $temp.$setRequired($isReq);
        $temp.$setMatchId($matchId);
        $this.$addEdge9($temp);
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_addEdge1 = ($this, $i, $j, $cost, $matchId) => {
    let $temp;
    if ($i <= ($this.$getVertices0()).$size() && $j <= ($this.$getVertices0()).$size() && $i >= 0 && $j >= 0) {
        $temp = $this.$constructEdge0($i, $j, $rt_s(33), $cost);
        $temp.$setMatchId($matchId);
        $this.$addEdge9($temp);
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_addVertex0 = ($this, $v, $matchId) => {
    $this.$addVertex3($v);
    $v.$setMatchId($matchId);
    $v.$setFinalized(1);
},
oc_MutableGraph_getVertices0 = $this => {
    return $this.$mVertices;
},
oc_MutableGraph_getEdges = $this => {
    return $this.$mEdges;
},
oc_MutableGraph_clearEdges = $this => {
    $this.$mEdges = ju_HashSet__init_();
    $this.$mInternalEdgeMap = gt_TIntObjectHashMap__init_();
    oc_Graph_resetEdgeCounter($this);
},
oc_MutableGraph_addEdge = ($this, $e) => {
    if ($this.$mVertices.$contains0(($e.$getEndpoints()).$getFirst()) && $this.$mVertices.$contains0(($e.$getEndpoints()).$getSecond())) {
        $e.$setId($this.$assignEdgeId());
        $e.$setGraphId($this.$getGraphId());
        $this.$mEdges.$add2($e);
        $this.$mInternalEdgeMap.$put1($e.$getId(), $e);
        $this.$onStateChange();
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_addEdge2 = ($this, $i, $j, $cost) => {
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0) {
        $this.$addEdge9($this.$constructEdge0($i, $j, $rt_s(33), $cost));
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_addEdge0 = ($this, $i, $j, $cost, $isReq) => {
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0) {
        $this.$addEdge4($i, $j, $rt_s(33), $cost, $isReq);
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_addEdge7 = ($this, $i, $j, $desc, $cost) => {
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0) {
        $this.$addEdge9($this.$constructEdge0($i, $j, $desc, $cost));
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_addEdge4 = ($this, $i, $j, $desc, $cost, $isReq) => {
    let $temp;
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0) {
        $temp = $this.$constructEdge0($i, $j, $desc, $cost);
        $temp.$setRequired($isReq);
        $this.$addEdge9($temp);
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
oc_MutableGraph_getEdge = ($this, $i) => {
    if ($this.$mInternalEdgeMap.$containsKey0($i))
        return $this.$mInternalEdgeMap.$get($i);
    $rt_throw(jl_IllegalArgumentException__init_0($rt_s(344)));
},
oc_MutableGraph_addVertex = ($this, $v) => {
    $v.$setId($this.$assignVertexId());
    $v.$setGraphId($this.$getGraphId());
    $this.$mVertices.$add2($v);
    $this.$mInternalVertexMap.$put1($v.$getId(), $v);
    $this.$incidenceMap.$put1($v.$getId(), ju_HashSet__init_());
    $this.$onStateChange();
    if ($v.$isFinalized())
        oc_MutableGraph_LOGGER.$warn($rt_s(345));
},
oc_MutableGraph_getVertex = ($this, $i) => {
    if ($this.$mInternalVertexMap.$containsKey0($i))
        return $this.$mInternalVertexMap.$get($i);
    $rt_throw(jl_IllegalArgumentException__init_0($rt_s(346)));
},
oc_MutableGraph_removeEdge = ($this, $e) => {
    if (!$this.$mEdges.$contains0($e))
        $rt_throw(jl_IllegalArgumentException__init_0($rt_s(347)));
    $this.$mEdges.$remove0($e);
    $this.$mInternalEdgeMap.$remove($e.$getId());
    $this.$onStateChange();
},
oc_MutableGraph_getInternalVertexMap = $this => {
    return $this.$mInternalVertexMap;
},
oc_MutableGraph_getInternalEdgeMap = $this => {
    return $this.$mInternalEdgeMap;
},
oc_MutableGraph_getEdges0 = $this => {
    return $this.$getEdges0();
},
oc_MutableGraph_getVertices = $this => {
    return $this.$getVertices0();
},
oc_MutableGraph__clinit_ = () => {
    oc_MutableGraph_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_MutableGraph));
},
ogi_MixedGraph = $rt_classWithoutFields(oc_MutableGraph),
ogi_MixedGraph_LOGGER = null,
ogi_MixedGraph_$callClinit = () => {
    ogi_MixedGraph_$callClinit = $rt_eraseClinit(ogi_MixedGraph);
    ogi_MixedGraph__clinit_();
},
ogi_MixedGraph__init_1 = $this => {
    ogi_MixedGraph_$callClinit();
    oc_MutableGraph__init_($this);
},
ogi_MixedGraph__init_ = () => {
    let var_0 = new ogi_MixedGraph();
    ogi_MixedGraph__init_1(var_0);
    return var_0;
},
ogi_MixedGraph__init_0 = ($this, $n) => {
    ogi_MixedGraph_$callClinit();
    oc_MutableGraph__init_0($this, $n);
},
ogi_MixedGraph__init_2 = var_0 => {
    let var_1 = new ogi_MixedGraph();
    ogi_MixedGraph__init_0(var_1, var_0);
    return var_1;
},
ogi_MixedGraph_constructEdge = ($this, $i, $j, $desc, $cost, $isDirected, $isRequired) => {
    let $ret;
    if ($i <= ($this.$getVertices0()).$size() && $j <= ($this.$getVertices0()).$size() && $i >= 0 && $j >= 0) {
        $ret = oli_MixedEdge__init_($desc, ogu_Pair__init_(($this.$getInternalVertexMap()).$get($i), ($this.$getInternalVertexMap()).$get($j)), $cost, $isDirected);
        $ret.$setRequired($isRequired);
        return $ret;
    }
    ogi_MixedGraph_LOGGER.$error($rt_s(348));
    $rt_throw(oe_InvalidEndpointsException__init_());
},
ogi_MixedGraph_addEdge0 = ($this, $i, $j, $cost, $isDirected, $isRequired) => {
    let $temp;
    if ($i <= ($this.$getVertices0()).$size() && $j <= ($this.$getVertices0()).$size() && $i >= 0 && $j >= 0) {
        $temp = $this.$constructEdge1($i, $j, $rt_s(33), $cost, $isDirected, $isRequired);
        $this.$addEdge8($temp);
        return;
    }
    $rt_throw(oe_InvalidEndpointsException__init_());
},
ogi_MixedGraph_addVertex0 = ($this, $v) => {
    oc_MutableGraph_addVertex($this, $v);
},
ogi_MixedGraph_addEdge = ($this, $e) => {
    let $endpoints, $toUpdate, var$4;
    if (($this.$getVertices0()).$contains0(($e.$getEndpoints()).$getFirst()) && ($this.$getVertices0()).$contains0(($e.$getEndpoints()).$getSecond())) {
        if (!$e.$isDirected()) {
            $endpoints = $e.$getEndpoints();
            ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
            ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
            ($endpoints.$getFirst()).$addToNeighbors($endpoints.$getSecond(), $e);
            ($endpoints.$getSecond()).$addToNeighbors($endpoints.$getFirst(), $e);
            $toUpdate = $endpoints.$getFirst();
            $toUpdate.$setDegree($toUpdate.$getDegree() + 1 | 0);
            var$4 = ($e.$getEndpoints()).$getSecond();
            var$4.$setDegree(var$4.$getDegree() + 1 | 0);
            oc_MutableGraph_addEdge($this, $e);
        } else {
            (($e.$getEndpoints()).$getFirst()).$addToNeighbors(($e.$getEndpoints()).$getSecond(), $e);
            ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
            ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
            $toUpdate = ($e.$getEndpoints()).$getFirst();
            $toUpdate.$setOutDegree($toUpdate.$getOutDegree() + 1 | 0);
            $toUpdate.$setDegree($toUpdate.$getDegree() + 1 | 0);
            var$4 = ($e.$getEndpoints()).$getSecond();
            var$4.$setInDegree(var$4.$getInDegree() + 1 | 0);
            var$4.$setDegree(var$4.$getDegree() + 1 | 0);
            oc_MutableGraph_addEdge($this, $e);
        }
        return;
    }
    ogi_MixedGraph_LOGGER.$error($rt_s(349));
    $rt_throw(oe_InvalidEndpointsException__init_());
},
ogi_MixedGraph_clearEdges = $this => {
    let var$1, $v;
    oc_MutableGraph_clearEdges($this);
    var$1 = ($this.$getVertices0()).$iterator();
    while (var$1.$hasNext()) {
        $v = var$1.$next();
        $v.$setDegree(0);
        $v.$setInDegree(0);
        $v.$setOutDegree(0);
        $v.$clearNeighbors();
    }
},
ogi_MixedGraph_removeEdge = ($this, $e) => {
    let $toUpdate, var$3, $endpoints, $ex, $$je;
    if (!($this.$getEdges0()).$contains0($e)) {
        ogi_MixedGraph_LOGGER.$error($rt_s(350));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    a: {
        try {
            if ($e.$isDirected()) {
                (($e.$getEndpoints()).$getFirst()).$removeFromNeighbors(($e.$getEndpoints()).$getSecond(), $e);
                ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
                ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
                $toUpdate = ($e.$getEndpoints()).$getFirst();
                $toUpdate.$setOutDegree($toUpdate.$getOutDegree() - 1 | 0);
                var$3 = ($e.$getEndpoints()).$getSecond();
                var$3.$setInDegree(var$3.$getInDegree() - 1 | 0);
                oc_MutableGraph_removeEdge($this, $e);
            } else {
                $endpoints = $e.$getEndpoints();
                ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
                ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
                ($endpoints.$getFirst()).$removeFromNeighbors($endpoints.$getSecond(), $e);
                ($endpoints.$getSecond()).$removeFromNeighbors($endpoints.$getFirst(), $e);
                $toUpdate = $endpoints.$getFirst();
                $toUpdate.$setDegree($toUpdate.$getDegree() - 1 | 0);
                var$3 = ($e.$getEndpoints()).$getSecond();
                var$3.$setDegree(var$3.$getDegree() - 1 | 0);
                oc_MutableGraph_removeEdge($this, $e);
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $ex = $$je;
            } else {
                throw $$e;
            }
        }
        $ex.$printStackTrace0();
    }
},
ogi_MixedGraph_findEdges = ($this, $endpoints) => {
    let $ret, $temp, $first, $firstNeighbors, $second, $secondNeighbors, var$8, $me;
    $ret = ju_ArrayList__init_();
    $temp = ju_HashSet__init_();
    $first = $endpoints.$getFirst();
    $firstNeighbors = $first.$getNeighbors0();
    if ($firstNeighbors.$get1($endpoints.$getSecond()) !== null)
        $temp.$addAll($firstNeighbors.$get1($endpoints.$getSecond()));
    a: {
        $second = $endpoints.$getSecond();
        $secondNeighbors = $second.$getNeighbors0();
        if ($secondNeighbors.$get1($first) !== null) {
            var$8 = ($secondNeighbors.$get1($first)).$iterator();
            while (true) {
                if (!var$8.$hasNext())
                    break a;
                $me = var$8.$next();
                if (!$me.$isDirected())
                    $temp.$add2($me);
            }
        }
    }
    $ret.$addAll($temp);
    return $ret;
},
ogi_MixedGraph_getDeepCopy = $this => {
    let $ans, $indexedEdges, $indexedVertices, $n, $i, $temp, $temp2, $forSorting, $m, $e, $e2, $$je;
    a: {
        try {
            $ans = ogi_MixedGraph__init_();
            $indexedEdges = $this.$getInternalEdgeMap();
            $indexedVertices = $this.$getInternalVertexMap();
            $n = ($this.$getVertices0()).$size();
            $i = 1;
            while ($i <= $n) {
                $temp = ovi_MixedVertex__init_($rt_s(351));
                $temp2 = $indexedVertices.$get($i);
                if ($temp2.$isDemandSet())
                    $temp.$setDemand($temp2.$getDemand());
                $temp.$setCoordinates($temp2.$getX(), $temp2.$getY());
                $ans.$addVertex0($temp, $i);
                $i = $i + 1 | 0;
            }
            $forSorting = gt_TIntArrayList__init_0($indexedEdges.$keys());
            $forSorting.$sort1();
            $m = $forSorting.$size();
            $i = 0;
            while ($i < $m) {
                $e = $indexedEdges.$get($forSorting.$get2($i));
                $e2 = oli_MixedEdge__init_($rt_s(351), ogu_Pair__init_(($ans.$getInternalVertexMap()).$get((($e.$getEndpoints()).$getFirst()).$getId()), ($ans.$getInternalVertexMap()).$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost(), $e.$isDirected());
                $e2.$setMatchId($e.$getId());
                $e2.$setRequired($e.$isRequired());
                $e2.$setZone($e.$getZone());
                $e2.$setType0($e.$getType());
                $e2.$setMaxSpeed($e.$getMaxSpeed());
                $ans.$addEdge7($e2, $e.$getId());
                $i = $i + 1 | 0;
            }
            $ans.$setDepotId($this.$getDepotId());
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
ogi_MixedGraph_constructVertex0 = ($this, $desc) => {
    return ovi_MixedVertex__init_($desc);
},
ogi_MixedGraph_addVertex = ($this, var$1) => {
    $this.$addVertex4(var$1);
},
ogi_MixedGraph_addEdge1 = ($this, var$1) => {
    $this.$addEdge8(var$1);
},
ogi_MixedGraph_constructVertex = ($this, var$1) => {
    return $this.$constructVertex0(var$1);
},
ogi_MixedGraph__clinit_ = () => {
    ogi_MixedGraph_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ogi_MixedGraph));
},
jur_AbstractCharClass$LazyJavaTitleCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaTitleCase__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaTitleCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
    jur_AbstractCharClass$LazyJavaTitleCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaTitleCase_computeValue = $this => {
    return jur_AbstractCharClass$LazyJavaTitleCase$1__init_0($this);
};
let ot_OARLibParser = $rt_classWithoutFields(),
ot_OARLibParser_LOGGER = null,
ot_OARLibParser_$callClinit = () => {
    ot_OARLibParser_$callClinit = $rt_eraseClinit(ot_OARLibParser);
    ot_OARLibParser__clinit_();
},
ot_OARLibParser_parseWindyGraph = $content => {
    let $normalizedContent, $lines, var$4, $links, $vertices, $inLinksSection, $inVerticesSection, $numVertices, $depotId, $linkFormat, var$12, var$13, $rawLine, $line, $depot, $declaredVertices, $upper, $linkData, $vertexData, var$21, $graph, var$23, $link, $from, $to, $cost, $reverseCost, $required, $e, var$31, $vertex, var$33, $$je;
    ot_OARLibParser_$callClinit();
    ot_OARLibParser_LOGGER.$info($rt_s(352));
    if ($content !== null && !($content.$trim()).$isEmpty()) {
        $normalizedContent = ot_OARLibParser_sanitizeContent($content);
        $lines = $normalizedContent.$split($rt_s(239));
        var$4 = $lines.data;
        $links = ju_ArrayList__init_();
        $vertices = ju_ArrayList__init_();
        $inLinksSection = 0;
        $inVerticesSection = 0;
        $numVertices = 0;
        $depotId = 1;
        ot_OARLibParser$LinkFormatType_$callClinit();
        $linkFormat = ot_OARLibParser$LinkFormatType_WINDY;
        var$12 = var$4.length;
        var$13 = 0;
        while (var$13 < var$12) {
            a: {
                $rawLine = var$4[var$13];
                $line = $rawLine.$trim();
                if ($line.$isEmpty())
                    break a;
                if ($line.$startsWith1($rt_s(353)))
                    break a;
                if ($line.$contains1($rt_s(354))) {
                    $depot = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($depot === null)
                        break a;
                    $depotId = $depot.$intValue();
                    break a;
                }
                if ($line.$contains1($rt_s(355))) {
                    $declaredVertices = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($declaredVertices === null)
                        break a;
                    $numVertices = $declaredVertices.$intValue();
                    break a;
                }
                ju_Locale_$callClinit();
                $upper = $line.$toUpperCase0(ju_Locale_ROOT);
                if ($upper.$startsWith1($rt_s(356)) && !$upper.$contains1($rt_s(357))) {
                    $inLinksSection = 1;
                    $inVerticesSection = 0;
                    $linkFormat = ot_OARLibParser$LinkFormatType_WINDY;
                    break a;
                }
                if ($upper.$contains1($rt_s(358))) {
                    $inLinksSection = 0;
                    break a;
                }
                if ($upper.$startsWith1($rt_s(359)) && !$upper.$contains1($rt_s(357))) {
                    $inVerticesSection = 1;
                    $inLinksSection = 0;
                    break a;
                }
                if ($upper.$contains1($rt_s(360))) {
                    $inVerticesSection = 0;
                    break a;
                }
                if ($inLinksSection) {
                    if ($upper.$startsWith1($rt_s(361))) {
                        $linkFormat = ot_OARLibParser_resolveLinkFormat(ot_OARLibParser_extractValue($line), ot_OARLibParser$LinkFormatType_WINDY);
                        break a;
                    }
                    $linkData = ot_OARLibParser_parseLinkLine($line, $linkFormat);
                    if ($linkData !== null) {
                        $links.$add2($linkData);
                        break a;
                    }
                    ot_OARLibParser_LOGGER.$warn((((jl_StringBuilder__init_()).$append4($rt_s(362))).$append4($line)).$toString());
                    break a;
                }
                if (!$inVerticesSection)
                    break a;
                if ($upper.$startsWith1($rt_s(361)))
                    break a;
                $vertexData = ot_OARLibParser_parseVertexLine($line);
                if ($vertexData === null) {
                    ot_OARLibParser_LOGGER.$warn((((jl_StringBuilder__init_()).$append4($rt_s(363))).$append4($line)).$toString());
                    break a;
                }
                if ($vertexData.$id <= 0)
                    $vertexData.$id = $vertices.$size() + 1 | 0;
                $vertices.$add2($vertexData);
            }
            var$13 = var$13 + 1 | 0;
        }
        var$21 = ot_OARLibParser_inferVertexCount($numVertices, $links, $vertices);
        if ($links.$isEmpty())
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(364)));
        if (var$21 <= 0)
            var$21 = 150;
        ot_OARLibParser_LOGGER.$info(((((((jl_StringBuilder__init_()).$append4($rt_s(365))).$append2(var$21)).$append4($rt_s(366))).$append2($links.$size())).$append4($rt_s(367))).$toString());
        $graph = ogi_WindyGraph__init_2(var$21);
        var$23 = $links.$iterator();
        while (var$23.$hasNext()) {
            $link = var$23.$next();
            $from = $link.$v1.$intValue();
            $to = $link.$v2.$intValue();
            $cost = $link.$cost.$intValue();
            $reverseCost = $link.$reverseCost === null ? $cost : $link.$reverseCost.$intValue();
            $required = $link.$isRequired0 === null ? 1 : $link.$isRequired0.$booleanValue();
            b: {
                try {
                    $graph.$addEdge10($from, $to, $cost, $reverseCost, $required);
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                ot_OARLibParser_LOGGER.$warn((((((jl_StringBuilder__init_()).$append4($rt_s(368))).$append($link)).$append4($rt_s(369))).$append4($e.$getMessage())).$toString());
            }
        }
        var$31 = $vertices.$iterator();
        while (var$31.$hasNext()) {
            c: {
                $vertex = var$31.$next();
                if ($vertex.$id > 0 && $vertex.$id <= ($graph.$getVertices0()).$size()) {
                    try {
                        ($graph.$getVertex($vertex.$id)).$setCoordinates($vertex.$x, $vertex.$y);
                        break c;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                    ot_OARLibParser_LOGGER.$warn((((((jl_StringBuilder__init_()).$append4($rt_s(370))).$append($vertex)).$append4($rt_s(369))).$append4($e.$getMessage())).$toString());
                }
            }
        }
        d: {
            try {
                $graph.$setDepotId($depotId);
                break d;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                } else {
                    throw $$e;
                }
            }
            $graph.$setDepotId(1);
        }
        var$31 = ot_OARLibParser_LOGGER;
        var$33 = (((jl_StringBuilder__init_()).$append4($rt_s(371))).$append2(($graph.$getVertices0()).$size())).$append4($rt_s(372));
        var$33 = (var$33.$append2(($graph.$getEdges0()).$size())).$toString();
        var$31.$info(var$33);
        return $graph;
    }
    $rt_throw(jl_IllegalArgumentException__init_0($rt_s(373)));
},
ot_OARLibParser_parseDirectedGraph = $content => {
    let $normalizedContent, $lines, var$4, $links, $numVertices, $depotId, $inLinksSection, $linkFormat, var$10, var$11, $rawLine, $line, $declaredVertices, $depot, $upper, $linkData, $graph, var$19, $link, $required, $e, var$23, $$je;
    ot_OARLibParser_$callClinit();
    ot_OARLibParser_LOGGER.$info($rt_s(374));
    if ($content !== null && !($content.$trim()).$isEmpty()) {
        $normalizedContent = ot_OARLibParser_sanitizeContent($content);
        $lines = $normalizedContent.$split($rt_s(239));
        var$4 = $lines.data;
        $links = ju_ArrayList__init_();
        $numVertices = 0;
        $depotId = 1;
        $inLinksSection = 0;
        ot_OARLibParser$LinkFormatType_$callClinit();
        $linkFormat = ot_OARLibParser$LinkFormatType_DIRECTED;
        var$10 = var$4.length;
        var$11 = 0;
        while (var$11 < var$10) {
            a: {
                $rawLine = var$4[var$11];
                $line = $rawLine.$trim();
                if ($line.$isEmpty())
                    break a;
                if ($line.$startsWith1($rt_s(353)))
                    break a;
                if ($line.$contains1($rt_s(355))) {
                    $declaredVertices = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($declaredVertices === null)
                        break a;
                    $numVertices = $declaredVertices.$intValue();
                    break a;
                }
                if ($line.$contains1($rt_s(354))) {
                    $depot = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($depot === null)
                        break a;
                    $depotId = $depot.$intValue();
                    break a;
                }
                ju_Locale_$callClinit();
                $upper = $line.$toUpperCase0(ju_Locale_ROOT);
                if ($upper.$startsWith1($rt_s(356)) && !$upper.$contains1($rt_s(357))) {
                    $inLinksSection = 1;
                    $linkFormat = ot_OARLibParser$LinkFormatType_DIRECTED;
                    break a;
                }
                if (!(!$upper.$contains1($rt_s(358)) && !$upper.$contains1($rt_s(359)))) {
                    $inLinksSection = 0;
                    if ($upper.$contains1($rt_s(359)))
                        break a;
                }
                if (!$inLinksSection)
                    break a;
                if ($upper.$startsWith1($rt_s(361))) {
                    $linkFormat = ot_OARLibParser_resolveLinkFormat(ot_OARLibParser_extractValue($line), ot_OARLibParser$LinkFormatType_DIRECTED);
                    break a;
                }
                $linkData = ot_OARLibParser_parseLinkLine($line, $linkFormat);
                if ($linkData !== null) {
                    $links.$add2($linkData);
                    break a;
                }
                ot_OARLibParser_LOGGER.$warn((((jl_StringBuilder__init_()).$append4($rt_s(362))).$append4($line)).$toString());
            }
            var$11 = var$11 + 1 | 0;
        }
        var$10 = ot_OARLibParser_inferVertexCount($numVertices, $links, null);
        if ($links.$isEmpty())
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(364)));
        if (var$10 <= 0)
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(375)));
        ot_OARLibParser_LOGGER.$info(((((((jl_StringBuilder__init_()).$append4($rt_s(376))).$append2(var$10)).$append4($rt_s(366))).$append2($links.$size())).$append4($rt_s(367))).$toString());
        $graph = ogi_DirectedGraph__init_0(var$10);
        var$19 = $links.$iterator();
        while (var$19.$hasNext()) {
            $link = var$19.$next();
            $required = $link.$isRequired0 === null ? 1 : $link.$isRequired0.$booleanValue();
            b: {
                try {
                    $graph.$addEdge4($link.$v1.$intValue(), $link.$v2.$intValue(), $rt_s(377), $link.$cost.$intValue(), $required);
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                ot_OARLibParser_LOGGER.$warn((((((jl_StringBuilder__init_()).$append4($rt_s(368))).$append($link)).$append4($rt_s(369))).$append4($e.$getMessage())).$toString());
            }
        }
        c: {
            try {
                $graph.$setDepotId($depotId);
                break c;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                } else {
                    throw $$e;
                }
            }
            $graph.$setDepotId(1);
        }
        var$23 = ot_OARLibParser_LOGGER;
        var$19 = (((jl_StringBuilder__init_()).$append4($rt_s(371))).$append2(($graph.$getVertices0()).$size())).$append4($rt_s(372));
        var$19 = (var$19.$append2(($graph.$getEdges0()).$size())).$toString();
        var$23.$info(var$19);
        return $graph;
    }
    $rt_throw(jl_IllegalArgumentException__init_0($rt_s(373)));
},
ot_OARLibParser_parseUndirectedGraph = $content => {
    let $normalizedContent, $lines, var$4, $links, $numVertices, $depotId, $inLinksSection, $linkFormat, var$10, var$11, $rawLine, $line, $declaredVertices, $depot, $upper, $linkData, $graph, var$19, $link, $required, $e, var$23, $$je;
    ot_OARLibParser_$callClinit();
    ot_OARLibParser_LOGGER.$info($rt_s(378));
    if ($content !== null && !($content.$trim()).$isEmpty()) {
        $normalizedContent = ot_OARLibParser_sanitizeContent($content);
        $lines = $normalizedContent.$split($rt_s(239));
        var$4 = $lines.data;
        $links = ju_ArrayList__init_();
        $numVertices = 0;
        $depotId = 1;
        $inLinksSection = 0;
        ot_OARLibParser$LinkFormatType_$callClinit();
        $linkFormat = ot_OARLibParser$LinkFormatType_UNDIRECTED;
        var$10 = var$4.length;
        var$11 = 0;
        while (var$11 < var$10) {
            $rawLine = var$4[var$11];
            $line = $rawLine.$trim();
            if (!$line.$isEmpty() && !$line.$startsWith1($rt_s(353))) {
                if ($line.$contains1($rt_s(355))) {
                    $declaredVertices = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($declaredVertices !== null)
                        $numVertices = $declaredVertices.$intValue();
                } else if ($line.$contains1($rt_s(354))) {
                    $depot = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($depot !== null)
                        $depotId = $depot.$intValue();
                } else {
                    ju_Locale_$callClinit();
                    $upper = $line.$toUpperCase0(ju_Locale_ROOT);
                    if ($upper.$startsWith1($rt_s(356)) && !$upper.$contains1($rt_s(357))) {
                        $inLinksSection = 1;
                        $linkFormat = ot_OARLibParser$LinkFormatType_UNDIRECTED;
                    } else if (!(!$upper.$contains1($rt_s(358)) && !$upper.$contains1($rt_s(359))))
                        $inLinksSection = 0;
                    else if ($inLinksSection) {
                        if ($upper.$startsWith1($rt_s(361)))
                            $linkFormat = ot_OARLibParser_resolveLinkFormat(ot_OARLibParser_extractValue($line), ot_OARLibParser$LinkFormatType_UNDIRECTED);
                        else {
                            $linkData = ot_OARLibParser_parseLinkLine($line, $linkFormat);
                            if ($linkData !== null)
                                $links.$add2($linkData);
                            else
                                ot_OARLibParser_LOGGER.$warn((((jl_StringBuilder__init_()).$append4($rt_s(362))).$append4($line)).$toString());
                        }
                    }
                }
            }
            var$11 = var$11 + 1 | 0;
        }
        var$10 = ot_OARLibParser_inferVertexCount($numVertices, $links, null);
        if ($links.$isEmpty())
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(364)));
        if (var$10 <= 0)
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(375)));
        ot_OARLibParser_LOGGER.$info(((((((jl_StringBuilder__init_()).$append4($rt_s(379))).$append2(var$10)).$append4($rt_s(366))).$append2($links.$size())).$append4($rt_s(367))).$toString());
        $graph = ogi_UndirectedGraph__init_2(var$10);
        var$19 = $links.$iterator();
        while (var$19.$hasNext()) {
            $link = var$19.$next();
            $required = $link.$isRequired0 === null ? 1 : $link.$isRequired0.$booleanValue();
            a: {
                try {
                    $graph.$addEdge4($link.$v1.$intValue(), $link.$v2.$intValue(), $rt_s(377), $link.$cost.$intValue(), $required);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                ot_OARLibParser_LOGGER.$warn((((((jl_StringBuilder__init_()).$append4($rt_s(368))).$append($link)).$append4($rt_s(369))).$append4($e.$getMessage())).$toString());
            }
        }
        b: {
            try {
                $graph.$setDepotId($depotId);
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                } else {
                    throw $$e;
                }
            }
            $graph.$setDepotId(1);
        }
        var$23 = ot_OARLibParser_LOGGER;
        var$19 = (((jl_StringBuilder__init_()).$append4($rt_s(371))).$append2(($graph.$getVertices0()).$size())).$append4($rt_s(372));
        var$19 = (var$19.$append2(($graph.$getEdges0()).$size())).$toString();
        var$23.$info(var$19);
        return $graph;
    }
    $rt_throw(jl_IllegalArgumentException__init_0($rt_s(373)));
},
ot_OARLibParser_parseMixedGraph = $content => {
    let $normalizedContent, $lines, var$4, $links, $numVertices, $depotId, $inLinksSection, $linkFormat, var$10, var$11, $rawLine, $line, $declaredVertices, $depot, $upper, $linkData, var$18, $graph, var$20, $link, $isDirected, $required, $e, var$25, $$je;
    ot_OARLibParser_$callClinit();
    ot_OARLibParser_LOGGER.$info($rt_s(380));
    if ($content !== null && !($content.$trim()).$isEmpty()) {
        $normalizedContent = ot_OARLibParser_sanitizeContent($content);
        $lines = $normalizedContent.$split($rt_s(239));
        var$4 = $lines.data;
        $links = ju_ArrayList__init_();
        $numVertices = 0;
        $depotId = 1;
        $inLinksSection = 0;
        ot_OARLibParser$LinkFormatType_$callClinit();
        $linkFormat = ot_OARLibParser$LinkFormatType_MIXED;
        var$10 = var$4.length;
        var$11 = 0;
        while (var$11 < var$10) {
            $rawLine = var$4[var$11];
            $line = $rawLine.$trim();
            if (!$line.$isEmpty() && !$line.$startsWith1($rt_s(353))) {
                if ($line.$contains1($rt_s(355))) {
                    $declaredVertices = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($declaredVertices !== null)
                        $numVertices = $declaredVertices.$intValue();
                } else if ($line.$contains1($rt_s(354))) {
                    $depot = ot_OARLibParser_parseIntSafe(ot_OARLibParser_extractValue($line));
                    if ($depot !== null)
                        $depotId = $depot.$intValue();
                } else {
                    ju_Locale_$callClinit();
                    $upper = $line.$toUpperCase0(ju_Locale_ROOT);
                    if ($upper.$startsWith1($rt_s(356)) && !$upper.$contains1($rt_s(357))) {
                        $inLinksSection = 1;
                        $linkFormat = ot_OARLibParser$LinkFormatType_MIXED;
                    } else if (!(!$upper.$contains1($rt_s(358)) && !$upper.$contains1($rt_s(359))))
                        $inLinksSection = 0;
                    else if ($inLinksSection) {
                        if ($upper.$startsWith1($rt_s(361)))
                            $linkFormat = ot_OARLibParser_resolveLinkFormat(ot_OARLibParser_extractValue($line), ot_OARLibParser$LinkFormatType_MIXED);
                        else {
                            $linkData = ot_OARLibParser_parseLinkLine($line, $linkFormat);
                            if ($linkData !== null)
                                $links.$add2($linkData);
                            else
                                ot_OARLibParser_LOGGER.$warn((((jl_StringBuilder__init_()).$append4($rt_s(362))).$append4($line)).$toString());
                        }
                    }
                }
            }
            var$11 = var$11 + 1 | 0;
        }
        var$18 = ot_OARLibParser_inferVertexCount($numVertices, $links, null);
        if ($links.$isEmpty())
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(364)));
        if (var$18 <= 0)
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(375)));
        ot_OARLibParser_LOGGER.$info(((((((jl_StringBuilder__init_()).$append4($rt_s(381))).$append2(var$18)).$append4($rt_s(366))).$append2($links.$size())).$append4($rt_s(367))).$toString());
        $graph = ogi_MixedGraph__init_2(var$18);
        var$20 = $links.$iterator();
        while (var$20.$hasNext()) {
            $link = var$20.$next();
            $isDirected = $link.$isDirected0 === null ? 0 : $link.$isDirected0.$booleanValue();
            $required = $link.$isRequired0 === null ? 1 : $link.$isRequired0.$booleanValue();
            a: {
                try {
                    $graph.$addEdge11($link.$v1.$intValue(), $link.$v2.$intValue(), $link.$cost.$intValue(), $isDirected, $required);
                    break a;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                ot_OARLibParser_LOGGER.$warn((((((jl_StringBuilder__init_()).$append4($rt_s(368))).$append($link)).$append4($rt_s(369))).$append4($e.$getMessage())).$toString());
            }
        }
        b: {
            try {
                $graph.$setDepotId($depotId);
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Exception) {
                } else {
                    throw $$e;
                }
            }
            $graph.$setDepotId(1);
        }
        var$20 = ot_OARLibParser_LOGGER;
        var$25 = (((jl_StringBuilder__init_()).$append4($rt_s(371))).$append2(($graph.$getVertices0()).$size())).$append4($rt_s(372));
        var$25 = (var$25.$append2(($graph.$getEdges0()).$size())).$toString();
        var$20.$info(var$25);
        return $graph;
    }
    $rt_throw(jl_IllegalArgumentException__init_0($rt_s(373)));
},
ot_OARLibParser_sanitizeContent = $content => {
    let var$2;
    ot_OARLibParser_$callClinit();
    if ($content.$startsWith1($rt_s(382)))
        $content = $content.$substring0(1);
    var$2 = ($content.$replace($rt_s(383), $rt_s(239))).$replace($rt_s(384), $rt_s(239));
    return var$2;
},
ot_OARLibParser_resolveLinkFormat = ($formatSpec, $fallback) => {
    let $normalized;
    ot_OARLibParser_$callClinit();
    if ($formatSpec === null)
        return $fallback;
    ju_Locale_$callClinit();
    $normalized = $formatSpec.$toUpperCase0(ju_Locale_ROOT);
    if ($normalized.$contains1($rt_s(385))) {
        ot_OARLibParser$LinkFormatType_$callClinit();
        return ot_OARLibParser$LinkFormatType_MIXED;
    }
    if ($normalized.$contains1($rt_s(386))) {
        ot_OARLibParser$LinkFormatType_$callClinit();
        return ot_OARLibParser$LinkFormatType_WINDY;
    }
    if (!(!$normalized.$contains1($rt_s(387)) && !$normalized.$contains1($rt_s(388)))) {
        ot_OARLibParser$LinkFormatType_$callClinit();
        if ($fallback === ot_OARLibParser$LinkFormatType_DIRECTED)
            return ot_OARLibParser$LinkFormatType_DIRECTED;
        if ($fallback === ot_OARLibParser$LinkFormatType_UNDIRECTED)
            return ot_OARLibParser$LinkFormatType_UNDIRECTED;
    }
    return $fallback;
},
ot_OARLibParser_parseLinkLine = ($line, $formatType) => {
    let $rawParts, var$4, $parts, var$6, var$7, $rawPart, $trimmed, $data;
    ot_OARLibParser_$callClinit();
    $rawParts = $line.$split($rt_s(389));
    var$4 = $rawParts.data;
    $parts = ju_ArrayList__init_();
    var$6 = var$4.length;
    var$7 = 0;
    while (var$7 < var$6) {
        $rawPart = var$4[var$7];
        $trimmed = $rawPart.$trim();
        if (!$trimmed.$isEmpty())
            $parts.$add2($trimmed);
        var$7 = var$7 + 1 | 0;
    }
    if ($parts.$size() < 3)
        return null;
    $data = ot_OARLibParser$LinkData__init_0();
    $data.$v1 = ot_OARLibParser_parseIntSafe($parts.$get(0));
    $data.$v2 = ot_OARLibParser_parseIntSafe($parts.$get(1));
    $data.$cost = ot_OARLibParser_parseIntSafe($parts.$get(2));
    if ($data.$v1 !== null && $data.$v2 !== null && $data.$cost !== null) {
        a: {
            b: {
                c: {
                    switch (jl_Enum_ordinal($formatType)) {
                        case 0:
                        case 4:
                            break c;
                        case 1:
                            break b;
                        case 2:
                        case 3:
                            break;
                        default:
                            break c;
                    }
                    if ($parts.$size() < 4)
                        break a;
                    $data.$isRequired0 = ot_OARLibParser_parseBooleanToken($parts.$get(3));
                    break a;
                }
                if ($parts.$size() >= 4)
                    $data.$reverseCost = ot_OARLibParser_parseIntSafe($parts.$get(3));
                if ($parts.$size() < 5)
                    break a;
                $data.$isRequired0 = ot_OARLibParser_parseBooleanToken($parts.$get(4));
                break a;
            }
            if ($parts.$size() >= 4)
                $data.$isDirected0 = ot_OARLibParser_parseBooleanToken($parts.$get(3));
            if ($parts.$size() >= 5)
                $data.$isRequired0 = ot_OARLibParser_parseBooleanToken($parts.$get(4));
        }
        return $data;
    }
    return null;
},
ot_OARLibParser_parseVertexLine = $line => {
    let $rawParts, var$3, var$4, $data, $coordinateIndex, $maybeId, $$je;
    ot_OARLibParser_$callClinit();
    $rawParts = $line.$split($rt_s(389));
    var$3 = $rawParts.data;
    var$4 = var$3.length;
    if (var$4 < 2)
        return null;
    $data = ot_OARLibParser$VertexData__init_0();
    $coordinateIndex = 0;
    if (var$4 >= 3) {
        $maybeId = ot_OARLibParser_parseIntSafe(var$3[0]);
        if ($maybeId !== null) {
            $data.$id = $maybeId.$intValue();
            $coordinateIndex = 1;
        }
    }
    a: {
        try {
            $data.$x = jl_Double_parseDouble(var$3[$coordinateIndex].$trim());
            $data.$y = jl_Double_parseDouble(var$3[$coordinateIndex + 1 | 0].$trim());
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                break a;
            } else {
                throw $$e;
            }
        }
        return $data;
    }
    return null;
},
ot_OARLibParser_parseIntSafe = $token => {
    let $trimmed, var$3, $$je;
    ot_OARLibParser_$callClinit();
    if ($token === null)
        return null;
    $trimmed = $token.$trim();
    if ($trimmed.$isEmpty())
        return null;
    a: {
        try {
            var$3 = jl_Integer_valueOf(jl_Integer_parseInt0($trimmed));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NumberFormatException) {
                break a;
            } else {
                throw $$e;
            }
        }
        return var$3;
    }
    return null;
},
ot_OARLibParser_parseBooleanToken = $token => {
    let $trimmed, var$3, $$je;
    ot_OARLibParser_$callClinit();
    if ($token === null)
        return null;
    $trimmed = $token.$trim();
    if ($trimmed.$isEmpty())
        return null;
    if (!$trimmed.$equalsIgnoreCase($rt_s(26)) && !$trimmed.$equalsIgnoreCase($rt_s(390)) && !$trimmed.$equalsIgnoreCase($rt_s(391)) && !$trimmed.$equalsIgnoreCase($rt_s(392))) {
        if (!$trimmed.$equalsIgnoreCase($rt_s(25)) && !$trimmed.$equalsIgnoreCase($rt_s(393)) && !$trimmed.$equalsIgnoreCase($rt_s(394)) && !$trimmed.$equalsIgnoreCase($rt_s(395))) {
            if ($trimmed.$equals($rt_s(396))) {
                jl_Boolean_$callClinit();
                return jl_Boolean_TRUE;
            }
            if ($trimmed.$equals($rt_s(274))) {
                jl_Boolean_$callClinit();
                return jl_Boolean_FALSE;
            }
            a: {
                try {
                    var$3 = jl_Boolean_valueOf(!jl_Integer_parseInt0($trimmed) ? 0 : 1);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break a;
                    } else {
                        throw $$e;
                    }
                }
                return var$3;
            }
            return null;
        }
        jl_Boolean_$callClinit();
        return jl_Boolean_FALSE;
    }
    jl_Boolean_$callClinit();
    return jl_Boolean_TRUE;
},
ot_OARLibParser_extractValue = $line => {
    let $idx;
    ot_OARLibParser_$callClinit();
    $idx = $line.$indexOf3($rt_s(397));
    if ($idx >= 0 && $idx < ($line.$length() - 1 | 0))
        return ($line.$substring0($idx + 1 | 0)).$trim();
    return $rt_s(33);
},
ot_OARLibParser_inferVertexCount = ($declaredCount, $links, $vertices) => {
    let $maxId, var$5, $link, var$7, $vertex;
    ot_OARLibParser_$callClinit();
    $maxId = 0;
    if ($links !== null) {
        var$5 = $links.$iterator();
        while (var$5.$hasNext()) {
            $link = var$5.$next();
            if ($link.$v1 !== null)
                $maxId = jl_Math_max($maxId, $link.$v1.$intValue());
            if ($link.$v2 !== null)
                $maxId = jl_Math_max($maxId, $link.$v2.$intValue());
        }
    }
    if ($vertices !== null) {
        var$7 = $vertices.$iterator();
        while (var$7.$hasNext()) {
            $vertex = var$7.$next();
            if ($vertex !== null && $vertex.$id > 0)
                $maxId = jl_Math_max($maxId, $vertex.$id);
        }
    }
    if ($declaredCount > 0 && $declaredCount >= $maxId)
        return $declaredCount;
    if (!$maxId)
        $maxId = $declaredCount;
    return $maxId;
},
ot_OARLibParser__clinit_ = () => {
    ot_OARLibParser_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ot_OARLibParser));
},
ju_HashMap$ValueIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator),
ju_HashMap$ValueIterator__init_ = ($this, $map) => {
    ju_HashMap$AbstractMapIterator__init_($this, $map);
},
ju_HashMap$ValueIterator__init_0 = var_0 => {
    let var_1 = new ju_HashMap$ValueIterator();
    ju_HashMap$ValueIterator__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$ValueIterator_next = $this => {
    ju_HashMap$AbstractMapIterator_makeNext($this);
    return $this.$currentEntry.$value;
},
jur_PreviousMatch = $rt_classWithoutFields(jur_AbstractSet),
jur_PreviousMatch__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_PreviousMatch__init_0 = () => {
    let var_0 = new jur_PreviousMatch();
    jur_PreviousMatch__init_(var_0);
    return var_0;
},
jur_PreviousMatch_matches = ($this, $stringIndex, $testString, $matchResult) => {
    if ($stringIndex != $matchResult.$getPreviousMatchEnd())
        return (-1);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_PreviousMatch_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_PreviousMatch_getName = $this => {
    return $rt_s(398);
},
otcir_MethodInfo = $rt_classWithoutFields(),
jur_UnifiedQuantifierSet = $rt_classWithoutFields(jur_LeafQuantifierSet),
jur_UnifiedQuantifierSet__init_ = ($this, $quant) => {
    jur_LeafQuantifierSet__init_($this, $quant.$getInnerSet(), $quant.$getNext(), $quant.$getType0());
    $this.$innerSet.$setNext($this);
},
jur_UnifiedQuantifierSet__init_0 = var_0 => {
    let var_1 = new jur_UnifiedQuantifierSet();
    jur_UnifiedQuantifierSet__init_(var_1, var_0);
    return var_1;
},
jur_UnifiedQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4;
    while (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$getRightBound()) {
        var$4 = $this.$leaf;
        if (var$4.$accepts($stringIndex, $testString) <= 0)
            break;
        $stringIndex = $stringIndex + $this.$leaf.$charCount() | 0;
    }
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_UnifiedQuantifierSet_find = ($this, $stringIndex, $testString, $matchResult) => {
    let $startSearch, $newSearch, $newSearch_0;
    $startSearch = $this.$next2.$find($stringIndex, $testString, $matchResult);
    if ($startSearch < 0)
        return (-1);
    $newSearch = $startSearch - $this.$leaf.$charCount() | 0;
    while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
        $newSearch_0 = $newSearch - $this.$leaf.$charCount() | 0;
        $startSearch = $newSearch;
        $newSearch = $newSearch_0;
    }
    return $startSearch;
},
jlr_AnnotatedElement = $rt_classWithoutFields(0),
jlr_Type = $rt_classWithoutFields(0);
function jl_Class() {
    let a = this; jl_Object.call(a);
    a.$name0 = null;
    a.$simpleName = null;
    a.$platformClass = null;
}
let jl_Class__init_0 = ($this, $platformClass) => {
    let var$2;
    jl_Object__init_($this);
    $this.$platformClass = $platformClass;
    var$2 = $this;
    $platformClass.classObject = var$2;
},
jl_Class__init_ = var_0 => {
    let var_1 = new jl_Class();
    jl_Class__init_0(var_1, var_0);
    return var_1;
},
jl_Class_getClass = $cls => {
    let $result;
    if ($cls === null)
        return null;
    $result = $cls.classObject;
    if ($result === null)
        $result = jl_Class__init_($cls);
    return $result;
},
jl_Class_getPlatformClass = $this => {
    return $this.$platformClass;
},
jl_Class_isInstance = ($this, $obj) => {
    return otp_Platform_isInstance($obj, $this.$platformClass);
},
jl_Class_getName = $this => {
    if ($this.$name0 === null)
        $this.$name0 = otp_Platform_getName($this.$platformClass);
    return $this.$name0;
},
jl_Class_getSimpleName = $this => {
    let $name, var$2, var$3, $lastDollar, $lastDot;
    $name = jl_Class_getSimpleNameCache($this);
    if ($name === null) {
        if (jl_Class_isArray($this)) {
            var$2 = jl_Class_getSimpleName(jl_Class_getComponentType($this));
            var$3 = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append(var$3, var$2), $rt_s(399));
            $name = jl_StringBuilder_toString(var$3);
        } else if (jl_Class_getEnclosingClass($this) !== null) {
            $name = otp_Platform_getSimpleName($this.$platformClass);
            if ($name === null)
                $name = $rt_s(33);
        } else {
            $name = otp_Platform_getName($this.$platformClass);
            $lastDollar = $name.$lastIndexOf1(36);
            if ($lastDollar == (-1)) {
                $lastDot = $name.$lastIndexOf1(46);
                if ($lastDot != (-1))
                    $name = $name.$substring0($lastDot + 1 | 0);
            } else {
                $name = $name.$substring0($lastDollar + 1 | 0);
                if ($name.$charAt(0) >= 48 && $name.$charAt(0) <= 57)
                    $name = $rt_s(33);
            }
        }
        jl_Class_setSimpleNameCache($this, $name);
    }
    return $name;
},
jl_Class_getSimpleNameCache = $self => {
    return $self.$simpleName;
},
jl_Class_setSimpleNameCache = ($self, $value) => {
    $self.$simpleName = $value;
},
jl_Class_isPrimitive = $this => {
    return otp_Platform_isPrimitive($this.$platformClass);
},
jl_Class_isArray = $this => {
    return otp_Platform_getArrayItem($this.$platformClass) === null ? 0 : 1;
},
jl_Class_getComponentType = $this => {
    return jl_Class_getClass(otp_Platform_getArrayItem($this.$platformClass));
},
jl_Class_getEnclosingClass = $this => {
    let $result;
    $result = otp_Platform_getEnclosingClass(jl_Class_getPlatformClass($this));
    return $result === null ? null : jl_Class_getClass($result);
};
function ju_BitSet() {
    let a = this; jl_Object.call(a);
    a.$data = null;
    a.$length0 = 0;
}
let ju_BitSet__init_0 = $this => {
    jl_Object__init_($this);
    $this.$data = $rt_createIntArray(2);
},
ju_BitSet__init_1 = () => {
    let var_0 = new ju_BitSet();
    ju_BitSet__init_0(var_0);
    return var_0;
},
ju_BitSet__init_ = ($this, $nbits) => {
    jl_Object__init_($this);
    if ($nbits < 0)
        $rt_throw(jl_NegativeArraySizeException__init_0());
    $this.$data = $rt_createIntArray((($nbits + 32 | 0) - 1 | 0) / 32 | 0);
},
ju_BitSet__init_2 = var_0 => {
    let var_1 = new ju_BitSet();
    ju_BitSet__init_(var_1, var_0);
    return var_1;
},
ju_BitSet_set = ($this, $bitIndex) => {
    let $index, var$3;
    if ($bitIndex < 0)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    $index = $bitIndex / 32 | 0;
    if ($bitIndex >= $this.$length0) {
        ju_BitSet_ensureCapacity($this, $index + 1 | 0);
        $this.$length0 = $bitIndex + 1 | 0;
    }
    var$3 = $this.$data.data;
    var$3[$index] = var$3[$index] | 1 << ($bitIndex % 32 | 0);
},
ju_BitSet_set0 = ($this, $fromIndex, $toIndex) => {
    let var$3, $fromDataIndex, $toDataIndex, var$6, $i;
    if ($fromIndex >= 0) {
        var$3 = $rt_compare($fromIndex, $toIndex);
        if (var$3 <= 0) {
            if (!var$3)
                return;
            $fromDataIndex = $fromIndex / 32 | 0;
            $toDataIndex = $toIndex / 32 | 0;
            if ($toIndex > $this.$length0) {
                ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
                $this.$length0 = $toIndex;
            }
            if ($fromDataIndex == $toDataIndex) {
                var$6 = $this.$data.data;
                var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
            } else {
                var$6 = $this.$data.data;
                var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
                $i = $fromDataIndex + 1 | 0;
                while ($i < $toDataIndex) {
                    $this.$data.data[$i] = (-1);
                    $i = $i + 1 | 0;
                }
                if ($toIndex & 31) {
                    var$6 = $this.$data.data;
                    var$6[$toDataIndex] = var$6[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
                }
            }
            return;
        }
    }
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
ju_BitSet_trailingZeroBits = ($this, $num) => {
    let var$2;
    var$2 = $num % 32 | 0;
    return (-1) << var$2;
},
ju_BitSet_trailingOneBits = ($this, $num) => {
    let var$2;
    var$2 = $num % 32 | 0;
    return !var$2 ? 0 : (-1) >>> (32 - var$2 | 0) | 0;
},
ju_BitSet_clear0 = ($this, $bitIndex) => {
    let $index, var$3;
    if ($bitIndex < 0)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    $index = $bitIndex / 32 | 0;
    if ($index < $this.$data.data.length) {
        var$3 = $this.$data.data;
        var$3[$index] = var$3[$index] & jl_Integer_rotateLeft((-2), $bitIndex % 32 | 0);
        if ($bitIndex == ($this.$length0 - 1 | 0))
            ju_BitSet_recalculateLength($this);
    }
},
ju_BitSet_clear = ($this, $fromIndex, $toIndex) => {
    let var$3, $fromDataIndex, $toDataIndex, var$6, $i;
    if ($fromIndex >= 0 && $fromIndex <= $toIndex) {
        if ($fromIndex >= $this.$length0)
            return;
        var$3 = jl_Math_min($this.$length0, $toIndex);
        if ($fromIndex == var$3)
            return;
        $fromDataIndex = $fromIndex / 32 | 0;
        $toDataIndex = var$3 / 32 | 0;
        if ($fromDataIndex == $toDataIndex) {
            var$6 = $this.$data.data;
            var$6[$fromDataIndex] = var$6[$fromDataIndex] & (ju_BitSet_trailingOneBits($this, $fromIndex) | ju_BitSet_trailingZeroBits($this, var$3));
        } else {
            var$6 = $this.$data.data;
            var$6[$fromDataIndex] = var$6[$fromDataIndex] & ju_BitSet_trailingOneBits($this, $fromIndex);
            $i = $fromDataIndex + 1 | 0;
            while ($i < $toDataIndex) {
                $this.$data.data[$i] = 0;
                $i = $i + 1 | 0;
            }
            if (var$3 & 31) {
                var$6 = $this.$data.data;
                var$6[$toDataIndex] = var$6[$toDataIndex] & ju_BitSet_trailingZeroBits($this, var$3);
            }
        }
        ju_BitSet_recalculateLength($this);
        return;
    }
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
ju_BitSet_get = ($this, $bitIndex) => {
    let $index;
    if ($bitIndex < 0)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    $index = $bitIndex / 32 | 0;
    return $index < $this.$data.data.length && $this.$data.data[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
},
ju_BitSet_nextSetBit = ($this, $fromIndex) => {
    let $index, $val, var$4, $top, $i;
    if ($fromIndex < 0)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    if ($fromIndex >= $this.$length0)
        return (-1);
    $index = $fromIndex / 32 | 0;
    $val = $this.$data.data[$index];
    var$4 = $val >>> ($fromIndex % 32 | 0) | 0;
    if (var$4)
        return jl_Integer_numberOfTrailingZeros(var$4) + $fromIndex | 0;
    $top = ($this.$length0 + 31 | 0) / 32 | 0;
    $i = $index + 1 | 0;
    while ($i < $top) {
        if ($this.$data.data[$i])
            return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros($this.$data.data[$i]) | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
ju_BitSet_nextClearBit = ($this, $fromIndex) => {
    let $index, $val, var$4, $top, $i;
    if ($fromIndex < 0)
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    if ($fromIndex >= $this.$length0)
        return $fromIndex;
    $index = $fromIndex / 32 | 0;
    $val = $this.$data.data[$index] ^ (-1);
    var$4 = $val >>> ($fromIndex % 32 | 0) | 0;
    if (var$4)
        return jl_Integer_numberOfTrailingZeros(var$4) + $fromIndex | 0;
    $top = ($this.$length0 + 31 | 0) / 32 | 0;
    $i = $index + 1 | 0;
    while ($i < $top) {
        if ($this.$data.data[$i] != (-1))
            return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros($this.$data.data[$i] ^ (-1)) | 0;
        $i = $i + 1 | 0;
    }
    return $this.$length0;
},
ju_BitSet_ensureCapacity = ($this, $capacity) => {
    let $newArrayLength;
    if ($this.$data.data.length >= $capacity)
        return;
    $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($this.$data.data.length * 2 | 0) + 1 | 0);
    $this.$data = ju_Arrays_copyOf2($this.$data, $newArrayLength);
},
ju_BitSet_recalculateLength = $this => {
    let $top, $i, $sz;
    $top = ($this.$length0 + 31 | 0) / 32 | 0;
    $this.$length0 = $top * 32 | 0;
    $i = $top - 1 | 0;
    a: {
        while (true) {
            if ($i < 0)
                break a;
            $sz = jl_Integer_numberOfLeadingZeros($this.$data.data[$i]);
            if ($sz < 32)
                break;
            $i = $i + (-1) | 0;
            $this.$length0 = $this.$length0 - 32 | 0;
        }
        $this.$length0 = $this.$length0 - $sz | 0;
    }
},
ju_BitSet_intersects = ($this, $set) => {
    let $sz, $i;
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        if ($this.$data.data[$i] & $set.$data.data[$i])
            return 1;
        $i = $i + 1 | 0;
    }
    return 0;
},
ju_BitSet_and = ($this, $set) => {
    let $i, $i_0, var$4;
    $i = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i_0 = 0;
    while ($i_0 < $i) {
        var$4 = $this.$data.data;
        var$4[$i_0] = var$4[$i_0] & $set.$data.data[$i_0];
        $i_0 = $i_0 + 1 | 0;
    }
    while ($i < $this.$data.data.length) {
        $this.$data.data[$i] = 0;
        $i = $i + 1 | 0;
    }
    $this.$length0 = jl_Math_min($this.$length0, $set.$length0);
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_andNot = ($this, $set) => {
    let $sz, $i, var$4;
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] & ($set.$data.data[$i] ^ (-1));
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_or = ($this, $set) => {
    let $sz, $i, var$4;
    $this.$length0 = jl_Math_max($this.$length0, $set.$length0);
    ju_BitSet_ensureCapacity($this, ($this.$length0 + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] | $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
},
ju_BitSet_xor = ($this, $set) => {
    let $sz, $i, var$4;
    $this.$length0 = jl_Math_max($this.$length0, $set.$length0);
    ju_BitSet_ensureCapacity($this, ($this.$length0 + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data.data.length, $set.$data.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data.data;
        var$4[$i] = var$4[$i] ^ $set.$data.data[$i];
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
},
ju_BitSet_isEmpty = $this => {
    return $this.$length0 ? 0 : 1;
};
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$017 = null;
}
let jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1__init_ = ($this, $this$0) => {
    $this.$this$017 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1();
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains = ($this, $ch) => {
    return jl_Character_isJavaIdentifierStart($ch);
},
jur_NonCapFSet = $rt_classWithoutFields(jur_FSet),
jur_NonCapFSet__init_ = ($this, $groupIndex) => {
    jur_FSet__init_($this, $groupIndex);
},
jur_NonCapFSet__init_0 = var_0 => {
    let var_1 = new jur_NonCapFSet();
    jur_NonCapFSet__init_(var_1, var_0);
    return var_1;
},
jur_NonCapFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$getGroupIndex();
    $matchResult.$setConsumed($gr, $stringIndex - $matchResult.$getConsumed($gr) | 0);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_NonCapFSet_getName = $this => {
    return $rt_s(400);
},
jur_NonCapFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jl_Float = $rt_classWithoutFields(jl_Number),
jl_Float_TYPE = null,
jl_Float_$callClinit = () => {
    jl_Float_$callClinit = $rt_eraseClinit(jl_Float);
    jl_Float__clinit_();
},
jl_Float_compare = ($a, $b) => {
    let $diff, var$4, var$5, var$6;
    jl_Float_$callClinit();
    $diff = ($a <= $b ? 0 : 1) - ($b <= $a ? 0 : 1) | 0;
    if (!$diff) {
        var$4 = 1.0 / $a;
        var$5 = 1.0 / $b;
        var$6 = (var$4 <= var$5 ? 0 : 1) - (var$5 <= var$4 ? 0 : 1) | 0;
        $diff = (var$6 + ($b !== $b ? 0 : 1) | 0) - ($a !== $a ? 0 : 1) | 0;
    }
    return $diff;
},
jl_Float__clinit_ = () => {
    jl_Float_TYPE = $rt_cls($rt_floatcls);
},
osi_UCPPSolver_Edmonds = $rt_classWithoutFields(oc_SingleVehicleSolver),
osi_UCPPSolver_Edmonds__init_ = ($this, $instance) => {
    oc_SingleVehicleSolver__init_($this, $instance);
    $this.$mInstance = $instance;
},
osi_UCPPSolver_Edmonds__init_0 = var_0 => {
    let var_1 = new osi_UCPPSolver_Edmonds();
    osi_UCPPSolver_Edmonds__init_(var_1, var_0);
    return var_1;
},
osi_UCPPSolver_Edmonds_eulerAugment = $input => {
    let $n, var$3, $dist, $path, $edgePath, $matchingGraph, var$8, $v, $oddVertices, var$11, $v2, var$13, $matchingSolution, $p, $e, $$je;
    a: {
        try {
            $n = ($input.$getVertices0()).$size();
            var$3 = $n + 1 | 0;
            $dist = $rt_createIntMultiArray([var$3, var$3]);
            $path = $rt_createIntMultiArray([var$3, var$3]);
            $edgePath = $rt_createIntMultiArray([var$3, var$3]);
            ogu_CommonAlgorithms_fwLeastCostPaths($input, $dist, $path, $edgePath);
            $matchingGraph = ogi_UndirectedGraph__init_();
            var$8 = ($input.$getVertices0()).$iterator();
            while (var$8.$hasNext()) {
                $v = var$8.$next();
                if (($v.$getDegree() % 2 | 0) == 1)
                    $matchingGraph.$addVertex0(ovi_UndirectedVertex__init_($rt_s(245)), $v.$getId());
            }
            $oddVertices = $matchingGraph.$getVertices0();
            var$8 = $oddVertices.$iterator();
            while (var$8.$hasNext()) {
                $v = var$8.$next();
                var$11 = $oddVertices.$iterator();
                while (var$11.$hasNext()) {
                    $v2 = var$11.$next();
                    if ($v.$getId() <= $v2.$getId())
                        continue;
                    var$13 = $dist.data;
                    $matchingGraph.$addEdge0(oli_Edge__init_($rt_s(246), ogu_Pair__init_($v, $v2), var$13[$v.$getMatchId()].data[$v2.$getMatchId()]));
                }
            }
            $matchingSolution = ogu_CommonAlgorithms_minCostMatching($matchingGraph);
            var$11 = $matchingSolution.$iterator();
            while (var$11.$hasNext()) {
                $p = var$11.$next();
                ogu_CommonAlgorithms_addShortestPath($input, $dist, $path, $edgePath, ogu_Pair__init_(jl_Integer_valueOf(($p.$getFirst()).$getMatchId()), jl_Integer_valueOf(($p.$getSecond()).$getMatchId())));
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_UCPPSolver_Edmonds_solve = $this => {
    let $copy, $indexedEdges, $ans, $eulerTour, $i, $ret, $e, $$je;
    a: {
        try {
            $copy = ($this.$mInstance.$getGraph()).$getDeepCopy2();
            osi_UCPPSolver_Edmonds_eulerAugment($copy);
            $indexedEdges = $copy.$getInternalEdgeMap();
            $ans = ogu_CommonAlgorithms_tryHierholzer1($copy);
            $eulerTour = ori_Tour__init_();
            $i = 0;
            while ($i < $ans.$size()) {
                $eulerTour.$appendEdge0($indexedEdges.$get(($ans.$get($i)).$intValue()));
                $i = $i + 1 | 0;
            }
            $this.$mInstance.$setSol($eulerTour);
            $ret = ju_HashSet__init_();
            $ret.$add2($eulerTour);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ret;
    }
    $e.$printStackTrace0();
    return null;
},
osi_UCPPSolver_Edmonds_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_UNDIRECTED;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
},
osi_UCPPSolver_Edmonds_getSolverName = $this => {
    return $rt_s(401);
},
osi_UCPPSolver_Edmonds_checkGraphRequirements = $this => {
    let $mGraph;
    if ($this.$mInstance.$getGraph() === null)
        return 0;
    $mGraph = $this.$mInstance.$getGraph();
    if (ogu_CommonAlgorithms_isConnected0($mGraph))
        return 1;
    return 0;
},
ju_Arrays = $rt_classWithoutFields(),
ju_Arrays_copyOf1 = ($array, $length) => {
    let var$3, $result, $sz, $i;
    var$3 = $array.data;
    $result = $rt_createCharArray($length);
    $sz = jl_Math_min($length, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf0 = ($array, $length) => {
    let var$3, $result, $sz, $i;
    var$3 = $array.data;
    $result = $rt_createByteArray($length);
    $sz = jl_Math_min($length, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf2 = ($array, $length) => {
    let var$3, $result, $sz, $i;
    var$3 = $array.data;
    $result = $rt_createIntArray($length);
    $sz = jl_Math_min($length, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_copyOf = ($original, $newLength) => {
    let var$3, $result, $sz, $i;
    var$3 = $original.data;
    $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
    $sz = jl_Math_min($newLength, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
},
ju_Arrays_fill1 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6;
    if ($fromIndex > $toIndex)
        $rt_throw(jl_IllegalArgumentException__init_());
    while ($fromIndex < $toIndex) {
        var$5 = $a.data;
        var$6 = $fromIndex + 1 | 0;
        var$5[$fromIndex] = $val;
        $fromIndex = var$6;
    }
},
ju_Arrays_fill = ($a, $val) => {
    ju_Arrays_fill1($a, 0, $a.data.length, $val);
},
ju_Arrays_fill3 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6;
    if ($fromIndex > $toIndex)
        $rt_throw(jl_IllegalArgumentException__init_());
    while ($fromIndex < $toIndex) {
        var$5 = $a.data;
        var$6 = $fromIndex + 1 | 0;
        var$5[$fromIndex] = $val;
        $fromIndex = var$6;
    }
},
ju_Arrays_fill2 = ($a, $val) => {
    ju_Arrays_fill3($a, 0, $a.data.length, $val);
},
ju_Arrays_fill0 = ($a, $fromIndex, $toIndex, $val) => {
    let var$5, var$6;
    if ($fromIndex > $toIndex)
        $rt_throw(jl_IllegalArgumentException__init_());
    while ($fromIndex < $toIndex) {
        var$5 = $a.data;
        var$6 = $fromIndex + 1 | 0;
        var$5[$fromIndex] = $val;
        $fromIndex = var$6;
    }
},
ju_Arrays_fill4 = ($a, $val) => {
    ju_Arrays_fill0($a, 0, $a.data.length, $val);
},
ju_Arrays_sort1 = ($a, $fromIndex, $toIndex) => {
    let $subarray, $i, var$6, var$7;
    if ($fromIndex > $toIndex)
        $rt_throw(jl_IllegalArgumentException__init_());
    $subarray = $rt_createIntArray($toIndex - $fromIndex | 0);
    $i = $fromIndex;
    while ($i < $toIndex) {
        var$6 = $subarray.data;
        var$7 = $a.data;
        var$6[$i - $fromIndex | 0] = var$7[$i];
        $i = $i + 1 | 0;
    }
    ju_Arrays_sort($subarray);
    $i = $fromIndex;
    while ($i < $toIndex) {
        $a.data[$i] = $subarray.data[$i - $fromIndex | 0];
        $i = $i + 1 | 0;
    }
},
ju_Arrays_sort = $a => {
    let var$2, $second, $chunkSize, var$5, $i, var$7, var$8, $i_0, var$10, var$11;
    var$2 = $a.data.length;
    if (!var$2)
        return;
    $second = $rt_createIntArray(var$2);
    $chunkSize = 1;
    var$5 = $a;
    while ($chunkSize < var$2) {
        $i = 0;
        while (true) {
            var$7 = var$5.data.length;
            if ($i >= var$7)
                break;
            var$8 = jl_Math_min(var$7, $i + $chunkSize | 0);
            $i_0 = $i + (2 * $chunkSize | 0) | 0;
            var$10 = jl_Math_min(var$7, $i_0);
            ju_Arrays_merge(var$5, $second, $i, var$8, var$10);
            $i = $i_0;
        }
        $chunkSize = $chunkSize * 2 | 0;
        var$11 = var$5;
        var$5 = $second;
        $second = var$11;
    }
    a: {
        if (var$5 !== $a) {
            $i_0 = 0;
            while (true) {
                var$11 = var$5.data;
                if ($i_0 >= var$11.length)
                    break a;
                $second.data[$i_0] = var$11[$i_0];
                $i_0 = $i_0 + 1 | 0;
            }
        }
    }
},
ju_Arrays_merge = ($a, $b, $from, $split, $to) => {
    let var$6, $from2, var$8, $p, $q, var$11, var$12, var$13;
    var$6 = $from;
    $from2 = $split;
    a: {
        b: {
            while ($from != $split) {
                if ($from2 == $to)
                    break b;
                var$8 = $a.data;
                $p = var$8[$from];
                $q = var$8[$from2];
                if ($p > $q) {
                    var$8 = $b.data;
                    var$11 = var$6 + 1 | 0;
                    var$8[var$6] = $q;
                    $from2 = $from2 + 1 | 0;
                } else {
                    var$8 = $b.data;
                    var$11 = var$6 + 1 | 0;
                    var$8[var$6] = $p;
                    $from = $from + 1 | 0;
                }
                var$6 = var$11;
            }
            while (true) {
                if ($from2 >= $to)
                    break a;
                var$12 = $b.data;
                var$8 = $a.data;
                var$11 = var$6 + 1 | 0;
                var$13 = $from2 + 1 | 0;
                var$12[var$6] = var$8[$from2];
                var$6 = var$11;
                $from2 = var$13;
            }
        }
        while (true) {
            if ($from >= $split)
                break a;
            var$12 = $b.data;
            var$8 = $a.data;
            var$13 = var$6 + 1 | 0;
            var$11 = $from + 1 | 0;
            var$12[var$6] = var$8[$from];
            var$6 = var$13;
            $from = var$11;
        }
    }
},
ju_Arrays_sort0 = ($a, $c) => {
    let var$3, $second, $chunkSize, var$6, $i, var$8, var$9, $i_0, var$11, var$12;
    var$3 = $a.data.length;
    if (!var$3)
        return;
    if ($c === null)
        $c = ju_Comparator$NaturalOrder_instance();
    $second = $rt_createArray(jl_Object, var$3);
    $chunkSize = 1;
    var$6 = $a;
    while ($chunkSize < var$3) {
        $i = 0;
        while (true) {
            var$8 = var$6.data.length;
            if ($i >= var$8)
                break;
            var$9 = jl_Math_min(var$8, $i + $chunkSize | 0);
            $i_0 = $i + (2 * $chunkSize | 0) | 0;
            var$11 = jl_Math_min(var$8, $i_0);
            ju_Arrays_merge0(var$6, $second, $i, var$9, var$11, $c);
            $i = $i_0;
        }
        $chunkSize = $chunkSize * 2 | 0;
        var$12 = var$6;
        var$6 = $second;
        $second = var$12;
    }
    a: {
        if (var$6 !== $a) {
            $i = 0;
            while (true) {
                var$12 = var$6.data;
                if ($i >= var$12.length)
                    break a;
                $second.data[$i] = var$12[$i];
                $i = $i + 1 | 0;
            }
        }
    }
},
ju_Arrays_merge0 = ($a, $b, $from, $split, $to, $comp) => {
    let var$7, $from2, var$9, $p, $q, var$12, var$13, var$14;
    var$7 = $from;
    $from2 = $split;
    a: {
        b: {
            while ($from != $split) {
                if ($from2 == $to)
                    break b;
                var$9 = $a.data;
                $p = var$9[$from];
                $q = var$9[$from2];
                if ($comp.$compare1($p, $q) > 0) {
                    var$9 = $b.data;
                    var$12 = var$7 + 1 | 0;
                    var$9[var$7] = $q;
                    $from2 = $from2 + 1 | 0;
                } else {
                    var$9 = $b.data;
                    var$12 = var$7 + 1 | 0;
                    var$9[var$7] = $p;
                    $from = $from + 1 | 0;
                }
                var$7 = var$12;
            }
            while (true) {
                if ($from2 >= $to)
                    break a;
                var$13 = $b.data;
                var$9 = $a.data;
                var$12 = var$7 + 1 | 0;
                var$14 = $from2 + 1 | 0;
                var$13[var$7] = var$9[$from2];
                var$7 = var$12;
                $from2 = var$14;
            }
        }
        while (true) {
            if ($from >= $split)
                break a;
            var$13 = $b.data;
            var$9 = $a.data;
            var$14 = var$7 + 1 | 0;
            var$12 = $from + 1 | 0;
            var$13[var$7] = var$9[$from];
            var$7 = var$14;
            $from = var$12;
        }
    }
},
ju_Arrays_binarySearch = ($a, $key) => {
    return ju_Arrays_binarySearch1($a, 0, $a.data.length, $key);
},
ju_Arrays_binarySearch1 = ($a, $fromIndex, $toIndex, $key) => {
    let $u, var$6, $i, $e;
    if ($fromIndex > $toIndex)
        $rt_throw(jl_IllegalArgumentException__init_());
    $u = $toIndex - 1 | 0;
    while (true) {
        if ($fromIndex > $u)
            return ( -$fromIndex | 0) - 1 | 0;
        var$6 = $a.data;
        $i = ($fromIndex + $u | 0) / 2 | 0;
        $e = var$6[$i];
        if ($e == $key)
            break;
        if ($key >= $e)
            $fromIndex = $i + 1 | 0;
        else
            $u = $i - 1 | 0;
    }
    return $i;
},
ju_Arrays_binarySearch0 = ($a, $key) => {
    return ju_Arrays_binarySearch2($a, 0, $a.data.length, $key);
},
ju_Arrays_binarySearch2 = ($a, $fromIndex, $toIndex, $key) => {
    let $u, var$6, $i, $e, var$9;
    if ($fromIndex > $toIndex)
        $rt_throw(jl_IllegalArgumentException__init_());
    $u = $toIndex - 1 | 0;
    while (true) {
        if ($fromIndex > $u)
            return ( -$fromIndex | 0) - 1 | 0;
        var$6 = $a.data;
        $i = ($fromIndex + $u | 0) / 2 | 0;
        $e = var$6[$i];
        var$9 = $rt_compare($e, $key);
        if (!var$9)
            break;
        if (var$9 <= 0)
            $fromIndex = $i + 1 | 0;
        else
            $u = $i - 1 | 0;
    }
    return $i;
},
ju_Arrays_mismatchImpl4 = ($a, $aStart, $a2, $a2Start, $length) => {
    let $i, var$7;
    $i = 0;
    while (true) {
        if ($i >= $length)
            return (-1);
        var$7 = $a2.data;
        if ($a.data[$i + $aStart | 0] != var$7[$i + $a2Start | 0])
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_Arrays_equals = ($a, $a2) => {
    let var$3, var$4;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a.data.length;
        if (var$4 == var$3.length)
            return ju_Arrays_mismatchImpl4($a, 0, $a2, 0, var$4) >= 0 ? 0 : 1;
    }
    return 0;
},
ju_Arrays_mismatchImpl2 = ($a, $aStart, $a2, $a2Start, $length) => {
    let $i, var$7;
    $i = 0;
    while (true) {
        if ($i >= $length)
            return (-1);
        var$7 = $a2.data;
        if ($a.data[$i + $aStart | 0] != var$7[$i + $a2Start | 0])
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_Arrays_equals3 = ($a, $a2) => {
    let var$3, var$4;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a.data.length;
        if (var$4 == var$3.length)
            return ju_Arrays_mismatchImpl2($a, 0, $a2, 0, var$4) >= 0 ? 0 : 1;
    }
    return 0;
},
ju_Arrays_mismatchImpl = ($a, $aStart, $a2, $a2Start, $length) => {
    let $i, var$7;
    $i = 0;
    while (true) {
        if ($i >= $length)
            return (-1);
        var$7 = $a2.data;
        if ($a.data[$i + $aStart | 0] != var$7[$i + $a2Start | 0])
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_Arrays_equals5 = ($a, $a2) => {
    let var$3, var$4;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a.data.length;
        if (var$4 == var$3.length)
            return ju_Arrays_mismatchImpl($a, 0, $a2, 0, var$4) >= 0 ? 0 : 1;
    }
    return 0;
},
ju_Arrays_mismatchImpl0 = ($a, $aStart, $a2, $a2Start, $length) => {
    let $i, var$7;
    $i = 0;
    while (true) {
        if ($i >= $length)
            return (-1);
        var$7 = $a2.data;
        if ($a.data[$i + $aStart | 0] != var$7[$i + $a2Start | 0])
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_Arrays_equals2 = ($a, $a2) => {
    let var$3, var$4;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a.data.length;
        if (var$4 == var$3.length)
            return ju_Arrays_mismatchImpl0($a, 0, $a2, 0, var$4) >= 0 ? 0 : 1;
    }
    return 0;
};
let ju_Arrays_mismatchImpl1 = ($a, $aStart, $a2, $a2Start, $length) => {
    let $i;
    $i = 0;
    while (true) {
        if ($i >= $length)
            return (-1);
        if (jl_Float_compare($a.data[$i + $aStart | 0], $a2.data[$i + $a2Start | 0]))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_Arrays_equals0 = ($a, $a2) => {
    let var$3, var$4;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a.data.length;
        if (var$4 == var$3.length)
            return ju_Arrays_mismatchImpl1($a, 0, $a2, 0, var$4) >= 0 ? 0 : 1;
    }
    return 0;
},
ju_Arrays_mismatchImpl5 = ($a, $aStart, $a2, $a2Start, $length) => {
    let $i;
    $i = 0;
    while (true) {
        if ($i >= $length)
            return (-1);
        if (jl_Double_compare($a.data[$i + $aStart | 0], $a2.data[$i + $a2Start | 0]))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_Arrays_equals4 = ($a, $a2) => {
    let var$3, var$4;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a.data.length;
        if (var$4 == var$3.length)
            return ju_Arrays_mismatchImpl5($a, 0, $a2, 0, var$4) >= 0 ? 0 : 1;
    }
    return 0;
},
ju_Arrays_mismatchImpl3 = ($a, $a2, $length) => {
    let $i, var$5;
    $i = 0;
    while (true) {
        if ($i >= $length)
            return (-1);
        var$5 = $a2.data;
        if ($a.data[$i] != var$5[$i])
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
ju_Arrays_equals1 = ($a, $a2) => {
    let var$3, var$4;
    if ($a === $a2)
        return 1;
    if ($a !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a.data.length;
        if (var$4 == var$3.length)
            return ju_Arrays_mismatchImpl3($a, $a2, var$4) >= 0 ? 0 : 1;
    }
    return 0;
},
ju_Arrays_deepEquals = ($a1, $a2) => {
    let var$3, var$4, var$5, $i, $e1, $e2;
    if ($a1 === $a2)
        return 1;
    if ($a1 !== null && $a2 !== null) {
        var$3 = $a2.data;
        var$4 = $a1.data;
        var$5 = var$4.length;
        if (var$5 == var$3.length) {
            $i = 0;
            while ($i < var$5) {
                $e1 = var$4[$i];
                $e2 = var$3[$i];
                if (!ju_Objects_deepEquals($e1, $e2))
                    return 0;
                $i = $i + 1 | 0;
            }
            return 1;
        }
    }
    return 0;
};
function jur_CharSet() {
    jur_LeafSet.call(this);
    this.$ch0 = 0;
}
let jur_CharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch0 = $ch;
},
jur_CharSet__init_ = var_0 => {
    let var_1 = new jur_CharSet();
    jur_CharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CharSet_charCount = $this => {
    return 1;
},
jur_CharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch0 != $testString.$charAt($strIndex) ? (-1) : 1;
},
jur_CharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$6, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$getRightBound();
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = $testStr.$indexOf4($this.$ch0, $strIndex);
        if (var$6 < 0)
            return (-1);
        var$7 = $this.$next2;
        $strIndex = var$6 + 1 | 0;
        if (var$7.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
},
jur_CharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = $testStr.$lastIndexOf2($this.$ch0, $lastIndex);
            if (var$6 < 0)
                break a;
            if (var$6 < $strIndex)
                break a;
            if ($this.$next2.$matches(var$6 + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$6 + (-1) | 0;
        }
        return var$6;
    }
    return (-1);
},
jur_CharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch0;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(var$2, var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_CharSet_getChar = $this => {
    return $this.$ch0;
},
jur_CharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return $set.$getChar() != $this.$ch0 ? 0 : 1;
    if (!($set instanceof jur_RangeSet)) {
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains($this.$ch0);
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return $set.$accepts(0, jl_Character_toString($this.$ch0)) <= 0 ? 0 : 1;
};
function jur_UCISupplCharSet() {
    jur_LeafSet.call(this);
    this.$ch4 = 0;
}
let jur_UCISupplCharSet__init_ = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$charCount0 = 2;
    $this.$ch4 = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
},
jur_UCISupplCharSet__init_0 = var_0 => {
    let var_1 = new jur_UCISupplCharSet();
    jur_UCISupplCharSet__init_(var_1, var_0);
    return var_1;
},
jur_UCISupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let var$3, $high, $low;
    var$3 = $strIndex + 1 | 0;
    $high = $testString.$charAt($strIndex);
    $low = $testString.$charAt(var$3);
    return $this.$ch4 != jl_Character_toLowerCase0(jl_Character_toUpperCase0(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
},
jur_UCISupplCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jl_String__init_(jl_Character_toChars($this.$ch4));
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(402)), var$1);
    return jl_StringBuilder_toString(var$2);
},
jl_System = $rt_classWithoutFields(),
jl_System_outCache = null,
jl_System_errCache = null,
jl_System_out = () => {
    if (jl_System_outCache === null)
        jl_System_outCache = otcic_JSStdoutPrintStream__init_0();
    return jl_System_outCache;
},
jl_System_err = () => {
    if (jl_System_errCache === null)
        jl_System_errCache = otcic_JSStderrPrintStream__init_0();
    return jl_System_errCache;
},
jl_System_arraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    let var$6, $srcType, $targetType, $srcArray, $i, var$11, var$12, $elem;
    if ($src !== null && $dest !== null) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src)) {
            var$6 = $destPos + $length | 0;
            if (var$6 <= jlr_Array_getLength($dest)) {
                a: {
                    b: {
                        if ($src !== $dest) {
                            $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                            $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                            if ($srcType !== null && $targetType !== null) {
                                if ($srcType === $targetType)
                                    break b;
                                if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                    $srcArray = $src;
                                    $i = 0;
                                    var$6 = $srcPos;
                                    while ($i < $length) {
                                        var$11 = $srcArray.data;
                                        var$12 = var$6 + 1 | 0;
                                        $elem = var$11[var$6];
                                        if (!jl_Class_isInstance($targetType, $elem)) {
                                            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                            $rt_throw(jl_ArrayStoreException__init_());
                                        }
                                        $i = $i + 1 | 0;
                                        var$6 = var$12;
                                    }
                                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                    return;
                                }
                                if (!jl_Class_isPrimitive($srcType))
                                    break a;
                                if (jl_Class_isPrimitive($targetType))
                                    break b;
                                else
                                    break a;
                            }
                            $rt_throw(jl_ArrayStoreException__init_());
                        }
                    }
                    jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                    return;
                }
                $rt_throw(jl_ArrayStoreException__init_());
            }
        }
        $rt_throw(jl_IndexOutOfBoundsException__init_());
    }
    $rt_throw(jl_NullPointerException__init_1($rt_s(403)));
},
jl_System_fastArraycopy = ($src, $srcPos, $dest, $destPos, $length) => {
    let var$6;
    if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src)) {
        var$6 = $destPos + $length | 0;
        if (var$6 <= jlr_Array_getLength($dest)) {
            jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
            return;
        }
    }
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
jl_System_doArrayCopy = (var$1, var$2, var$3, var$4, var$5) => {
    if (var$5 !== 0) {
        if (typeof var$1.data.buffer !== 'undefined') {
            var$3.data.set(var$1.data.subarray(var$2, var$2 + var$5), var$4);
        } else if (var$1 !== var$3 || var$4 < var$2) {
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[var$4++] = var$1.data[var$2++];
            }
        } else {
            var$2 = var$2 + var$5 | 0;
            var$4 = var$4 + var$5 | 0;
            for (let i = 0;i < var$5;i = i + 1 | 0) {
                var$3.data[ --var$4] = var$1.data[ --var$2];
            }
        }
    }
},
ot_OARLibParser$LinkFormatType = $rt_classWithoutFields(jl_Enum),
ot_OARLibParser$LinkFormatType_WINDY = null,
ot_OARLibParser$LinkFormatType_MIXED = null,
ot_OARLibParser$LinkFormatType_DIRECTED = null,
ot_OARLibParser$LinkFormatType_UNDIRECTED = null,
ot_OARLibParser$LinkFormatType_UNKNOWN = null,
ot_OARLibParser$LinkFormatType_$VALUES = null,
ot_OARLibParser$LinkFormatType_$callClinit = () => {
    ot_OARLibParser$LinkFormatType_$callClinit = $rt_eraseClinit(ot_OARLibParser$LinkFormatType);
    ot_OARLibParser$LinkFormatType__clinit_();
},
ot_OARLibParser$LinkFormatType__init_0 = ($this, var$1, var$2) => {
    ot_OARLibParser$LinkFormatType_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
ot_OARLibParser$LinkFormatType__init_ = (var_0, var_1) => {
    let var_2 = new ot_OARLibParser$LinkFormatType();
    ot_OARLibParser$LinkFormatType__init_0(var_2, var_0, var_1);
    return var_2;
},
ot_OARLibParser$LinkFormatType_$values = () => {
    let var$1, var$2;
    ot_OARLibParser$LinkFormatType_$callClinit();
    var$1 = $rt_createArray(ot_OARLibParser$LinkFormatType, 5);
    var$2 = var$1.data;
    var$2[0] = ot_OARLibParser$LinkFormatType_WINDY;
    var$2[1] = ot_OARLibParser$LinkFormatType_MIXED;
    var$2[2] = ot_OARLibParser$LinkFormatType_DIRECTED;
    var$2[3] = ot_OARLibParser$LinkFormatType_UNDIRECTED;
    var$2[4] = ot_OARLibParser$LinkFormatType_UNKNOWN;
    return var$1;
},
ot_OARLibParser$LinkFormatType__clinit_ = () => {
    ot_OARLibParser$LinkFormatType_WINDY = ot_OARLibParser$LinkFormatType__init_($rt_s(266), 0);
    ot_OARLibParser$LinkFormatType_MIXED = ot_OARLibParser$LinkFormatType__init_($rt_s(265), 1);
    ot_OARLibParser$LinkFormatType_DIRECTED = ot_OARLibParser$LinkFormatType__init_($rt_s(263), 2);
    ot_OARLibParser$LinkFormatType_UNDIRECTED = ot_OARLibParser$LinkFormatType__init_($rt_s(264), 3);
    ot_OARLibParser$LinkFormatType_UNKNOWN = ot_OARLibParser$LinkFormatType__init_($rt_s(404), 4);
    ot_OARLibParser$LinkFormatType_$VALUES = ot_OARLibParser$LinkFormatType_$values();
};
function jur_CharClass$3() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt = 0;
    a.$val$cc = null;
    a.$this$04 = null;
}
let jur_CharClass$3__init_ = ($this, $this$0, var$2, var$3) => {
    $this.$this$04 = $this$0;
    $this.$val$curAlt = var$2;
    $this.$val$cc = var$3;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$3__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_CharClass$3();
    jur_CharClass$3__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_CharClass$3_contains = ($this, $ch) => {
    return !($this.$val$curAlt ^ $this.$this$04.$bits.$get0($ch)) && !($this.$val$curAlt ^ $this.$this$04.$inverted ^ $this.$val$cc.$contains($ch)) ? 0 : 1;
};
function jur_CharClass$4() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt9 = 0;
    a.$val$nb4 = null;
    a.$val$cc2 = null;
    a.$this$035 = null;
}
let jur_CharClass$4__init_ = ($this, $this$0, var$2, var$3, var$4) => {
    $this.$this$035 = $this$0;
    $this.$val$curAlt9 = var$2;
    $this.$val$nb4 = var$3;
    $this.$val$cc2 = var$4;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$4__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CharClass$4();
    jur_CharClass$4__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CharClass$4_contains = ($this, $ch) => {
    return $this.$val$curAlt9 ^ (!$this.$val$nb4.$contains($ch) && !$this.$val$cc2.$contains($ch) ? 0 : 1) ? 0 : 1;
},
opi_ProblemAttributes$NumVehicles = $rt_classWithoutFields(jl_Enum),
opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE = null,
opi_ProblemAttributes$NumVehicles_MULTI_VEHICLE = null,
opi_ProblemAttributes$NumVehicles_NO_VEHICLES = null,
opi_ProblemAttributes$NumVehicles_$VALUES = null,
opi_ProblemAttributes$NumVehicles_$callClinit = () => {
    opi_ProblemAttributes$NumVehicles_$callClinit = $rt_eraseClinit(opi_ProblemAttributes$NumVehicles);
    opi_ProblemAttributes$NumVehicles__clinit_();
},
opi_ProblemAttributes$NumVehicles__init_0 = ($this, var$1, var$2) => {
    opi_ProblemAttributes$NumVehicles_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
opi_ProblemAttributes$NumVehicles__init_ = (var_0, var_1) => {
    let var_2 = new opi_ProblemAttributes$NumVehicles();
    opi_ProblemAttributes$NumVehicles__init_0(var_2, var_0, var_1);
    return var_2;
},
opi_ProblemAttributes$NumVehicles_$values = () => {
    let var$1, var$2;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$1 = $rt_createArray(opi_ProblemAttributes$NumVehicles, 3);
    var$2 = var$1.data;
    var$2[0] = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    var$2[1] = opi_ProblemAttributes$NumVehicles_MULTI_VEHICLE;
    var$2[2] = opi_ProblemAttributes$NumVehicles_NO_VEHICLES;
    return var$1;
},
opi_ProblemAttributes$NumVehicles__clinit_ = () => {
    opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE = opi_ProblemAttributes$NumVehicles__init_($rt_s(405), 0);
    opi_ProblemAttributes$NumVehicles_MULTI_VEHICLE = opi_ProblemAttributes$NumVehicles__init_($rt_s(406), 1);
    opi_ProblemAttributes$NumVehicles_NO_VEHICLES = opi_ProblemAttributes$NumVehicles__init_($rt_s(407), 2);
    opi_ProblemAttributes$NumVehicles_$VALUES = opi_ProblemAttributes$NumVehicles_$values();
};
function jur_CharClass$1() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$cc3 = null;
    a.$this$011 = null;
}
let jur_CharClass$1__init_ = ($this, $this$0, var$2) => {
    $this.$this$011 = $this$0;
    $this.$val$cc3 = var$2;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$1__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass$1();
    jur_CharClass$1__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass$1_contains = ($this, $ch) => {
    return $this.$val$cc3.$contains($ch);
};
function jur_CharClass$2() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt0 = 0;
    a.$val$cc1 = null;
    a.$this$02 = null;
}
let jur_CharClass$2__init_ = ($this, $this$0, var$2, var$3) => {
    $this.$this$02 = $this$0;
    $this.$val$curAlt0 = var$2;
    $this.$val$cc1 = var$3;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$2__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_CharClass$2();
    jur_CharClass$2__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_CharClass$2_contains = ($this, $ch) => {
    return !($this.$val$curAlt0 ^ $this.$this$02.$bits.$get0($ch)) && !($this.$val$curAlt0 ^ $this.$this$02.$inverted ^ $this.$val$cc1.$contains($ch)) ? 1 : 0;
};
function jur_AbstractCharClass$LazyRange() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$start4 = 0;
    a.$end2 = 0;
}
let jur_AbstractCharClass$LazyRange__init_0 = ($this, $start, $end) => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
    $this.$start4 = $start;
    $this.$end2 = $end;
},
jur_AbstractCharClass$LazyRange__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyRange();
    jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyRange_computeValue = $this => {
    let $chCl;
    $chCl = (jur_CharClass__init_()).$add0($this.$start4, $this.$end2);
    return $chCl;
};
function jur_CharClass$7() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz7 = null;
    a.$this$036 = null;
}
let jur_CharClass$7__init_ = ($this, $this$0, var$2) => {
    $this.$this$036 = $this$0;
    $this.$val$clazz7 = var$2;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$7__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass$7();
    jur_CharClass$7__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass$7_contains = ($this, $ch) => {
    return $this.$val$clazz7.$contains($ch);
},
jur_AbstractCharClass$LazyXDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyXDigit__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyXDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyXDigit();
    jur_AbstractCharClass$LazyXDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyXDigit_computeValue = $this => {
    return (((jur_CharClass__init_()).$add0(48, 57)).$add0(97, 102)).$add0(65, 70);
};
function jur_CharClass$8() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz1 = null;
    a.$val$curAlt2 = 0;
    a.$this$05 = null;
}
let jur_CharClass$8__init_ = ($this, $this$0, var$2, var$3) => {
    $this.$this$05 = $this$0;
    $this.$val$clazz1 = var$2;
    $this.$val$curAlt2 = var$3;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$8__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_CharClass$8();
    jur_CharClass$8__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_CharClass$8_contains = ($this, $ch) => {
    return !$this.$val$clazz1.$contains($ch) && !($this.$val$curAlt2 ^ $this.$this$05.$bits.$get0($ch)) ? 1 : 0;
};
function jur_CharClass$5() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt7 = 0;
    a.$val$nb3 = null;
    a.$val$cc0 = null;
    a.$this$021 = null;
}
let jur_CharClass$5__init_ = ($this, $this$0, var$2, var$3, var$4) => {
    $this.$this$021 = $this$0;
    $this.$val$curAlt7 = var$2;
    $this.$val$nb3 = var$3;
    $this.$val$cc0 = var$4;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$5__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_CharClass$5();
    jur_CharClass$5__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_CharClass$5_contains = ($this, $ch) => {
    return $this.$val$curAlt7 ^ (!$this.$val$nb3.$contains($ch) && !$this.$val$cc0.$contains($ch) ? 0 : 1);
},
gt_TObjectHashingStrategy = $rt_classWithoutFields(0);
function jur_CharClass$6() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz6 = null;
    a.$this$023 = null;
}
let jur_CharClass$6__init_ = ($this, $this$0, var$2) => {
    $this.$this$023 = $this$0;
    $this.$val$clazz6 = var$2;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$6__init_0 = (var_0, var_1) => {
    let var_2 = new jur_CharClass$6();
    jur_CharClass$6__init_(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass$6_contains = ($this, $ch) => {
    return $this.$val$clazz6.$contains($ch) ? 0 : 1;
},
ju_Collections$5 = $rt_classWithoutFields(),
ju_Collections$5__init_ = $this => {
    jl_Object__init_($this);
},
ju_Collections$5__init_0 = () => {
    let var_0 = new ju_Collections$5();
    ju_Collections$5__init_(var_0);
    return var_0;
};
function ju_LinkedList$Entry() {
    let a = this; jl_Object.call(a);
    a.$item = null;
    a.$next4 = null;
    a.$previous = null;
}
let ju_LinkedList$Entry__init_0 = $this => {
    jl_Object__init_($this);
},
ju_LinkedList$Entry__init_ = () => {
    let var_0 = new ju_LinkedList$Entry();
    ju_LinkedList$Entry__init_0(var_0);
    return var_0;
},
ju_RandomAccess = $rt_classWithoutFields(0),
ju_TemplateCollections$AbstractImmutableList = $rt_classWithoutFields(ju_AbstractList),
ju_TemplateCollections$AbstractImmutableList__init_ = $this => {
    ju_AbstractList__init_($this);
},
ju_Collections$3 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableList),
ju_Collections$3__init_ = $this => {
    ju_TemplateCollections$AbstractImmutableList__init_($this);
},
ju_Collections$3__init_0 = () => {
    let var_0 = new ju_Collections$3();
    ju_Collections$3__init_(var_0);
    return var_0;
};
function jur_DotSet() {
    jur_JointSet.call(this);
    this.$lt0 = null;
}
let jur_DotSet__init_ = ($this, $lt) => {
    jur_JointSet__init_($this);
    $this.$lt0 = $lt;
},
jur_DotSet__init_0 = var_0 => {
    let var_1 = new jur_DotSet();
    jur_DotSet__init_(var_1, var_0);
    return var_1;
},
jur_DotSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $high, var$7, $low;
    $strLength = $matchResult.$getRightBound();
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = $testString.$charAt($stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        var$7 = $stringIndex + 2 | 0;
        if (var$7 <= $strLength) {
            $low = $testString.$charAt(var$5);
            if (jl_Character_isSurrogatePair($high, $low))
                return $this.$lt0.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next2.$matches(var$7, $testString, $matchResult);
        }
    }
    return $this.$lt0.$isLineTerminator($high) ? (-1) : $this.$next2.$matches(var$5, $testString, $matchResult);
},
jur_DotSet_getName = $this => {
    return $rt_s(408);
},
jur_DotSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DotSet_getType = $this => {
    return (-2147483602);
},
jur_DotSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function jur_CharClass$9() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz = null;
    a.$val$curAlt8 = 0;
    a.$this$07 = null;
}
let jur_CharClass$9__init_ = ($this, $this$0, var$2, var$3) => {
    $this.$this$07 = $this$0;
    $this.$val$clazz = var$2;
    $this.$val$curAlt8 = var$3;
    jur_AbstractCharClass__init_($this);
},
jur_CharClass$9__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_CharClass$9();
    jur_CharClass$9__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_CharClass$9_contains = ($this, $ch) => {
    return !$this.$val$clazz.$contains($ch) && !($this.$val$curAlt8 ^ $this.$this$07.$bits.$get0($ch)) ? 0 : 1;
},
ju_Collections$4 = $rt_classWithoutFields(),
ju_Collections$4__init_ = $this => {
    jl_Object__init_($this);
},
ju_Collections$4__init_0 = () => {
    let var_0 = new ju_Collections$4();
    ju_Collections$4__init_(var_0);
    return var_0;
};
function jur_Matcher() {
    let a = this; jl_Object.call(a);
    a.$pat = null;
    a.$start3 = null;
    a.$string2 = null;
    a.$matchResult = null;
    a.$leftBound = 0;
    a.$rightBound = 0;
}
let jur_Matcher_find = ($this, $start) => {
    let $stringLength, var$3;
    $stringLength = $this.$string2.$length();
    if ($start >= 0 && $start <= $stringLength) {
        var$3 = jur_Matcher_findAt($this, $start);
        if (var$3 >= 0 && $this.$matchResult.$isValid()) {
            $this.$matchResult.$finalizeMatch();
            return 1;
        }
        $this.$matchResult.$startIndex = (-1);
        return 0;
    }
    $rt_throw(jl_IndexOutOfBoundsException__init_2(jl_String_valueOf0($start)));
},
jur_Matcher_findAt = ($this, $startIndex) => {
    let $foundIndex;
    $this.$matchResult.$reset0();
    $this.$matchResult.$setMode(1);
    $this.$matchResult.$setStartIndex($startIndex);
    $foundIndex = $this.$start3.$find($startIndex, $this.$string2, $this.$matchResult);
    if ($foundIndex == (-1))
        $this.$matchResult.$hitEnd = 1;
    return $foundIndex;
},
jur_Matcher_find0 = $this => {
    let $length, var$2;
    $length = $this.$string2.$length();
    if (!jur_Matcher_hasTransparentBounds($this))
        $length = $this.$rightBound;
    if ($this.$matchResult.$startIndex >= 0 && $this.$matchResult.$mode() == 1) {
        $this.$matchResult.$startIndex = $this.$matchResult.$end0();
        if ($this.$matchResult.$end0() == $this.$matchResult.$start0()) {
            var$2 = $this.$matchResult;
            var$2.$startIndex = var$2.$startIndex + 1 | 0;
        }
        return $this.$matchResult.$startIndex <= $length && jur_Matcher_find($this, $this.$matchResult.$startIndex) ? 1 : 0;
    }
    return jur_Matcher_find($this, $this.$leftBound);
},
jur_Matcher_start0 = ($this, $group) => {
    return $this.$matchResult.$start($group);
},
jur_Matcher_end = ($this, $group) => {
    return $this.$matchResult.$end($group);
},
jur_Matcher_start = $this => {
    return jur_Matcher_start0($this, 0);
},
jur_Matcher_end0 = $this => {
    return jur_Matcher_end($this, 0);
},
jur_Matcher_hasTransparentBounds = $this => {
    return $this.$matchResult.$hasTransparentBounds();
},
jur_Matcher__init_ = ($this, $pat, $cs) => {
    let var$3, var$4, var$5, var$6, var$7;
    jl_Object__init_($this);
    $this.$leftBound = (-1);
    $this.$rightBound = (-1);
    $this.$pat = $pat;
    $this.$start3 = $pat.$start1;
    $this.$string2 = $cs;
    $this.$leftBound = 0;
    $this.$rightBound = $this.$string2.$length();
    var$3 = new jur_MatchResultImpl;
    var$4 = $this.$leftBound;
    var$5 = $this.$rightBound;
    var$6 = jur_Pattern_groupCount($pat);
    var$7 = jur_Pattern_compCount($pat);
    jur_MatchResultImpl__init_(var$3, $cs, var$4, var$5, var$6, var$7, jur_Pattern_consCount($pat));
    $this.$matchResult = var$3;
    $this.$matchResult.$useAnchoringBounds(1);
},
jur_Matcher__init_0 = (var_0, var_1) => {
    let var_2 = new jur_Matcher();
    jur_Matcher__init_(var_2, var_0, var_1);
    return var_2;
},
jl_Character = $rt_classWithoutFields(),
jl_Character_TYPE = null,
jl_Character_digitMapping = null,
jl_Character_upperCaseMapping = null,
jl_Character_lowerCaseMapping = null,
jl_Character_classMapping = null,
jl_Character_characterCache = null,
jl_Character_$$metadata$$0 = null,
jl_Character_$$metadata$$1 = null,
jl_Character_$$metadata$$3 = null,
jl_Character_$$metadata$$4 = null,
jl_Character_$callClinit = () => {
    jl_Character_$callClinit = $rt_eraseClinit(jl_Character);
    jl_Character__clinit_();
},
jl_Character_toString = $c => {
    let var$2, var$3;
    jl_Character_$callClinit();
    var$2 = new jl_String;
    var$3 = $rt_createCharArray(1);
    var$3.data[0] = $c;
    jl_String__init_0(var$2, var$3);
    return var$2;
},
jl_Character_isValidCodePoint = $codePoint => {
    jl_Character_$callClinit();
    return $codePoint >= 0 && $codePoint <= 1114111 ? 1 : 0;
},
jl_Character_isBmpCodePoint = $codePoint => {
    jl_Character_$callClinit();
    return $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
},
jl_Character_isSupplementaryCodePoint = $codePoint => {
    jl_Character_$callClinit();
    return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
},
jl_Character_isHighSurrogate = $ch => {
    jl_Character_$callClinit();
    return ($ch & 64512) != 55296 ? 0 : 1;
},
jl_Character_isLowSurrogate = $ch => {
    jl_Character_$callClinit();
    return ($ch & 64512) != 56320 ? 0 : 1;
},
jl_Character_isSurrogate = $ch => {
    jl_Character_$callClinit();
    return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
},
jl_Character_isSurrogatePair = ($high, $low) => {
    jl_Character_$callClinit();
    return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
},
jl_Character_toCodePoint = ($high, $low) => {
    jl_Character_$callClinit();
    return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
},
jl_Character_codePointAt = ($a, $index) => {
    jl_Character_$callClinit();
    return jl_Character_codePointAt0($a, $index, $a.data.length);
},
jl_Character_codePointAt0 = ($a, $index, $limit) => {
    let var$4, var$5;
    jl_Character_$callClinit();
    if ($index < $limit && $index >= 0) {
        var$4 = $a.data;
        if ($limit <= var$4.length) {
            if ($index < ($limit - 1 | 0) && jl_Character_isHighSurrogate(var$4[$index])) {
                var$5 = $index + 1 | 0;
                if (jl_Character_isLowSurrogate(var$4[var$5]))
                    return jl_Character_toCodePoint(var$4[$index], var$4[var$5]);
            }
            return var$4[$index];
        }
    }
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
jl_Character_highSurrogate = $codePoint => {
    let var$2;
    jl_Character_$callClinit();
    var$2 = $codePoint - 65536 | 0;
    return (55296 | var$2 >> 10 & 1023) & 65535;
},
jl_Character_lowSurrogate = $codePoint => {
    jl_Character_$callClinit();
    return (56320 | $codePoint & 1023) & 65535;
},
jl_Character_toLowerCase = $ch => {
    jl_Character_$callClinit();
    return jl_Character_toLowerCase0($ch) & 65535;
},
jl_Character_toLowerCase0 = $ch => {
    jl_Character_$callClinit();
    return jl_Character_mapChar(jl_Character_getLowerCaseMapping(), $ch);
},
jl_Character_getLowerCaseMapping = () => {
    let var$1;
    jl_Character_$callClinit();
    if (jl_Character_lowerCaseMapping === null) {
        var$1 = otciu_UnicodeHelper_decodeCaseMapping(((jl_Character_acquireLowerCaseMapping()).value !== null ? $rt_str((jl_Character_acquireLowerCaseMapping()).value) : null));
        jl_Character_lowerCaseMapping = otciu_UnicodeHelper_createCharMapping(var$1);
    }
    return jl_Character_lowerCaseMapping;
},
jl_Character_acquireLowerCaseMapping = () => {
    jl_Character_$callClinit();
    if (jl_Character_$$metadata$$0 === null)
        jl_Character_$$metadata$$0 = jl_Character_acquireLowerCaseMapping$$create();
    return jl_Character_$$metadata$$0;
},
jl_Character_toUpperCase = $ch => {
    jl_Character_$callClinit();
    return jl_Character_toUpperCase0($ch) & 65535;
},
jl_Character_toUpperCase0 = $codePoint => {
    jl_Character_$callClinit();
    return jl_Character_mapChar(jl_Character_getUpperCaseMapping(), $codePoint);
},
jl_Character_getUpperCaseMapping = () => {
    let var$1;
    jl_Character_$callClinit();
    if (jl_Character_upperCaseMapping === null) {
        var$1 = otciu_UnicodeHelper_decodeCaseMapping(((jl_Character_acquireUpperCaseMapping()).value !== null ? $rt_str((jl_Character_acquireUpperCaseMapping()).value) : null));
        jl_Character_upperCaseMapping = otciu_UnicodeHelper_createCharMapping(var$1);
    }
    return jl_Character_upperCaseMapping;
},
jl_Character_acquireUpperCaseMapping = () => {
    jl_Character_$callClinit();
    if (jl_Character_$$metadata$$1 === null)
        jl_Character_$$metadata$$1 = jl_Character_acquireUpperCaseMapping$$create();
    return jl_Character_$$metadata$$1;
},
jl_Character_mapChar = ($table, $codePoint) => {
    let $binSearchTable, $index, var$5, var$6;
    jl_Character_$callClinit();
    if ($codePoint < $table.$fastTable.data.length)
        return $codePoint + $table.$fastTable.data[$codePoint] | 0;
    $binSearchTable = $table.$binarySearchTable0;
    $index = jl_Character_binarySearchTable($binSearchTable, $codePoint);
    if ($index >= 0) {
        var$5 = $binSearchTable.data;
        var$6 = $index * 2 | 0;
        if (var$6 < var$5.length)
            return $codePoint + var$5[var$6 + 1 | 0] | 0;
    }
    return 0;
},
jl_Character_binarySearchTable = ($data, $key) => {
    let var$3, $l, $u, $i, $e, var$8;
    jl_Character_$callClinit();
    var$3 = $data.data;
    $l = 0;
    $u = (var$3.length / 2 | 0) - 1 | 0;
    while (true) {
        $i = ($l + $u | 0) / 2 | 0;
        $e = var$3[$i * 2 | 0];
        var$8 = $rt_compare($e, $key);
        if (!var$8)
            break;
        if (var$8 <= 0) {
            $l = $i + 1 | 0;
            if ($l > $u)
                return $i;
        } else {
            $u = $i - 1 | 0;
            if ($u < $l)
                return $u;
        }
    }
    return $i;
},
jl_Character_digit = ($ch, $radix) => {
    jl_Character_$callClinit();
    return jl_Character_digit0($ch, $radix);
},
jl_Character_digit0 = ($codePoint, $radix) => {
    let $d;
    jl_Character_$callClinit();
    if ($radix >= 2 && $radix <= 36) {
        $d = jl_Character_getNumericValue($codePoint);
        if ($d >= $radix)
            $d = (-1);
        return $d;
    }
    return (-1);
},
jl_Character_getNumericValue = $codePoint => {
    let $digitMapping, var$3, $l, $u, $idx, var$7, $val, var$9;
    jl_Character_$callClinit();
    $digitMapping = jl_Character_getDigitMapping();
    var$3 = $digitMapping.data;
    $l = 0;
    $u = (var$3.length / 2 | 0) - 1 | 0;
    while ($u >= $l) {
        $idx = ($l + $u | 0) / 2 | 0;
        var$7 = $idx * 2 | 0;
        $val = var$3[var$7];
        var$9 = $rt_compare($codePoint, $val);
        if (var$9 > 0)
            $l = $idx + 1 | 0;
        else {
            if (var$9 >= 0)
                return var$3[var$7 + 1 | 0];
            $u = $idx - 1 | 0;
        }
    }
    return (-1);
},
jl_Character_forDigit = ($digit, $radix) => {
    jl_Character_$callClinit();
    if ($radix >= 2 && $radix <= 36 && $digit >= 0 && $digit < $radix)
        return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
    return 0;
},
jl_Character_isDigit = $codePoint => {
    jl_Character_$callClinit();
    return jl_Character_getType($codePoint) != 9 ? 0 : 1;
};
let jl_Character_getDigitMapping = () => {
    jl_Character_$callClinit();
    if (jl_Character_digitMapping === null)
        jl_Character_digitMapping = otciu_UnicodeHelper_decodeIntPairsDiff(((jl_Character_obtainDigitMapping()).value !== null ? $rt_str((jl_Character_obtainDigitMapping()).value) : null));
    return jl_Character_digitMapping;
},
jl_Character_obtainDigitMapping = () => {
    jl_Character_$callClinit();
    if (jl_Character_$$metadata$$3 === null)
        jl_Character_$$metadata$$3 = jl_Character_obtainDigitMapping$$create();
    return jl_Character_$$metadata$$3;
},
jl_Character_getClasses = () => {
    jl_Character_$callClinit();
    if (jl_Character_classMapping === null)
        jl_Character_classMapping = otciu_UnicodeHelper_extractRle(((jl_Character_obtainClasses()).value !== null ? $rt_str((jl_Character_obtainClasses()).value) : null));
    return jl_Character_classMapping;
},
jl_Character_obtainClasses = () => {
    jl_Character_$callClinit();
    if (jl_Character_$$metadata$$4 === null)
        jl_Character_$$metadata$$4 = jl_Character_obtainClasses$$create();
    return jl_Character_$$metadata$$4;
},
jl_Character_toChars = $codePoint => {
    let var$2, var$3;
    jl_Character_$callClinit();
    if (!jl_Character_isValidCodePoint($codePoint))
        $rt_throw(jl_IllegalArgumentException__init_());
    if ($codePoint < 65536) {
        var$2 = $rt_createCharArray(1);
        var$2.data[0] = $codePoint & 65535;
        return var$2;
    }
    var$2 = $rt_createCharArray(2);
    var$3 = var$2.data;
    var$3[0] = jl_Character_highSurrogate($codePoint);
    var$3[1] = jl_Character_lowSurrogate($codePoint);
    return var$2;
},
jl_Character_isISOControl = $codePoint => {
    let var$2;
    jl_Character_$callClinit();
    a: {
        b: {
            if (!($codePoint >= 0 && $codePoint <= 31)) {
                if ($codePoint < 127)
                    break b;
                if ($codePoint > 159)
                    break b;
            }
            var$2 = 1;
            break a;
        }
        var$2 = 0;
    }
    return var$2;
},
jl_Character_getType0 = $c => {
    jl_Character_$callClinit();
    return jl_Character_getType($c);
},
jl_Character_getType = $codePoint => {
    let $classes, var$3, $l, $u, $i, $range;
    jl_Character_$callClinit();
    if (jl_Character_isBmpCodePoint($codePoint) && jl_Character_isSurrogate($codePoint & 65535))
        return 19;
    $classes = jl_Character_getClasses();
    var$3 = $classes.data;
    $l = 0;
    $u = var$3.length - 1 | 0;
    while ($l <= $u) {
        $i = ($l + $u | 0) / 2 | 0;
        $range = var$3[$i];
        if ($codePoint >= $range.$end1)
            $l = $i + 1 | 0;
        else {
            if ($codePoint >= $range.$start2)
                return $range.$data1.data[$codePoint - $range.$start2 | 0];
            $u = $i - 1 | 0;
        }
    }
    return 0;
},
jl_Character_isLowerCase = $codePoint => {
    jl_Character_$callClinit();
    return jl_Character_getType($codePoint) != 2 ? 0 : 1;
},
jl_Character_isUpperCase = $codePoint => {
    jl_Character_$callClinit();
    return jl_Character_getType($codePoint) != 1 ? 0 : 1;
},
jl_Character_isTitleCase = $codePoint => {
    jl_Character_$callClinit();
    return jl_Character_getType($codePoint) != 3 ? 0 : 1;
},
jl_Character_isDefined = $codePoint => {
    jl_Character_$callClinit();
    return !jl_Character_getType($codePoint) ? 0 : 1;
},
jl_Character_isLetter = $codePoint => {
    jl_Character_$callClinit();
    switch (jl_Character_getType($codePoint)) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            break;
        default:
            return 0;
    }
    return 1;
},
jl_Character_isLetterOrDigit0 = $ch => {
    jl_Character_$callClinit();
    return jl_Character_isLetterOrDigit($ch);
},
jl_Character_isLetterOrDigit = $codePoint => {
    jl_Character_$callClinit();
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
                break;
            case 6:
            case 7:
            case 8:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return 0;
},
jl_Character_isJavaIdentifierStart = $codePoint => {
    jl_Character_$callClinit();
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 10:
            case 23:
            case 26:
                break;
            case 6:
            case 7:
            case 8:
            case 9:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 24:
            case 25:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return jl_Character_isIdentifierIgnorable($codePoint);
},
jl_Character_isJavaIdentifierPart = $codePoint => {
    jl_Character_$callClinit();
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 8:
            case 9:
            case 10:
            case 23:
            case 26:
                break;
            case 7:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 24:
            case 25:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return jl_Character_isIdentifierIgnorable($codePoint);
},
jl_Character_isUnicodeIdentifierStart = $codePoint => {
    jl_Character_$callClinit();
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 10:
                break;
            case 6:
            case 7:
            case 8:
            case 9:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return jl_Character_isIdentifierIgnorable($codePoint);
},
jl_Character_isUnicodeIdentifierPart = $codePoint => {
    jl_Character_$callClinit();
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 8:
            case 9:
            case 10:
            case 23:
                break;
            case 7:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return jl_Character_isIdentifierIgnorable($codePoint);
},
jl_Character_isIdentifierIgnorable = $codePoint => {
    jl_Character_$callClinit();
    a: {
        if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
            if ($codePoint < 127)
                break a;
            if ($codePoint > 159)
                break a;
        }
        return 1;
    }
    return jl_Character_getType($codePoint) != 16 ? 0 : 1;
},
jl_Character_isSpaceChar = $codePoint => {
    jl_Character_$callClinit();
    switch (jl_Character_getType($codePoint)) {
        case 12:
        case 13:
        case 14:
            break;
        default:
            return 0;
    }
    return 1;
},
jl_Character_isWhitespace0 = $ch => {
    jl_Character_$callClinit();
    return jl_Character_isWhitespace($ch);
},
jl_Character_isWhitespace = $codePoint => {
    jl_Character_$callClinit();
    switch ($codePoint) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 28:
        case 29:
        case 30:
        case 31:
            break;
        case 160:
        case 8199:
        case 8239:
            return 0;
        default:
            return jl_Character_isSpaceChar($codePoint);
    }
    return 1;
},
jl_Character__clinit_ = () => {
    jl_Character_TYPE = $rt_cls($rt_charcls);
    jl_Character_characterCache = $rt_createArray(jl_Character, 128);
},
jl_Character_acquireLowerCaseMapping$$create = () => {
    return {"value" : "TW  H#F#U 4%F#O #F#/ d%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a1# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #<+#%# #%# #%# \'.3#%# #%# #{1#%# #w1%%# %J\'#k1#o1#%# #w1#!3# #23#*3#%# \'23#:3# #>3#%# #%# #%# #N3#%# #N3# %%# #N3#%# #J3%%# #%# #R3#%# \'%# /)#%# #)#%# #)#%# #%# #%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%# #%# %)#%# #%# #8)#L%#%# #%# #%# #"
    + "%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #a+# #%# #%# #%# #%# #%# #%# #%# #%# #%# /B45#%# #,/#645# %%# #P1#!\'#*\'#%# #%# #%# #%# #%# <-%# #%# \'%# 1&++ %_## #Z#)k%%g%% #F#W hA# 1%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# +]%# %%# #?#%# %a+\'N\'AF#b &#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #^#%# #%# #%# #%# #%# #%# #%# %%# #%# #%# #%# #%# #%# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# %*%r iB#oq-&# _?gejg#A1 a$#%# -mo%&# {-%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3,4/# #%# #%"
    + "# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 3C1 1C1 1C1 1C1 1C1 3C/ 1C1 QC1 1C1 1C1 1C%8\'%G# 7i\')G# 7C%D)\' 7C%u)%?# 7X+%P+%G# L-q*/# \'Pw/#8m/# -6## |bA G%# kC.#U !r*%&# &#%# #,05#qX\'#H.5# %%# #%# #%# #e25#D05#q25#m25# #%# %%# 1865%%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# "
    + "#%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 1%# #%# )%# (a=%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# G%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# y%%# #%# #%# #%# #%# #%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #%# 5%# #%# #4Fd#%# #%# #%# #%# #%# )%# #<{p# %%# #%# \'%# #%# #%# #%# #%# #%# #%# #%# #%# #%# #P}p#}}p#m}p#D}p#P}p# #@yp#D{p#Lyp#Br#%# #%# #%"
    + "# #%# #%# #%# #%# #%# #,%#L}p#LJd#%# #%# #$$r#%# \'%# +%# #%# #%# #P6rM \'%# ,T5F#U TUg#r {%g#r >\'c#p Lnk%F# .\'F#S HB#F#b o@5F#b Jo=N#f "};
},
jl_Character_acquireUpperCaseMapping$$create = () => {
    return {"value" : "NY  ,%H#U :#>b# vH#O #H#/:+# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #,5# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'#(;#N1# %\'# #\'# %\'# \'\'# +\'# %6)# \'\'#*/#N6r# %_+# %\'# #\'# #\'# %\'# )\'# %\'# \'\'# #\'# %\'# \'\'# #J%# +\'#+# #\'#+# #\'#+# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#L\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'#+# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
    + " #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# %665% #\'# )\'# #\'# #\'# #\'# #\'#o25#c25#k25#03#}1# #y1% #m1# #q1#{}p# \'y1#k}p# #$3#!$r#:{p#N}p# #,3#43#N}p#*05#B}p# %43# #B05#<3# %@3# /F.5# %P3# #J}p#P3# \'B{p#P3#$\'#L3%,\'# +T3# 5Jyp#>yp# Z\'_\'# x\'# #\'# \'\'\' #_+\' !#a##]#\' #H#CD##H#3m%#i%% #e%#P%# \'(%#D%#C# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#i\'#P\'#=#(+# #4)# %\'# %\'# .#H#bP\'A #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 3\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'"
    + "# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# %\'# #\'# #\'# #\'# #\'# #\'# #\'#`# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'% &#,%n mB#ko%x %ko%\' RAC1 >$#yu+#uu+#Pu+#Hu+%Lu+#0u+#io+#>@d# #\'- (+2Fd# \'oX\'# AJJd# N%\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'#"
g\')B)%V+%s)%N+)A1 1A1 1A1 1A% #E# 5<m-# )E# 9A% =A% \'=# ;E# R/8## ddA )\'# @E0#U Nr,%&# #\'# \'D45#845# #\'#"
    + " #\'# #\'# -\'# %\'# 5\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 1\'# #\'# )\'- /qq-&# i]=\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# G\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# y%\'# #\'# #\'# #\'# #\'# #\'# #\'# \'\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #"
    + "\'# #\'# #\'# #\'# #\'# #\'# #\'# 5\'# #\'# %\'# #\'# #\'# #\'# #\'# )\'# )\'# #\'#*%# %\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# 7\'# #\'# #\'# #\'# #\'# #\'# #\'# #\'# )\'# #\'# %\'\' #\'% )\'# #\'# #\'# U\'# cEDr# Yiejg# e*5H#U eUi#r {%i#r <\'e#t {nm%:# V%H#^ >B#H#b o@5H#b No=P#f "};
},
jl_Character_obtainDigitMapping$$create = () => {
    return {"value" : "kE*% %%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%_H#T#%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%{CG%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%6)G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%!i#G"
    + "%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%*;G%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%:/G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%{/G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%R@dG%%%%%%%%%%%%%%%%%%R[G%%%%%%%%%%%%%%%%%%c#G%%%%%%%%%%%%%%%%%%_1G%%%%%%%%%%%%%%%%%%!#G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%cCG%%%%%%%%%%%%%%%%%%o*IG%%%%%%%%%%%%%%%%%%A%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%=,#%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%c:#T#%%%%%%%%%%%%%%%%%%w&%G%%%%%"
    + "%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%_fG%%%%%%%%%%%%%%%%%%Z+G%%%%%%%%%%%%%%%%%%_%G%%%%%%%%%%%%%%%%%%>-G%%%%%%%%%%%%%%%%%%.9G%%%%%%%%%%%%%%%%%%w=G%%%%%%%%%%%%%%%%%%2+G%%%%%%%%%%%%%%%%%%>AG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%=G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%B\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%N)G%%%%%%%%%%%%%%%%%%oYG%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%g5G%%%%%%%%%%%%%%%%%%*\'G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%ow?G%%%%%%%%%%%%%%%%%%s4%G%%%%%%%%%%%%%%%%%%k\'G%%%%%%%%%%%%%%%%%%s+G%%%%%%%%%%%%%%"
    + "%%%%:OG%%%%%%%%%%%%%%%%%%V*OG%%%%%%%%%%%%%%%%%%VZ%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%%G%%%%%%%%%%%%%%%%%%!8%G%%%%%%%%%%%%%%%%%%FEG%%%%%%%%%%%%%%%%%%sKG%%%%%%%%%%%%%%%%%%k5G%%%%%%%%%%%%%%%%%%.lG%%%%%%%%%%%%%%%%%%wN)G%%%%%%%%%%%%%%%%%%"};
},
jl_Character_obtainClasses$$create = () => {
    return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
    + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91Y$FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,A&F9<F\' Q#A&G*FJ%G91GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F#"

    + "L+=\'=\'=\'6767I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F3G$)A*F4G#)Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1\'J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(G1ARG%)FP\')G&)\'I&\'I#F) Y#J+Y(^+G*^*Y$G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%"
    + "FEI)G)I#G#A$Y&J+A$F$J+F?E\'Y#C*!#A&BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFGb!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[BA0"
    + "G.H%\'H$G-A0^#!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^jA7^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^A b=J! BQCQ!#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?6767676"
    + "7Y&%Y+U#Y%596Y.^#Y$676767675AC^; b=:! A-b=7$ A;^1-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+FA^GA*=F1^@ L+^?L)=L0^AL+^HL0b= & &b `G!&^b&b   %b `(!F7%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#!#!#B%#!#B##A#!# # #!#!#!#!A6E$!#&"
    + "E##F(\'F$\'F%\'F8I#G#)^%\'A$L\'^#;=A\'FUY%A)I#FSI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C*%]#A%b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]2A1b&L& 76^1FbA#FWA(=AAF-;^$G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F"
    + "\'A#F\'A#F$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^.A$=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9B, B0 B( B# C, C0 C( C#A$FUA-b&X% A*F7A+F)A9E\' EK E*AgF\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+A\'J+F%%&B7A$G&5%C7A)Z#b 1$ L@ FK G#5A#F#A1F$AXG%F>L+&A)F7G,L%Y&A7F3G%Y%AGF6L(A5F8A*)\')FVG0Y(A%L5J+\'"
    + "F#G#&A*G$)FNI$G%I#G#Y#1Y%\'A+1A#F:A(J+A\'G$FEG&)G) J+Y%&I#&A)FD\'Y#&A*G#)FQI$G*I#F%Y%G%9)\'J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'F#\'A`F( & F% F0 F+9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&A,F+ &A#& FG &I$G\' )A#) I% I#\')\'&\'&Y# Y#A)G#A>FVI$G)I#G$)\'F%Y&J+Y# 9\'F$A?FQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&9A\'J+A\'J5A=F<A#\')\'I#G%)G&A%J+L#Y$=F(b Z# FMI$G*)G#9b E! BACAJ+L*A-F)A#&A#F) F# F9I\' I#A#G#)\'&)&)\'Y$A*J+AhF)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%"
    + "Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A.FkA(Y+b W# FB9A/J+A\'F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF( F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#A(G#&)F. FCI#G&A$I#\')\'Y.J+\'b 6! &A0L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b -J b&B! Y#A.b&Q1 Q1\'F\'G0A+b&<` A&b&(* b ZK!F?G-I$G$J+b \'< b&Z) A(F@ J+A%Y#Fq J+A\'F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q\' E$FIE#Y$J+b \'$ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%\'A,I#A/&b W@!&A)b&74 AJF#A(&b H,#E% E( E# b&D% A0&A>F$A#&A/F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =_ b=Q$ J+A\'b=U\'"
    + " AnGOA#G8A*b=U! A^b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^_A6^dG$=b [! L5A-L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) B( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 12 C+&C5A\'C\'b 6$ G( G2A#G( G# G&A&E`AB\'b Q! FNA$G(E(A#J+A%&=b  & F?\'A2FMG%J+A&;b 1( F<%G%J+b 7$ F?G#&J+A%9b A( F( F% F# F0 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN=L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% "
    + "F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.b=B# AY^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=9, A%^2A$^.A$b=X! A%b=@! A\'^-A%=A0^-A%^YA)^+A\'^IA)^?A#^-A%^#A`b=5& A-^/A#^.A$^+A&^YA(^0A#^,A\'^*A(b=4#  b==! J+b \'1 &b   %b   %b ?<#&AA&b Y !&A\'&b =$ &A#&b  ;!&A/&b PU!&A0&b M* &b CG b&?) b C8 &b *.!&A&&b ?!!&b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   "
    + "%b   %b 2R!1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
},
ju_TemplateCollections$AbstractImmutableSet = $rt_classWithoutFields(ju_AbstractSet),
ju_TemplateCollections$AbstractImmutableSet__init_ = $this => {
    ju_AbstractSet__init_($this);
},
ju_Collections$1 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableSet),
ju_Collections$1__init_ = $this => {
    ju_TemplateCollections$AbstractImmutableSet__init_($this);
},
ju_Collections$1__init_0 = () => {
    let var_0 = new ju_Collections$1();
    ju_Collections$1__init_(var_0);
    return var_0;
},
jur_DotAllSet = $rt_classWithoutFields(jur_JointSet),
jur_DotAllSet__init_ = $this => {
    jur_JointSet__init_($this);
},
jur_DotAllSet__init_0 = () => {
    let var_0 = new jur_DotAllSet();
    jur_DotAllSet__init_(var_0);
    return var_0;
},
jur_DotAllSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $high, var$7, $low;
    $strLength = $matchResult.$getRightBound();
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = $testString.$charAt($stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        var$7 = $stringIndex + 2 | 0;
        if (var$7 <= $strLength) {
            $low = $testString.$charAt(var$5);
            if (jl_Character_isSurrogatePair($high, $low))
                return $this.$next2.$matches(var$7, $testString, $matchResult);
        }
    }
    return $this.$next2.$matches(var$5, $testString, $matchResult);
},
jur_DotAllSet_getName = $this => {
    return $rt_s(409);
},
jur_DotAllSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_DotAllSet_getType = $this => {
    return (-2147483602);
},
jur_DotAllSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
ju_Collections$2 = $rt_classWithoutFields(ju_TemplateCollections$AbstractImmutableMap),
ju_Collections$2__init_ = $this => {
    ju_TemplateCollections$AbstractImmutableMap__init_($this);
},
ju_Collections$2__init_0 = () => {
    let var_0 = new ju_Collections$2();
    ju_Collections$2__init_(var_0);
    return var_0;
};
function jur_CICharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$ch3 = 0;
    a.$supplement = 0;
}
let jur_CICharSet__init_0 = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch3 = $ch;
    $this.$supplement = jur_Pattern_getSupplement($ch);
},
jur_CICharSet__init_ = var_0 => {
    let var_1 = new jur_CICharSet();
    jur_CICharSet__init_0(var_1, var_0);
    return var_1;
},
jur_CICharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch3 != $testString.$charAt($strIndex) && $this.$supplement != $testString.$charAt($strIndex) ? (-1) : 1;
},
jur_CICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch3;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(410)), var$1);
    return jl_StringBuilder_toString(var$2);
};
function jur_SupplCharSet() {
    let a = this; jur_LeafSet.call(a);
    a.$high0 = 0;
    a.$low0 = 0;
    a.$ch1 = 0;
}
let jur_SupplCharSet__init_ = ($this, $ch) => {
    let $chUTF16, var$3;
    jur_LeafSet__init_($this);
    $this.$charCount0 = 2;
    $this.$ch1 = $ch;
    $chUTF16 = jl_Character_toChars($ch);
    var$3 = $chUTF16.data;
    $this.$high0 = var$3[0];
    $this.$low0 = var$3[1];
},
jur_SupplCharSet__init_0 = var_0 => {
    let var_1 = new jur_SupplCharSet();
    jur_SupplCharSet__init_(var_1, var_0);
    return var_1;
},
jur_SupplCharSet_accepts = ($this, $strIndex, $testString) => {
    let var$3, $high, $low;
    var$3 = $strIndex + 1 | 0;
    $high = $testString.$charAt($strIndex);
    $low = $testString.$charAt(var$3);
    return $this.$high0 == $high && $this.$low0 == $low ? 2 : (-1);
},
jur_SupplCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$6, $ch;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$getRightBound();
    while ($strIndex < $strLength) {
        var$6 = $testStr.$indexOf4($this.$high0, $strIndex);
        if (var$6 < 0)
            return (-1);
        $strIndex = var$6 + 1 | 0;
        if ($strIndex >= $strLength)
            continue;
        $ch = $testStr.$charAt($strIndex);
        if ($this.$low0 == $ch && $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult) >= 0)
            return $strIndex + (-1) | 0;
        $strIndex = $strIndex + 1 | 0;
    }
    return (-1);
},
jur_SupplCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr, var$6, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = $testStr.$lastIndexOf2($this.$low0, $lastIndex);
            var$7 = var$6 + (-1) | 0;
            if (var$7 < 0)
                break a;
            if (var$7 < $strIndex)
                break a;
            if ($this.$high0 == $testStr.$charAt(var$7) && $this.$next2.$matches(var$7 + 2 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$7 + (-1) | 0;
        }
        return var$7;
    }
    return (-1);
},
jur_SupplCharSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = $this.$high0;
    var$2 = $this.$low0;
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(jl_StringBuilder_append0(var$3, var$1), var$2);
    return jl_StringBuilder_toString(var$3);
},
jur_SupplCharSet_getCodePoint = $this => {
    return $this.$ch1;
},
jur_SupplCharSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return $set.$getCodePoint() != $this.$ch1 ? 0 : 1;
    if ($set instanceof jur_SupplRangeSet)
        return $set.$contains($this.$ch1);
    if ($set instanceof jur_CharSet)
        return 0;
    if (!($set instanceof jur_RangeSet))
        return 1;
    return 0;
};
function jur_AbstractCharClass$LazyJavaLowerCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$038 = null;
}
let jur_AbstractCharClass$LazyJavaLowerCase$1__init_ = ($this, $this$0) => {
    $this.$this$038 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaLowerCase$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaLowerCase$1();
    jur_AbstractCharClass$LazyJavaLowerCase$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaLowerCase$1_contains = ($this, $ch) => {
    return jl_Character_isLowerCase($ch);
},
gt_TObjectHash$NULL = $rt_classWithoutFields(),
gt_TObjectHash$NULL__init_ = $this => {
    jl_Object__init_($this);
},
gt_TObjectHash$NULL__init_0 = () => {
    let var_0 = new gt_TObjectHash$NULL();
    gt_TObjectHash$NULL__init_(var_0);
    return var_0;
};
function ovi_MixedVertex() {
    let a = this; oc_Vertex.call(a);
    a.$inDegree0 = 0;
    a.$outDegree0 = 0;
    a.$degree1 = 0;
    a.$neighbors = null;
}
let ovi_MixedVertex__init_0 = ($this, $label) => {
    oc_Vertex__init_($this, $label);
    $this.$setInDegree(0);
    $this.$setOutDegree(0);
    $this.$setDegree(0);
    $this.$neighbors = ju_HashMap__init_();
},
ovi_MixedVertex__init_ = var_0 => {
    let var_1 = new ovi_MixedVertex();
    ovi_MixedVertex__init_0(var_1, var_0);
    return var_1;
},
ovi_MixedVertex_addToNeighbors = ($this, $v, $e) => {
    let $ex, $$je;
    a: {
        try {
            b: {
                if ($e.$isDirected()) {
                    if ($e.$getTail0() === $this && $e.$getHead0() === $v && $this.$getGraphId() == $v.$getGraphId())
                        break b;
                    $rt_throw(jl_IllegalArgumentException__init_());
                }
                if (!(!(($e.$getEndpoints()).$getFirst() !== $this && ($e.$getEndpoints()).$getSecond() !== $this) && !(($e.$getEndpoints()).$getFirst() !== $v && ($e.$getEndpoints()).$getSecond() !== $v) && $this.$getGraphId() == $v.$getGraphId()))
                    $rt_throw(jl_IllegalArgumentException__init_());
            }
            if (!$this.$neighbors.$containsKey($v))
                $this.$neighbors.$put($v, ju_ArrayList__init_());
            ($this.$neighbors.$get1($v)).$add2($e);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $ex = $$je;
            } else {
                throw $$e;
            }
        }
        $ex.$printStackTrace0();
    }
},
ovi_MixedVertex_removeFromNeighbors = ($this, $v, $a) => {
    if ($this.$neighbors.$containsKey($v) && ($this.$neighbors.$get1($v)).$contains0($a)) {
        ($this.$neighbors.$get1($v)).$remove0($a);
        if (!($this.$neighbors.$get1($v)).$size())
            $this.$neighbors.$remove1($v);
        return 1;
    }
    return 0;
},
ovi_MixedVertex_getInDegree = $this => {
    return $this.$inDegree0;
},
ovi_MixedVertex_setInDegree = ($this, $inDegree) => {
    $this.$inDegree0 = $inDegree;
},
ovi_MixedVertex_getOutDegree = $this => {
    return $this.$outDegree0;
},
ovi_MixedVertex_setOutDegree = ($this, $outDegree) => {
    $this.$outDegree0 = $outDegree;
},
ovi_MixedVertex_getDegree = $this => {
    return $this.$degree1;
},
ovi_MixedVertex_setDegree = ($this, $degree) => {
    $this.$degree1 = $degree;
},
ovi_MixedVertex_getDelta = $this => {
    return $this.$inDegree0 - $this.$outDegree0 | 0;
},
ovi_MixedVertex_getNeighbors = $this => {
    return $this.$neighbors;
},
ovi_MixedVertex_clearNeighbors = $this => {
    $this.$neighbors = ju_HashMap__init_();
},
ovi_MixedVertex_getNeighbors0 = $this => {
    return $this.$getNeighbors0();
};
function gt_TIntObjectHashMap() {
    let a = this; gt_THash.call(a);
    a.$_values = null;
    a.$_set = null;
    a.$_hashingStrategy = null;
}
let gt_TIntObjectHashMap__init_0 = $this => {
    gt_THash__init_($this);
    $this.$_hashingStrategy = $this;
},
gt_TIntObjectHashMap__init_ = () => {
    let var_0 = new gt_TIntObjectHashMap();
    gt_TIntObjectHashMap__init_0(var_0);
    return var_0;
},
gt_TIntObjectHashMap_setUp = ($this, $initialCapacity) => {
    let $capacity, var$3;
    $capacity = gt_THash_setUp($this, $initialCapacity);
    var$3 = $rt_compare($initialCapacity, (-1));
    $this.$_values = var$3 ? $rt_createArray(jl_Object, $capacity) : gt_THash_EMPTY_OBJECT_ARRAY;
    $this.$_set = var$3 ? $rt_createIntArray($capacity) : null;
    return $capacity;
},
gt_TIntObjectHashMap_contains = ($this, $val) => {
    return $this.$index($val) < 0 ? 0 : 1;
},
gt_TIntObjectHashMap_capacity = $this => {
    return $this.$_values.data.length;
},
gt_TIntObjectHashMap_put = ($this, $key, $value) => {
    let $wasFree, $previous, $index, $isNewMapping;
    $wasFree = 0;
    $previous = null;
    $index = $this.$insertionIndex($key);
    $isNewMapping = 1;
    if ($index >= 0)
        $wasFree = gt_TIntObjectHashMap_isFree($this.$_values, $index);
    else {
        $index = ( -$index | 0) - 1 | 0;
        $previous = gt_TIntObjectHashMap_unwrapNull($this.$_values.data[$index]);
        $isNewMapping = 0;
    }
    $this.$_set.data[$index] = $key;
    $this.$_values.data[$index] = gt_TIntObjectHashMap_wrapNull($value);
    if ($isNewMapping)
        gt_THash_postInsertHook($this, $wasFree);
    return $previous;
},
gt_TIntObjectHashMap_rehash = ($this, $newCapacity) => {
    let $i, $oldKeys, $oldVals, $i_0, var$6, $o, $index;
    $i = $this.$capacity();
    $oldKeys = $this.$_set;
    $oldVals = $this.$_values;
    $this.$_set = $rt_createIntArray($newCapacity);
    $this.$_values = $rt_createArray(jl_Object, $newCapacity);
    while (true) {
        $i_0 = $i + (-1) | 0;
        if ($i <= 0)
            break;
        if (!gt_TIntObjectHashMap_isFull($oldVals, $i_0)) {
            $i = $i_0;
            continue;
        }
        var$6 = $oldVals.data;
        $o = $oldKeys.data[$i_0];
        $index = $this.$insertionIndex($o);
        $this.$_set.data[$index] = $o;
        $this.$_values.data[$index] = var$6[$i_0];
        $i = $i_0;
    }
},
gt_TIntObjectHashMap_get = ($this, $key) => {
    let $index;
    $index = $this.$index($key);
    return $index < 0 ? null : gt_TIntObjectHashMap_unwrapNull($this.$_values.data[$index]);
},
gt_TIntObjectHashMap_unwrapNull = $value => {
    gt_TObjectHash_$callClinit();
    if ($value === gt_TObjectHash_NULL)
        $value = null;
    return $value;
},
gt_TIntObjectHashMap_wrapNull = $value => {
    if ($value === null) {
        gt_TObjectHash_$callClinit();
        $value = gt_TObjectHash_NULL;
    }
    return $value;
},
gt_TIntObjectHashMap_remove = ($this, $key) => {
    let $prev, $index;
    $prev = null;
    $index = $this.$index($key);
    if ($index >= 0) {
        $prev = gt_TIntObjectHashMap_unwrapNull($this.$_values.data[$index]);
        $this.$removeAt($index);
    }
    return $prev;
},
gt_TIntObjectHashMap_index = ($this, $val) => {
    let $set, $values, var$4, $length, $hash, $index, $probe;
    $set = $this.$_set;
    $values = $this.$_values;
    gt_THash_$callClinit();
    if ($values === gt_THash_EMPTY_OBJECT_ARRAY)
        return (-1);
    a: {
        var$4 = $set.data;
        $length = var$4.length;
        $hash = $this.$_hashingStrategy.$computeHashCode($val) & 2147483647;
        $index = $hash % $length | 0;
        if (!gt_TIntObjectHashMap_isFree($values, $index) && !(!gt_TIntObjectHashMap_isRemoved($values, $index) && var$4[$index] == $val)) {
            $probe = 1 + ($hash % ($length - 2 | 0) | 0) | 0;
            while (true) {
                $index = $index - $probe | 0;
                if ($index < 0)
                    $index = $index + $length | 0;
                if (gt_TIntObjectHashMap_isFree($values, $index))
                    break a;
                if (gt_TIntObjectHashMap_isRemoved($values, $index))
                    continue;
                if (var$4[$index] == $val)
                    break;
            }
        }
    }
    if (gt_TIntObjectHashMap_isFree($values, $index))
        $index = (-1);
    return $index;
},
gt_TIntObjectHashMap_insertionIndex = ($this, $val) => {
    let var$2, $values, $set, var$5, $length, $hash, $index, $probe, $firstRemoved;
    var$2 = $this.$_values;
    gt_THash_$callClinit();
    if (var$2 === gt_THash_EMPTY_OBJECT_ARRAY)
        $this.$setUp(6);
    $values = $this.$_values;
    $set = $this.$_set;
    var$5 = $set.data;
    $length = var$5.length;
    $hash = $this.$_hashingStrategy.$computeHashCode($val) & 2147483647;
    $index = $hash % $length | 0;
    if (gt_TIntObjectHashMap_isFree($values, $index))
        return $index;
    if (gt_TIntObjectHashMap_isFull($values, $index) && var$5[$index] == $val)
        return ( -$index | 0) - 1 | 0;
    $probe = 1 + ($hash % ($length - 2 | 0) | 0) | 0;
    $firstRemoved = !gt_TIntObjectHashMap_isRemoved($values, $index) ? (-1) : $index;
    while (true) {
        $index = $index - $probe | 0;
        if ($index < 0)
            $index = $index + $length | 0;
        if ($firstRemoved == (-1) && gt_TIntObjectHashMap_isRemoved($values, $index))
            $firstRemoved = $index;
        if (!gt_TIntObjectHashMap_isFull($values, $index))
            break;
        if (var$5[$index] == $val)
            break;
    }
    a: {
        if (gt_TIntObjectHashMap_isRemoved($values, $index))
            while (!gt_TIntObjectHashMap_isFree($values, $index)) {
                if (!gt_TIntObjectHashMap_isRemoved($values, $index) && var$5[$index] == $val)
                    break a;
                $index = $index - $probe | 0;
                if ($index >= 0)
                    continue;
                $index = $index + $length | 0;
            }
    }
    if (gt_TIntObjectHashMap_isFull($values, $index))
        return ( -$index | 0) - 1 | 0;
    if ($firstRemoved == (-1))
        $firstRemoved = $index;
    return $firstRemoved;
},
gt_TIntObjectHashMap_isFull = ($values, $index) => {
    let $value, var$4;
    a: {
        $value = $values.data[$index];
        if ($value !== null) {
            gt_TObjectHash_$callClinit();
            if ($value !== gt_TObjectHash_REMOVED) {
                var$4 = 1;
                break a;
            }
        }
        var$4 = 0;
    }
    return var$4;
},
gt_TIntObjectHashMap_isRemoved = ($values, $index) => {
    let var$3;
    var$3 = $values.data[$index];
    gt_TObjectHash_$callClinit();
    return var$3 !== gt_TObjectHash_REMOVED ? 0 : 1;
},
gt_TIntObjectHashMap_isFree = ($values, $index) => {
    return $values.data[$index] !== null ? 0 : 1;
},
gt_TIntObjectHashMap_removeAt = ($this, $index) => {
    let var$2;
    var$2 = $this.$_values.data;
    gt_TObjectHash_$callClinit();
    var$2[$index] = gt_TObjectHash_REMOVED;
    gt_THash_removeAt($this, $index);
},
gt_TIntObjectHashMap_keys = $this => {
    let $keys, $k, $values, var$4, $i, $j, var$7, var$8, $j_0;
    $keys = $rt_createIntArray($this.$size());
    $k = $this.$_set;
    $values = $this.$_values;
    var$4 = $values.data;
    $i = var$4.length;
    $j = 0;
    while (true) {
        var$7 = $i + (-1) | 0;
        if ($i <= 0)
            break;
        if (!gt_TIntObjectHashMap_isFull($values, var$7)) {
            $i = var$7;
            continue;
        }
        var$8 = $keys.data;
        var$4 = $k.data;
        $j_0 = $j + 1 | 0;
        var$8[$j] = var$4[var$7];
        $i = var$7;
        $j = $j_0;
    }
    return $keys;
},
gt_TIntObjectHashMap_containsKey = ($this, $key) => {
    return $this.$contains($key);
},
gt_TIntObjectHashMap_computeHashCode = ($this, $val) => {
    return gt_HashFunctions_hash($val);
};
function jur_AbstractCharClass$LazyCategoryScope() {
    let a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category0 = 0;
    a.$mayContainSupplCodepoints2 = 0;
    a.$containsAllSurrogates = 0;
}
let jur_AbstractCharClass$LazyCategoryScope__init_1 = ($this, $cat, $mayContainSupplCodepoints) => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
    $this.$mayContainSupplCodepoints2 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_ = (var_0, var_1) => {
    let var_2 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_1(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractCharClass$LazyCategoryScope__init_0 = ($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
    $this.$containsAllSurrogates = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints2 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
},
jur_AbstractCharClass$LazyCategoryScope__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_AbstractCharClass$LazyCategoryScope_computeValue = $this => {
    let $chCl;
    $chCl = jur_UnicodeCategoryScope__init_0($this.$category0);
    if ($this.$containsAllSurrogates)
        $chCl.$lowHighSurrogates.$set(0, 2048);
    $chCl.$mayContainSupplCodepoints0 = $this.$mayContainSupplCodepoints2;
    return $chCl;
};
function jur_SupplRangeSet() {
    let a = this; jur_JointSet.call(a);
    a.$chars = null;
    a.$alt0 = 0;
}
let jur_SupplRangeSet__init_ = ($this, $cc) => {
    jur_JointSet__init_($this);
    $this.$chars = $cc.$getInstance();
    $this.$alt0 = $cc.$alt;
},
jur_SupplRangeSet__init_0 = var_0 => {
    let var_1 = new jur_SupplRangeSet();
    jur_SupplRangeSet__init_(var_1, var_0);
    return var_1;
},
jur_SupplRangeSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, $high, $offset, var$8, $low;
    $strLength = $matchResult.$getRightBound();
    if ($stringIndex < $strLength) {
        var$5 = $stringIndex + 1 | 0;
        $high = $testString.$charAt($stringIndex);
        if ($this.$contains($high)) {
            $offset = $this.$next2.$matches(var$5, $testString, $matchResult);
            if ($offset > 0)
                return $offset;
        }
        if (var$5 < $strLength) {
            var$8 = var$5 + 1 | 0;
            $low = $testString.$charAt(var$5);
            if (jl_Character_isSurrogatePair($high, $low) && $this.$contains(jl_Character_toCodePoint($high, $low)))
                return $this.$next2.$matches(var$8, $testString, $matchResult);
        }
    }
    return (-1);
},
jur_SupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(29) : $rt_s(30);
    var$2 = $this.$chars.$toString();
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(31)), var$1), var$2);
    return jl_StringBuilder_toString(var$3);
},
jur_SupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars.$contains($ch);
},
jur_SupplRangeSet_first = ($this, $set) => {
    if ($set instanceof jur_SupplCharSet)
        return jur_AbstractCharClass_intersects0($this.$chars, $set.$getCodePoint());
    if ($set instanceof jur_CharSet)
        return jur_AbstractCharClass_intersects0($this.$chars, $set.$getChar());
    if ($set instanceof jur_SupplRangeSet)
        return jur_AbstractCharClass_intersects($this.$chars, $set.$chars);
    if (!($set instanceof jur_RangeSet))
        return 1;
    return jur_AbstractCharClass_intersects($this.$chars, $set.$getChars());
},
jur_SupplRangeSet_getChars = $this => {
    return $this.$chars;
},
jur_SupplRangeSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_SupplRangeSet_hasConsumed = ($this, $mr) => {
    return 1;
},
jur_UCISupplRangeSet = $rt_classWithoutFields(jur_SupplRangeSet),
jur_UCISupplRangeSet__init_0 = ($this, $cc) => {
    jur_SupplRangeSet__init_($this, $cc);
},
jur_UCISupplRangeSet__init_ = var_0 => {
    let var_1 = new jur_UCISupplRangeSet();
    jur_UCISupplRangeSet__init_0(var_1, var_0);
    return var_1;
},
jur_UCISupplRangeSet_contains = ($this, $ch) => {
    return $this.$chars.$contains(jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch)));
},
jur_UCISupplRangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt0 ? $rt_s(29) : $rt_s(30);
    var$2 = $this.$chars.$toString();
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(332)), var$1), var$2);
    return jl_StringBuilder_toString(var$3);
},
jur_AbstractCharClass$LazyJavaUpperCase = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUpperCase__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaUpperCase__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
    jur_AbstractCharClass$LazyJavaUpperCase__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUpperCase_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaUpperCase$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
},
jur_AbstractLineTerminator = $rt_classWithoutFields(),
jur_AbstractLineTerminator_unixLT = null,
jur_AbstractLineTerminator_unicodeLT = null,
jur_AbstractLineTerminator__init_ = $this => {
    jl_Object__init_($this);
},
jur_AbstractLineTerminator_getInstance = $flag => {
    if (!($flag & 1)) {
        if (jur_AbstractLineTerminator_unicodeLT !== null)
            return jur_AbstractLineTerminator_unicodeLT;
        jur_AbstractLineTerminator_unicodeLT = jur_AbstractLineTerminator$2__init_0();
        return jur_AbstractLineTerminator_unicodeLT;
    }
    if (jur_AbstractLineTerminator_unixLT !== null)
        return jur_AbstractLineTerminator_unixLT;
    jur_AbstractLineTerminator_unixLT = jur_AbstractLineTerminator$1__init_0();
    return jur_AbstractLineTerminator_unixLT;
};
function jur_HangulDecomposedCharSet() {
    let a = this; jur_JointSet.call(a);
    a.$decomposedChar = null;
    a.$decomposedCharUTF16 = null;
    a.$decomposedCharLength = 0;
}
let jur_HangulDecomposedCharSet__init_ = ($this, $decomposedChar, $decomposedCharLength) => {
    jur_JointSet__init_($this);
    $this.$decomposedChar = $decomposedChar;
    $this.$decomposedCharLength = $decomposedCharLength;
},
jur_HangulDecomposedCharSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_HangulDecomposedCharSet();
    jur_HangulDecomposedCharSet__init_(var_2, var_0, var_1);
    return var_2;
},
jur_HangulDecomposedCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_HangulDecomposedCharSet_getDecomposedChar = $this => {
    if ($this.$decomposedCharUTF16 === null)
        $this.$decomposedCharUTF16 = jl_String__init_($this.$decomposedChar);
    return $this.$decomposedCharUTF16;
},
jur_HangulDecomposedCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = jur_HangulDecomposedCharSet_getDecomposedChar($this);
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(411)), var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_HangulDecomposedCharSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, $syllIndex, $decompSyllable, $vIndex, $tIndex, var$9, $curSymb, $decompCurSymb, var$12, $i, var$14, $lIndex, var$16, var$17;
    $rightBound = $matchResult.$getRightBound();
    $syllIndex = 0;
    $decompSyllable = $rt_createIntArray(3);
    $vIndex = (-1);
    $tIndex = (-1);
    if ($strIndex >= $rightBound)
        return (-1);
    var$9 = $strIndex + 1 | 0;
    $curSymb = $testString.$charAt($strIndex);
    $decompCurSymb = jur_Lexer_getHangulDecomposition($curSymb);
    if ($decompCurSymb !== null) {
        var$12 = $decompCurSymb.data;
        $i = 0;
        if (var$12.length != $this.$decomposedCharLength)
            return (-1);
        while (true) {
            if ($i >= $this.$decomposedCharLength)
                return $this.$next2.$matches(var$9, $testString, $matchResult);
            if (var$12[$i] != $this.$decomposedChar.data[$i])
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    var$14 = $decompSyllable.data;
    var$14[$syllIndex] = $curSymb;
    $lIndex = $curSymb - 4352 | 0;
    if ($lIndex >= 0 && $lIndex < 19) {
        if (var$9 < $rightBound) {
            $curSymb = $testString.$charAt(var$9);
            $vIndex = $curSymb - 4449 | 0;
        }
        if ($vIndex >= 0 && $vIndex < 21) {
            var$16 = var$9 + 1 | 0;
            var$14[1] = $curSymb;
            if (var$16 < $rightBound) {
                $curSymb = $testString.$charAt(var$16);
                $tIndex = $curSymb - 4519 | 0;
            }
            if ($tIndex >= 0 && $tIndex < 28) {
                var$17 = var$16 + 1 | 0;
                var$14[2] = $curSymb;
                var$17 = $this.$decomposedCharLength == 3 && var$14[0] == $this.$decomposedChar.data[0] && var$14[1] == $this.$decomposedChar.data[1] && var$14[2] == $this.$decomposedChar.data[2] ? $this.$next2.$matches(var$17, $testString, $matchResult) : (-1);
                return var$17;
            }
            var$17 = $this.$decomposedCharLength == 2 && var$14[0] == $this.$decomposedChar.data[0] && var$14[1] == $this.$decomposedChar.data[1] ? $this.$next2.$matches(var$16, $testString, $matchResult) : (-1);
            return var$17;
        }
        return (-1);
    }
    return (-1);
},
jur_HangulDecomposedCharSet_first = ($this, $set) => {
    let var$2, var$3;
    a: {
        if ($set instanceof jur_HangulDecomposedCharSet) {
            var$2 = $set;
            if (!(jur_HangulDecomposedCharSet_getDecomposedChar(var$2)).$equals(jur_HangulDecomposedCharSet_getDecomposedChar($this))) {
                var$3 = 0;
                break a;
            }
        }
        var$3 = 1;
    }
    return var$3;
},
jur_HangulDecomposedCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
jur_AbstractCharClass$LazyPunct = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyPunct__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyPunct__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyPunct();
    jur_AbstractCharClass$LazyPunct__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyPunct_computeValue = $this => {
    return (((jur_CharClass__init_()).$add0(33, 64)).$add0(91, 96)).$add0(123, 126);
},
opi_ProblemAttributes$NumDepots = $rt_classWithoutFields(jl_Enum),
opi_ProblemAttributes$NumDepots_SINGLE_DEPOT = null,
opi_ProblemAttributes$NumDepots_MULTI_DEPOT = null,
opi_ProblemAttributes$NumDepots_NO_DEPOTS = null,
opi_ProblemAttributes$NumDepots_$VALUES = null,
opi_ProblemAttributes$NumDepots_$callClinit = () => {
    opi_ProblemAttributes$NumDepots_$callClinit = $rt_eraseClinit(opi_ProblemAttributes$NumDepots);
    opi_ProblemAttributes$NumDepots__clinit_();
},
opi_ProblemAttributes$NumDepots__init_0 = ($this, var$1, var$2) => {
    opi_ProblemAttributes$NumDepots_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
opi_ProblemAttributes$NumDepots__init_ = (var_0, var_1) => {
    let var_2 = new opi_ProblemAttributes$NumDepots();
    opi_ProblemAttributes$NumDepots__init_0(var_2, var_0, var_1);
    return var_2;
},
opi_ProblemAttributes$NumDepots_$values = () => {
    let var$1, var$2;
    opi_ProblemAttributes$NumDepots_$callClinit();
    var$1 = $rt_createArray(opi_ProblemAttributes$NumDepots, 3);
    var$2 = var$1.data;
    var$2[0] = opi_ProblemAttributes$NumDepots_SINGLE_DEPOT;
    var$2[1] = opi_ProblemAttributes$NumDepots_MULTI_DEPOT;
    var$2[2] = opi_ProblemAttributes$NumDepots_NO_DEPOTS;
    return var$1;
},
opi_ProblemAttributes$NumDepots__clinit_ = () => {
    opi_ProblemAttributes$NumDepots_SINGLE_DEPOT = opi_ProblemAttributes$NumDepots__init_($rt_s(412), 0);
    opi_ProblemAttributes$NumDepots_MULTI_DEPOT = opi_ProblemAttributes$NumDepots__init_($rt_s(413), 1);
    opi_ProblemAttributes$NumDepots_NO_DEPOTS = opi_ProblemAttributes$NumDepots__init_($rt_s(414), 2);
    opi_ProblemAttributes$NumDepots_$VALUES = opi_ProblemAttributes$NumDepots_$values();
};
function jur_AbstractCharClass$LazyJavaTitleCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$018 = null;
}
let jur_AbstractCharClass$LazyJavaTitleCase$1__init_ = ($this, $this$0) => {
    $this.$this$018 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaTitleCase$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaTitleCase$1();
    jur_AbstractCharClass$LazyJavaTitleCase$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaTitleCase$1_contains = ($this, $ch) => {
    return jl_Character_isTitleCase($ch);
},
otcir_ClassList = $rt_classWithoutFields(),
ju_Collections$_clinit_$lambda$_59_0 = $rt_classWithoutFields(),
ju_Collections$_clinit_$lambda$_59_0__init_ = var$0 => {
    jl_Object__init_(var$0);
},
ju_Collections$_clinit_$lambda$_59_0__init_0 = () => {
    let var_0 = new ju_Collections$_clinit_$lambda$_59_0();
    ju_Collections$_clinit_$lambda$_59_0__init_(var_0);
    return var_0;
};
function jur_AbstractCharClass$LazyJavaMirrored$1() {
    jur_AbstractCharClass.call(this);
    this.$this$025 = null;
}
let jur_AbstractCharClass$LazyJavaMirrored$1__init_ = ($this, $this$0) => {
    $this.$this$025 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaMirrored$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaMirrored$1();
    jur_AbstractCharClass$LazyJavaMirrored$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaMirrored$1_contains = ($this, $ch) => {
    return 0;
},
opic_UndirectedCPP = $rt_classWithoutFields(opi_ChinesePostmanProblem),
opic_UndirectedCPP__init_ = ($this, $g, $name) => {
    opi_ChinesePostmanProblem__init_($this, $g, $name, om_SumMetric__init_());
    $this.$mGraph = $g;
},
opic_UndirectedCPP__init_0 = (var_0, var_1) => {
    let var_2 = new opic_UndirectedCPP();
    opic_UndirectedCPP__init_(var_2, var_0, var_1);
    return var_2;
},
opic_UndirectedCPP_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_UNDIRECTED;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
};
function jur_AbstractCharClass$LazyJavaISOControl$1() {
    jur_AbstractCharClass.call(this);
    this.$this$039 = null;
}
let jur_AbstractCharClass$LazyJavaISOControl$1__init_ = ($this, $this$0) => {
    $this.$this$039 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaISOControl$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaISOControl$1();
    jur_AbstractCharClass$LazyJavaISOControl$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaISOControl$1_contains = ($this, $ch) => {
    return jl_Character_isISOControl($ch);
};
function jur_WordBoundary() {
    jur_AbstractSet.call(this);
    this.$positive = 0;
}
let jur_WordBoundary__init_0 = ($this, $positive) => {
    jur_AbstractSet__init_($this);
    $this.$positive = $positive;
},
jur_WordBoundary__init_ = var_0 => {
    let var_1 = new jur_WordBoundary();
    jur_WordBoundary__init_0(var_1, var_0);
    return var_1;
},
jur_WordBoundary_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $ch1, $ch2, $leftBound, $left, $right;
    $ch1 = $stringIndex < $matchResult.$getRightBound() ? $testString.$charAt($stringIndex) : 32;
    $ch2 = !$stringIndex ? 32 : $testString.$charAt($stringIndex - 1 | 0);
    $leftBound = !$matchResult.$hasTransparentBounds() ? $matchResult.$getLeftBound() : 0;
    $left = $ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1;
    $right = $ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1;
    return $left ^ $right ^ $this.$positive ? (-1) : $this.$next2.$matches($stringIndex, $testString, $matchResult);
},
jur_WordBoundary_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_WordBoundary_getName = $this => {
    return $rt_s(415);
},
jur_WordBoundary_isSpace = ($this, $ch, $index, $leftBound, $testString) => {
    let var$5;
    if (!jl_Character_isLetterOrDigit0($ch) && $ch != 95) {
        a: {
            if (jl_Character_getType0($ch) == 6)
                while (true) {
                    $index = $index + (-1) | 0;
                    if ($index < $leftBound)
                        break a;
                    var$5 = $testString.$charAt($index);
                    if (jl_Character_isLetterOrDigit0(var$5))
                        return 0;
                    if (jl_Character_getType0(var$5) != 6)
                        return 1;
                }
        }
        return 1;
    }
    return 0;
};
function jur_UEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter3 = 0;
}
let jur_UEOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter3 = $counter;
},
jur_UEOLSet__init_0 = var_0 => {
    let var_1 = new jur_UEOLSet();
    jur_UEOLSet__init_(var_1, var_0);
    return var_1;
},
jur_UEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound;
    $rightBound = !$matchResult.$hasAnchoringBounds() ? $testString.$length() : $matchResult.$getRightBound();
    if ($strIndex >= $rightBound) {
        $matchResult.$setConsumed($this.$consCounter3, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    if (($rightBound - $strIndex | 0) == 1 && $testString.$charAt($strIndex) == 10) {
        $matchResult.$setConsumed($this.$consCounter3, 1);
        return $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult);
    }
    return (-1);
},
jur_UEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !$matchResult.$getConsumed($this.$consCounter3) ? 0 : 1;
    $matchResult.$setConsumed($this.$consCounter3, (-1));
    return $res;
},
jur_UEOLSet_getName = $this => {
    return $rt_s(416);
},
jur_AbstractCharClass$LazySpace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpace__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazySpace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazySpace();
    jur_AbstractCharClass$LazySpace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpace_computeValue = $this => {
    return ((jur_CharClass__init_()).$add0(9, 13)).$add(32);
};
function ju_HashMap$1() {
    ju_AbstractSet.call(this);
    this.$this$03 = null;
}
let ju_HashMap$1__init_ = ($this, $this$0) => {
    $this.$this$03 = $this$0;
    ju_AbstractSet__init_($this);
},
ju_HashMap$1__init_0 = var_0 => {
    let var_1 = new ju_HashMap$1();
    ju_HashMap$1__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$1_size = $this => {
    return $this.$this$03.$size();
},
ju_HashMap$1_iterator = $this => {
    return ju_HashMap$KeyIterator__init_0($this.$this$03);
};
function jur_UCICharSet() {
    jur_LeafSet.call(this);
    this.$ch2 = 0;
}
let jur_UCICharSet__init_ = ($this, $ch) => {
    jur_LeafSet__init_($this);
    $this.$ch2 = jl_Character_toLowerCase(jl_Character_toUpperCase($ch));
},
jur_UCICharSet__init_0 = var_0 => {
    let var_1 = new jur_UCICharSet();
    jur_UCICharSet__init_(var_1, var_0);
    return var_1;
},
jur_UCICharSet_accepts = ($this, $strIndex, $testString) => {
    return $this.$ch2 != jl_Character_toLowerCase(jl_Character_toUpperCase($testString.$charAt($strIndex))) ? (-1) : 1;
},
jur_UCICharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$ch2;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(jl_StringBuilder_append(var$2, $rt_s(402)), var$1);
    return jl_StringBuilder_toString(var$2);
};
function ju_HashMap$2() {
    ju_AbstractCollection.call(this);
    this.$this$08 = null;
}
let ju_HashMap$2__init_ = ($this, $this$0) => {
    $this.$this$08 = $this$0;
    ju_AbstractCollection__init_($this);
},
ju_HashMap$2__init_0 = var_0 => {
    let var_1 = new ju_HashMap$2();
    ju_HashMap$2__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$2_iterator = $this => {
    return ju_HashMap$ValueIterator__init_0($this.$this$08);
};
function jl_Double() {
    jl_Number.call(this);
    this.$value2 = 0.0;
}
let jl_Double_TYPE = null,
jl_Double_$callClinit = () => {
    jl_Double_$callClinit = $rt_eraseClinit(jl_Double);
    jl_Double__clinit_();
},
jl_Double__init_ = ($this, $value) => {
    jl_Double_$callClinit();
    jl_Number__init_($this);
    $this.$value2 = $value;
},
jl_Double__init_0 = var_0 => {
    let var_1 = new jl_Double();
    jl_Double__init_(var_1, var_0);
    return var_1;
},
jl_Double_doubleValue = $this => {
    return $this.$value2;
},
jl_Double_valueOf = $d => {
    jl_Double_$callClinit();
    return jl_Double__init_0($d);
},
jl_Double_parseDouble = $string => {
    let $start, $end, var$4, $negative, $c, $mantissa, $exp, $hasOneDigit, $mantissaPos, var$11, var$12, $negativeExp, $numExp;
    jl_Double_$callClinit();
    if ($string.$isEmpty())
        $rt_throw(jl_NumberFormatException__init_());
    $start = 0;
    $end = $string.$length();
    while (true) {
        if ($string.$charAt($start) > 32) {
            while (true) {
                var$4 = $end - 1 | 0;
                if ($string.$charAt(var$4) > 32)
                    break;
                $end = $end + (-1) | 0;
            }
            if (!($string.$charAt(var$4) != 102 && $string.$charAt(var$4) != 70 && $string.$charAt(var$4) != 100 && $string.$charAt(var$4) != 68))
                $end = $end + (-1) | 0;
            $negative = 0;
            if ($string.$charAt($start) == 45) {
                $start = $start + 1 | 0;
                $negative = 1;
            } else if ($string.$charAt($start) == 43)
                $start = $start + 1 | 0;
            if ($start == $end)
                $rt_throw(jl_NumberFormatException__init_());
            a: {
                $c = $string.$charAt($start);
                $mantissa = Long_ZERO;
                $exp = (-1);
                $hasOneDigit = 0;
                $mantissaPos = Long_create(2808348672, 232830643);
                if ($c != 46) {
                    $hasOneDigit = 1;
                    if ($c >= 48 && $c <= 57) {
                        b: {
                            while ($start < $end) {
                                if ($string.$charAt($start) != 48)
                                    break b;
                                $start = $start + 1 | 0;
                            }
                        }
                        while ($start < $end) {
                            var$4 = $string.$charAt($start);
                            if (var$4 < 48)
                                break a;
                            if (var$4 > 57)
                                break a;
                            if (Long_gt($mantissaPos, Long_ZERO)) {
                                $mantissa = Long_add($mantissa, Long_mul($mantissaPos, Long_fromInt(var$4 - 48 | 0)));
                                $mantissaPos = jl_Long_divideUnsigned($mantissaPos, Long_fromInt(10));
                            }
                            $exp = $exp + 1 | 0;
                            $start = $start + 1 | 0;
                        }
                    } else
                        $rt_throw(jl_NumberFormatException__init_());
                }
            }
            if ($start < $end && $string.$charAt($start) == 46) {
                $start = $start + 1 | 0;
                c: {
                    while (true) {
                        if ($start >= $end)
                            break c;
                        var$11 = $string.$charAt($start);
                        var$4 = $rt_compare(var$11, 48);
                        if (var$4 < 0)
                            break c;
                        if (var$11 > 57)
                            break;
                        if (Long_eq($mantissa, Long_ZERO) && !var$4)
                            $exp = $exp + (-1) | 0;
                        else if (Long_gt($mantissaPos, Long_ZERO)) {
                            $mantissa = Long_add($mantissa, Long_mul($mantissaPos, Long_fromInt(var$11 - 48 | 0)));
                            $mantissaPos = jl_Long_divideUnsigned($mantissaPos, Long_fromInt(10));
                        }
                        $start = $start + 1 | 0;
                        $hasOneDigit = 1;
                    }
                }
                if (!$hasOneDigit)
                    $rt_throw(jl_NumberFormatException__init_());
            }
            if ($start < $end) {
                var$11 = $string.$charAt($start);
                if (var$11 != 101 && var$11 != 69)
                    $rt_throw(jl_NumberFormatException__init_());
                var$12 = $start + 1 | 0;
                $negativeExp = 0;
                if (var$12 == $end)
                    $rt_throw(jl_NumberFormatException__init_());
                if ($string.$charAt(var$12) == 45) {
                    var$12 = var$12 + 1 | 0;
                    $negativeExp = 1;
                } else if ($string.$charAt(var$12) == 43)
                    var$12 = var$12 + 1 | 0;
                $numExp = 0;
                var$4 = 0;
                d: {
                    while (true) {
                        if (var$12 >= $end)
                            break d;
                        var$11 = $string.$charAt(var$12);
                        if (var$11 < 48)
                            break d;
                        if (var$11 > 57)
                            break;
                        $numExp = (10 * $numExp | 0) + (var$11 - 48 | 0) | 0;
                        var$4 = 1;
                        var$12 = var$12 + 1 | 0;
                    }
                }
                if (!var$4)
                    $rt_throw(jl_NumberFormatException__init_());
                if ($negativeExp)
                    $numExp =  -$numExp | 0;
                $exp = $exp + $numExp | 0;
            }
            return otcit_DoubleSynthesizer_synthesizeDouble($mantissa, $exp, $negative);
        }
        $start = $start + 1 | 0;
        if ($start == $end)
            break;
    }
    $rt_throw(jl_NumberFormatException__init_());
},
jl_Double_compare = ($a, $b) => {
    let $diff, var$4, var$5, var$6;
    jl_Double_$callClinit();
    $diff = ($a <= $b ? 0 : 1) - ($b <= $a ? 0 : 1) | 0;
    if (!$diff) {
        var$4 = 1.0 / $a;
        var$5 = 1.0 / $b;
        var$6 = (var$4 <= var$5 ? 0 : 1) - (var$5 <= var$4 ? 0 : 1) | 0;
        $diff = (var$6 + ($b !== $b ? 0 : 1) | 0) - ($a !== $a ? 0 : 1) | 0;
    }
    return $diff;
},
jl_Double_doubleToLongBits = $value => {
    jl_Double_$callClinit();
    if (!(isNaN($value) ? 1 : 0))
        return $rt_doubleToRawLongBits($value);
    return Long_create(0, 2146959360);
},
jl_Double__clinit_ = () => {
    jl_Double_TYPE = $rt_cls($rt_doublecls);
};
function jur_AtomicFSet() {
    jur_FSet.call(this);
    this.$index5 = 0;
}
let jur_AtomicFSet__init_ = ($this, $groupIndex) => {
    jur_FSet__init_($this, $groupIndex);
},
jur_AtomicFSet__init_0 = var_0 => {
    let var_1 = new jur_AtomicFSet();
    jur_AtomicFSet__init_(var_1, var_0);
    return var_1;
},
jur_AtomicFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $gr;
    $gr = $this.$getGroupIndex();
    $matchResult.$setConsumed($gr, $stringIndex - $matchResult.$getConsumed($gr) | 0);
    $this.$index5 = $stringIndex;
    return $stringIndex;
},
jur_AtomicFSet_getIndex = $this => {
    return $this.$index5;
},
jur_AtomicFSet_getName = $this => {
    return $rt_s(417);
},
jur_AtomicFSet_hasConsumed = ($this, $mr) => {
    return 0;
};
function jur_LowSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$low = 0;
}
let jur_LowSurrogateCharSet__init_0 = ($this, $low) => {
    jur_JointSet__init_($this);
    $this.$low = $low;
},
jur_LowSurrogateCharSet__init_ = var_0 => {
    let var_1 = new jur_LowSurrogateCharSet();
    jur_LowSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
},
jur_LowSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_LowSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let var$4, $low, $high;
    var$4 = $stringIndex + 1 | 0;
    if (var$4 > $matchResult.$getRightBound()) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $low = $testString.$charAt($stringIndex);
    if ($stringIndex > $matchResult.$getLeftBound()) {
        $high = $testString.$charAt($stringIndex - 1 | 0);
        if (jl_Character_isHighSurrogate($high))
            return (-1);
    }
    if ($this.$low != $low)
        return (-1);
    return $this.$next2.$matches(var$4, $testString, $matchResult);
},
jur_LowSurrogateCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $startStr, $strLength, var$7, var$8;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $startStr = $matchResult.$getLeftBound();
    $strLength = $matchResult.$getRightBound();
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$7 = $testStr.$indexOf4($this.$low, $strIndex);
        if (var$7 < 0)
            return (-1);
        if (var$7 > $startStr && jl_Character_isHighSurrogate($testStr.$charAt(var$7 - 1 | 0))) {
            $strIndex = var$7 + 1 | 0;
            continue;
        }
        var$8 = $this.$next2;
        $strIndex = var$7 + 1 | 0;
        if (var$8.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$7;
},
jur_LowSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $startStr, $testStr, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $startStr = $matchResult.$getLeftBound();
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$7 = $testStr.$lastIndexOf2($this.$low, $lastIndex);
            if (var$7 < 0)
                break a;
            if (var$7 < $strIndex)
                break a;
            if (var$7 > $startStr && jl_Character_isHighSurrogate($testStr.$charAt(var$7 - 1 | 0))) {
                $lastIndex = var$7 + (-2) | 0;
                continue;
            }
            if ($this.$next2.$matches(var$7 + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$7 + (-1) | 0;
        }
        return var$7;
    }
    return (-1);
},
jur_LowSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$low;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(var$2, var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_LowSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_HighSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_LowSurrogateCharSet))
        return 1;
    return $set.$low != $this.$low ? 0 : 1;
},
jur_LowSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
};
function ogu_Pair() {
    let a = this; jl_Object.call(a);
    a.$mFirst = null;
    a.$mSecond = null;
}
let ogu_Pair__init_0 = ($this, $first, $second) => {
    jl_Object__init_($this);
    $this.$setFirst($first);
    $this.$setSecond($second);
},
ogu_Pair__init_ = (var_0, var_1) => {
    let var_2 = new ogu_Pair();
    ogu_Pair__init_0(var_2, var_0, var_1);
    return var_2;
},
ogu_Pair_getFirst = $this => {
    return $this.$mFirst;
},
ogu_Pair_setFirst = ($this, $mFirst) => {
    $this.$mFirst = $mFirst;
},
ogu_Pair_getSecond = $this => {
    return $this.$mSecond;
},
ogu_Pair_setSecond = ($this, $mSecond) => {
    $this.$mSecond = $mSecond;
},
ogu_Pair_equals = ($this, $o) => {
    let $test;
    if ($o === null)
        return 0;
    if ($o === $this)
        return 1;
    if (!($o instanceof ogu_Pair))
        return 0;
    $test = $o;
    return ($test.$getFirst()).$equals($this.$mFirst) && ($test.$getSecond()).$equals($this.$mSecond) ? 1 : 0;
},
ogu_Pair_hashCode = $this => {
    return (991 * $this.$mFirst.$hashCode0() | 0) ^ $this.$mSecond.$hashCode0();
};
function jur_CompositeGroupQuantifierSet() {
    let a = this; jur_GroupQuantifierSet.call(a);
    a.$quantifier0 = null;
    a.$setCounter = 0;
}
let jur_CompositeGroupQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type, $setCounter) => {
    jur_GroupQuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier0 = $quant;
    $this.$setCounter = $setCounter;
},
jur_CompositeGroupQuantifierSet__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jur_CompositeGroupQuantifierSet();
    jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jur_CompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, var$5, var$6, $nextIndex;
    $enterCounter = $matchResult.$getEnterCounter($this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($enterCounter >= $this.$quantifier0.$max())
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    var$5 = $this.$setCounter;
    var$6 = $enterCounter + 1 | 0;
    $matchResult.$setEnterCounter(var$5, var$6);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0) {
        $matchResult.$setEnterCounter($this.$setCounter, 0);
        return $nextIndex;
    }
    var$5 = $this.$setCounter;
    var$6 = var$6 + (-1) | 0;
    $matchResult.$setEnterCounter(var$5, var$6);
    if (var$6 >= $this.$quantifier0.$min())
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $matchResult.$setEnterCounter($this.$setCounter, 0);
    return (-1);
},
jur_CompositeGroupQuantifierSet_getName = $this => {
    return $this.$quantifier0.$toString();
},
jur_RelCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_RelCompositeGroupQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type, $setCounter) => {
    jur_CompositeGroupQuantifierSet__init_($this, $quant, $innerSet, $next, $type, $setCounter);
},
jur_RelCompositeGroupQuantifierSet__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jur_RelCompositeGroupQuantifierSet();
    jur_RelCompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jur_RelCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $enterCounter, $nextIndex;
    $enterCounter = $matchResult.$getEnterCounter($this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($enterCounter >= $this.$quantifier0.$max()) {
        $matchResult.$setEnterCounter($this.$setCounter, 0);
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    }
    if ($enterCounter < $this.$quantifier0.$min()) {
        $matchResult.$setEnterCounter($this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    } else {
        $nextIndex = $this.$next2.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            $matchResult.$setEnterCounter($this.$setCounter, 0);
            return $nextIndex;
        }
        $matchResult.$setEnterCounter($this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    return $nextIndex;
};
function ju_ArrayList() {
    let a = this; ju_AbstractList.call(a);
    a.$array = null;
    a.$size0 = 0;
}
let ju_ArrayList__init_2 = $this => {
    ju_ArrayList__init_0($this, 10);
},
ju_ArrayList__init_ = () => {
    let var_0 = new ju_ArrayList();
    ju_ArrayList__init_2(var_0);
    return var_0;
},
ju_ArrayList__init_0 = ($this, $initialCapacity) => {
    ju_AbstractList__init_($this);
    if ($initialCapacity >= 0) {
        $this.$array = $rt_createArray(jl_Object, $initialCapacity);
        return;
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ju_ArrayList__init_4 = var_0 => {
    let var_1 = new ju_ArrayList();
    ju_ArrayList__init_0(var_1, var_0);
    return var_1;
},
ju_ArrayList__init_1 = ($this, $c) => {
    let $iter, $i;
    ju_ArrayList__init_0($this, $c.$size());
    $iter = $c.$iterator();
    $i = 0;
    while ($i < $this.$array.data.length) {
        $this.$array.data[$i] = $iter.$next();
        $i = $i + 1 | 0;
    }
    $this.$size0 = $this.$array.data.length;
},
ju_ArrayList__init_3 = var_0 => {
    let var_1 = new ju_ArrayList();
    ju_ArrayList__init_1(var_1, var_0);
    return var_1;
},
ju_ArrayList_ensureCapacity = ($this, $minCapacity) => {
    let $newLength;
    if ($this.$array.data.length < $minCapacity) {
        $newLength = $this.$array.data.length >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max($this.$array.data.length * 2 | 0, 5));
        $this.$array = ju_Arrays_copyOf($this.$array, $newLength);
    }
},
ju_ArrayList_get = ($this, $index) => {
    ju_ArrayList_checkIndex($this, $index);
    return $this.$array.data[$index];
},
ju_ArrayList_size = $this => {
    return $this.$size0;
},
ju_ArrayList_set = ($this, $index, $element) => {
    let $old;
    ju_ArrayList_checkIndex($this, $index);
    $old = $this.$array.data[$index];
    $this.$array.data[$index] = $element;
    return $old;
},
ju_ArrayList_add = ($this, $element) => {
    let var$2, var$3;
    $this.$ensureCapacity($this.$size0 + 1 | 0);
    var$2 = $this.$array.data;
    var$3 = $this.$size0;
    $this.$size0 = var$3 + 1 | 0;
    var$2[var$3] = $element;
    $this.$modCount = $this.$modCount + 1 | 0;
    return 1;
},
ju_ArrayList_add0 = ($this, $index, $element) => {
    let $i;
    ju_ArrayList_checkIndexForAdd($this, $index);
    $this.$ensureCapacity($this.$size0 + 1 | 0);
    $i = $this.$size0;
    while ($i > $index) {
        $this.$array.data[$i] = $this.$array.data[$i - 1 | 0];
        $i = $i + (-1) | 0;
    }
    $this.$array.data[$index] = $element;
    $this.$size0 = $this.$size0 + 1 | 0;
    $this.$modCount = $this.$modCount + 1 | 0;
},
ju_ArrayList_remove = ($this, $i) => {
    let $old, var$3, var$4, $i_0;
    ju_ArrayList_checkIndex($this, $i);
    $old = $this.$array.data[$i];
    $this.$size0 = $this.$size0 - 1 | 0;
    while ($i < $this.$size0) {
        var$3 = $this.$array.data;
        var$4 = $this.$array.data;
        $i_0 = $i + 1 | 0;
        var$3[$i] = var$4[$i_0];
        $i = $i_0;
    }
    $this.$array.data[$this.$size0] = null;
    $this.$modCount = $this.$modCount + 1 | 0;
    return $old;
},
ju_ArrayList_remove0 = ($this, $o) => {
    let $index;
    $index = $this.$indexOf0($o);
    if ($index < 0)
        return 0;
    $this.$remove($index);
    return 1;
},
ju_ArrayList_clear = $this => {
    ju_Arrays_fill0($this.$array, 0, $this.$size0, null);
    $this.$size0 = 0;
    $this.$modCount = $this.$modCount + 1 | 0;
},
ju_ArrayList_addAll = ($this, $index, $c) => {
    let $gap, $i, $iter, var$6, var$7;
    ju_ArrayList_checkIndexForAdd($this, $index);
    if ($c.$isEmpty())
        return 0;
    $this.$ensureCapacity($this.$size0 + $c.$size() | 0);
    $gap = $c.$size();
    $i = $this.$size0 - 1 | 0;
    while ($i >= $index) {
        $this.$array.data[$i + $gap | 0] = $this.$array.data[$i];
        $i = $i + (-1) | 0;
    }
    $this.$size0 = $this.$size0 + $gap | 0;
    $iter = $c.$iterator();
    $i = 0;
    while ($i < $gap) {
        var$6 = $this.$array.data;
        var$7 = $index + 1 | 0;
        var$6[$index] = $iter.$next();
        $i = $i + 1 | 0;
        $index = var$7;
    }
    $this.$modCount = $this.$modCount + 1 | 0;
    return 1;
},
ju_ArrayList_checkIndex = ($this, $index) => {
    if ($index >= 0 && $index < $this.$size0)
        return;
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
ju_ArrayList_checkIndexForAdd = ($this, $index) => {
    if ($index >= 0 && $index <= $this.$size0)
        return;
    $rt_throw(jl_IndexOutOfBoundsException__init_());
},
ju_ArrayList_toString = $this => {
    let $length, $buffer, $i;
    if (!$this.$size0)
        return $rt_s(399);
    $length = $this.$size0 - 1 | 0;
    $buffer = jl_StringBuilder__init_0($this.$size0 * 16 | 0);
    $buffer.$append0(91);
    $i = 0;
    while ($i < $length) {
        ($buffer.$append($this.$array.data[$i] === $this ? $rt_s(272) : $this.$array.data[$i])).$append4($rt_s(273));
        $i = $i + 1 | 0;
    }
    $buffer.$append($this.$array.data[$length] === $this ? $rt_s(272) : $this.$array.data[$length]);
    return ($buffer.$append0(93)).$toString();
},
ju_ArrayList_hashCode = $this => {
    let $result, $i;
    $result = 1;
    $i = 0;
    while ($i < $this.$size0) {
        $result = (31 * $result | 0) + ju_Objects_hashCode($this.$array.data[$i]) | 0;
        $i = $i + 1 | 0;
    }
    return $result;
};
function ju_LinkedList$SequentialListIterator() {
    let a = this; jl_Object.call(a);
    a.$nextEntry = null;
    a.$prevEntry = null;
    a.$currentEntry0 = null;
    a.$index6 = 0;
    a.$version0 = 0;
    a.$this$00 = null;
}
let ju_LinkedList$SequentialListIterator__init_0 = ($this, var$1, $nextEntry, $prevEntry, $index) => {
    $this.$this$00 = var$1;
    jl_Object__init_($this);
    $this.$version0 = $this.$this$00.$modCount;
    $this.$nextEntry = $nextEntry;
    $this.$prevEntry = $prevEntry;
    $this.$index6 = $index;
},
ju_LinkedList$SequentialListIterator__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new ju_LinkedList$SequentialListIterator();
    ju_LinkedList$SequentialListIterator__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
ju_LinkedList$SequentialListIterator_add = ($this, $e) => {
    let $newEntry, var$3;
    ju_LinkedList$SequentialListIterator_checkConcurrentModification($this);
    $newEntry = ju_LinkedList$Entry__init_();
    $newEntry.$item = $e;
    $newEntry.$previous = $this.$prevEntry;
    $newEntry.$next4 = $this.$nextEntry;
    if ($this.$prevEntry === null)
        $this.$this$00.$firstEntry = $newEntry;
    else
        $this.$prevEntry.$next4 = $newEntry;
    if ($this.$nextEntry === null)
        $this.$this$00.$lastEntry = $newEntry;
    else
        $this.$nextEntry.$previous = $newEntry;
    $this.$prevEntry = $newEntry;
    var$3 = $this.$this$00;
    var$3.$size2 = var$3.$size2 + 1 | 0;
    var$3 = $this.$this$00;
    var$3.$modCount = var$3.$modCount + 1 | 0;
    $this.$version0 = $this.$this$00.$modCount;
    $this.$currentEntry0 = null;
},
ju_LinkedList$SequentialListIterator_checkConcurrentModification = $this => {
    if ($this.$version0 >= $this.$this$00.$modCount)
        return;
    $rt_throw(ju_ConcurrentModificationException__init_());
},
oe_WrongEdgeTypeException = $rt_classWithoutFields(jl_Exception),
oe_WrongEdgeTypeException__init_0 = $this => {
    jl_Exception__init_($this);
},
oe_WrongEdgeTypeException__init_ = () => {
    let var_0 = new oe_WrongEdgeTypeException();
    oe_WrongEdgeTypeException__init_0(var_0);
    return var_0;
},
jur_RelAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_RelAltGroupQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AltGroupQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_RelAltGroupQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_RelAltGroupQuantifierSet();
    jur_RelAltGroupQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_RelAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next2.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    return $nextIndex;
},
jur_IntHash = $rt_classWithoutFields();
function jl_String() {
    jl_Object.call(this);
    this.$hashCode3 = 0;
}
let jl_String_EMPTY_CHARS = null,
jl_String_EMPTY = null,
jl_String_CASE_INSENSITIVE_ORDER = null,
jl_String_$callClinit = () => {
    jl_String_$callClinit = $rt_eraseClinit(jl_String);
    jl_String__clinit_();
},
jl_String__init_3 = $this => {
    jl_String_$callClinit();
    jl_Object__init_($this);
    $this.$nativeString = "";
},
jl_String__init_5 = () => {
    let var_0 = new jl_String();
    jl_String__init_3(var_0);
    return var_0;
},
jl_String__init_0 = ($this, $characters) => {
    let var$2;
    jl_String_$callClinit();
    var$2 = $characters.data;
    jl_Object__init_($this);
    $this.$nativeString = $rt_charArrayToString($characters.data, 0, var$2.length);
},
jl_String__init_ = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_0(var_1, var_0);
    return var_1;
},
jl_String__init_4 = (var$0, var$1) => {
    var$0.$nativeString = var$1;
},
jl_String__init_1 = var_0 => {
    let var_1 = new jl_String();
    jl_String__init_4(var_1, var_0);
    return var_1;
},
jl_String__init_6 = (var$0, var$1, $offset, $count) => {
    let var$4;
    jl_String_$callClinit();
    var$4 = var$1.data;
    jl_Object__init_(var$0);
    ju_Objects_checkFromIndexSize($offset, $count, var$4.length);
    var$0.$nativeString = $rt_charArrayToString(var$1.data, $offset, $count);
},
jl_String__init_2 = (var_0, var_1, var_2) => {
    let var_3 = new jl_String();
    jl_String__init_6(var_3, var_0, var_1, var_2);
    return var_3;
},
jl_String_fromArray = $characters => {
    let $s;
    jl_String_$callClinit();
    $s = jl_String__init_5();
    $s.$nativeString = $rt_fullArrayToString($characters.data);
    return $s;
},
jl_String_charAt = ($this, $index) => {
    if ($index >= 0 && $index < $this.$nativeString.length)
        return $this.$nativeString.charCodeAt($index);
    $rt_throw(jl_StringIndexOutOfBoundsException__init_());
},
jl_String_length = $this => {
    return $this.$nativeString.length;
},
jl_String_isEmpty = $this => {
    return $this.$nativeString.length ? 0 : 1;
},
jl_String_compareTo0 = ($this, $anotherString) => {
    let $l, $i, $a, $b, var$6;
    if ($this === $anotherString)
        return 0;
    $l = jl_Math_min($this.$length(), $anotherString.$length());
    $i = 0;
    while (true) {
        if ($i >= $l)
            return $this.$length() - $anotherString.$length() | 0;
        $a = $this.$charAt($i);
        $b = $anotherString.$charAt($i);
        var$6 = $a - $b | 0;
        if (var$6)
            break;
        $i = $i + 1 | 0;
    }
    return var$6;
},
jl_String_startsWith = ($this, $prefix, $toffset) => {
    let $i, var$4, var$5;
    if (($toffset + $prefix.$length() | 0) > $this.$length())
        return 0;
    $i = 0;
    while ($i < $prefix.$length()) {
        var$4 = $prefix.$charAt($i);
        var$5 = $toffset + 1 | 0;
        if (var$4 != $this.$charAt($toffset))
            return 0;
        $i = $i + 1 | 0;
        $toffset = var$5;
    }
    return 1;
},
jl_String_startsWith0 = ($this, $prefix) => {
    if ($this === $prefix)
        return 1;
    return $this.$startsWith0($prefix, 0);
},
jl_String_indexOf = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo;
    $i = jl_Math_max(0, $fromIndex);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i >= $this.$nativeString.length)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i >= ($this.$nativeString.length - 1 | 0))
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $hi && $this.$nativeString.charCodeAt(($i + 1 | 0)) == $lo)
            break;
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_indexOf2 = ($this, $ch) => {
    return $this.$indexOf4($ch, 0);
},
jl_String_lastIndexOf = ($this, $ch, $fromIndex) => {
    let $i, $bmpChar, $hi, $lo, var$7;
    $i = jl_Math_min($fromIndex, $this.$length() - 1 | 0);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i < 0)
                return (-1);
            if ($this.$nativeString.charCodeAt($i) == $bmpChar)
                break;
            $i = $i + (-1) | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i < 1)
            return (-1);
        if ($this.$nativeString.charCodeAt($i) == $lo) {
            var$7 = $i - 1 | 0;
            if ($this.$nativeString.charCodeAt(var$7) == $hi)
                break;
        }
        $i = $i + (-1) | 0;
    }
    return var$7;
},
jl_String_lastIndexOf1 = ($this, $ch) => {
    return $this.$lastIndexOf2($ch, $this.$length() - 1 | 0);
},
jl_String_indexOf1 = ($this, $str, $fromIndex) => {
    let $i, $toIndex, $j;
    $i = jl_Math_max(0, $fromIndex);
    $toIndex = $this.$length() - $str.$length() | 0;
    a: while (true) {
        if ($i > $toIndex)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= $str.$length())
                break a;
            if ($this.$charAt($i + $j | 0) != $str.$charAt($j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return $i;
},
jl_String_indexOf0 = ($this, $str) => {
    return $this.$indexOf2($str, 0);
},
jl_String_lastIndexOf0 = ($this, $str, $fromIndex) => {
    let $i, $j;
    $i = jl_Math_min($fromIndex, $this.$length() - $str.$length() | 0);
    a: while (true) {
        if ($i < 0)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= $str.$length())
                break a;
            if ($this.$charAt($i + $j | 0) != $str.$charAt($j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + (-1) | 0;
    }
    return $i;
},
jl_String_substring = ($this, $beginIndex, $endIndex) => {
    let $length, var$4;
    $length = $this.$nativeString.length;
    var$4 = $rt_compare($beginIndex, $endIndex);
    if (!var$4)
        return jl_String_EMPTY;
    if (!$beginIndex && $endIndex == $length)
        return $this;
    if ($beginIndex >= 0 && var$4 <= 0 && $endIndex <= $length)
        return jl_String__init_1($this.$nativeString.substring($beginIndex, $endIndex));
    $rt_throw(jl_StringIndexOutOfBoundsException__init_());
},
jl_String_substring0 = ($this, $beginIndex) => {
    return $this.$substring($beginIndex, $this.$length());
},
jl_String_subSequence = ($this, $beginIndex, $endIndex) => {
    return $this.$substring($beginIndex, $endIndex);
},
jl_String_replace0 = ($this, $oldChar, $newChar) => {
    let $buffer, $i, var$5;
    if ($oldChar == $newChar)
        return $this;
    $buffer = $rt_createCharArray($this.$length());
    $i = 0;
    while ($i < $this.$length()) {
        var$5 = $this.$charAt($i) != $oldChar ? $this.$charAt($i) : $newChar;
        $buffer.data[$i] = var$5;
        $i = $i + 1 | 0;
    }
    return jl_String_fromArray($buffer);
},
jl_String_contains = ($this, $s) => {
    let $sz, $i, $j;
    $sz = $this.$length() - $s.$length() | 0;
    $i = 0;
    while ($i <= $sz) {
        $j = 0;
        while (true) {
            if ($j >= $s.$length())
                return 1;
            if ($this.$charAt($i + $j | 0) != $s.$charAt($j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return 0;
},
jl_String_replace = ($this, $target, $replacement) => {
    let $sb, $i, $sz, $j;
    if ($target === $replacement)
        return $this;
    if ($target.$isEmpty()) {
        $sb = jl_StringBuilder__init_();
        $i = 0;
        while ($i < $this.$length()) {
            $sb.$append($replacement);
            $sb.$append0($this.$charAt($i));
            $i = $i + 1 | 0;
        }
        $sb.$append($replacement);
        return $sb.$toString();
    }
    if ($target.$length() == 1 && $replacement.$length() == 1)
        return $this.$replace0($target.$charAt(0), $replacement.$charAt(0));
    $sb = jl_StringBuilder__init_();
    $sz = $this.$length() - $target.$length() | 0;
    $i = 0;
    while ($i <= $sz) {
        $j = 0;
        a: {
            while (true) {
                if ($j >= $target.$length()) {
                    $sb.$append($replacement);
                    $i = $i + ($target.$length() - 1 | 0) | 0;
                    break a;
                }
                if ($this.$charAt($i + $j | 0) != $target.$charAt($j))
                    break;
                $j = $j + 1 | 0;
            }
            $sb.$append0($this.$charAt($i));
        }
        $i = $i + 1 | 0;
    }
    $sb.$append($this.$substring0($i));
    return $sb.$toString();
},
jl_String_trim = $this => {
    let $lower, $upper;
    $lower = 0;
    $upper = $this.$length() - 1 | 0;
    a: {
        while ($lower <= $upper) {
            if ($this.$charAt($lower) > 32)
                break a;
            $lower = $lower + 1 | 0;
        }
    }
    while ($lower <= $upper && $this.$charAt($upper) <= 32) {
        $upper = $upper + (-1) | 0;
    }
    return $this.$substring($lower, $upper + 1 | 0);
},
jl_String_toString = $this => {
    return $this;
},
jl_String_toCharArray = $this => {
    let $array, $i, var$3;
    $array = $rt_createCharArray($this.$nativeString.length);
    $i = 0;
    while (true) {
        var$3 = $array.data;
        if ($i >= var$3.length)
            break;
        var$3[$i] = $this.$charAt($i);
        $i = $i + 1 | 0;
    }
    return $array;
},
jl_String_valueOf = $obj => {
    jl_String_$callClinit();
    return $obj === null ? $rt_s(24) : $obj.$toString();
},
jl_String_valueOf0 = $i => {
    jl_String_$callClinit();
    return ((jl_StringBuilder__init_()).$append2($i)).$toString();
},
jl_String_equals = ($this, $other) => {
    let $str;
    if ($this === $other)
        return 1;
    if (!($other instanceof jl_String))
        return 0;
    $str = $other;
    return $this.$nativeString !== $str.$nativeString ? 0 : 1;
},
jl_String_equalsIgnoreCase = ($this, $other) => {
    let $i;
    if ($this === $other)
        return 1;
    if ($other === null)
        return 0;
    if ($this.$length() != $other.$length())
        return 0;
    $i = 0;
    while ($i < $this.$length()) {
        if (jl_Character_toLowerCase($this.$charAt($i)) != jl_Character_toLowerCase($other.$charAt($i)))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
},
jl_String_hashCode = $this => {
    let $i;
    a: {
        if (!$this.$hashCode3) {
            $i = 0;
            while (true) {
                if ($i >= $this.$nativeString.length)
                    break a;
                $this.$hashCode3 = (31 * $this.$hashCode3 | 0) + $this.$nativeString.charCodeAt($i) | 0;
                $i = $i + 1 | 0;
            }
        }
    }
    return $this.$hashCode3;
},
jl_String_toUpperCase = ($this, $locale) => {
    let $upperCase;
    $upperCase = $this.$nativeString.toLocaleUpperCase((ju_Locale_toLanguageTag($locale)).$nativeString);
    if ($upperCase !== $this.$nativeString)
        $this = jl_String__init_1($upperCase);
    return $this;
},
jl_String_split = ($this, $regex) => {
    return jur_Pattern_split(jur_Pattern_compile($regex), $this.$toString());
},
jl_String_compareTo = ($this, var$1) => {
    return $this.$compareTo2(var$1);
},
jl_String__clinit_ = () => {
    jl_String_EMPTY_CHARS = $rt_createCharArray(0);
    jl_String_EMPTY = jl_String__init_5();
    jl_String_CASE_INSENSITIVE_ORDER = jl_String$_clinit_$lambda$_115_0__init_0();
},
jl_NegativeArraySizeException = $rt_classWithoutFields(jl_RuntimeException),
jl_NegativeArraySizeException__init_ = $this => {
    jl_RuntimeException__init_($this);
},
jl_NegativeArraySizeException__init_0 = () => {
    let var_0 = new jl_NegativeArraySizeException();
    jl_NegativeArraySizeException__init_(var_0);
    return var_0;
},
oe_NoDemandSetException = $rt_classWithoutFields(jl_Exception),
oe_NoDemandSetException__init_ = $this => {
    jl_Exception__init_($this);
},
oe_NoDemandSetException__init_0 = () => {
    let var_0 = new oe_NoDemandSetException();
    oe_NoDemandSetException__init_(var_0);
    return var_0;
};
let jur_ReluctantAltQuantifierSet = $rt_classWithoutFields(jur_AltQuantifierSet),
jur_ReluctantAltQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AltQuantifierSet__init_($this, $innerSet, $next, $type);
},
jur_ReluctantAltQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_ReluctantAltQuantifierSet();
    jur_ReluctantAltQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_ReluctantAltQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $shift;
    $shift = $this.$next2.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
},
jur_AbstractCharClass$LazyJavaWhitespace = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaWhitespace__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaWhitespace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
    jur_AbstractCharClass$LazyJavaWhitespace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaWhitespace_computeValue = $this => {
    return jur_AbstractCharClass$LazyJavaWhitespace$1__init_0($this);
},
ogu_CommonAlgorithms = $rt_classWithoutFields(),
ogu_CommonAlgorithms_LOGGER = null,
ogu_CommonAlgorithms_$callClinit = () => {
    ogu_CommonAlgorithms_$callClinit = $rt_eraseClinit(ogu_CommonAlgorithms);
    ogu_CommonAlgorithms__clinit_();
},
ogu_CommonAlgorithms_tryHierholzer = $eulerianGraph => {
    ogu_CommonAlgorithms_$callClinit();
    if (!ogu_CommonAlgorithms_isEulerian($eulerianGraph)) {
        ogu_CommonAlgorithms_LOGGER.$error($rt_s(418));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    if (($eulerianGraph.$getEdges0()).$size())
        return ogu_CommonAlgorithms_hierholzer($eulerianGraph, 0);
    ogu_CommonAlgorithms_LOGGER.$debug($rt_s(419));
    return ju_ArrayList__init_();
},
ogu_CommonAlgorithms_tryHierholzer1 = $eulerianGraph => {
    ogu_CommonAlgorithms_$callClinit();
    if (!ogu_CommonAlgorithms_isEulerian1($eulerianGraph)) {
        ogu_CommonAlgorithms_LOGGER.$error($rt_s(418));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    if (($eulerianGraph.$getEdges0()).$size())
        return ogu_CommonAlgorithms_hierholzer($eulerianGraph, 0);
    ogu_CommonAlgorithms_LOGGER.$debug($rt_s(419));
    return ju_ArrayList__init_();
},
ogu_CommonAlgorithms_tryHierholzer0 = $eulerianGraph => {
    let $ans;
    ogu_CommonAlgorithms_$callClinit();
    if (!ogu_CommonAlgorithms_isStronglyEulerian($eulerianGraph)) {
        ogu_CommonAlgorithms_LOGGER.$error($rt_s(418));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    if (!($eulerianGraph.$getEdges0()).$size()) {
        ogu_CommonAlgorithms_LOGGER.$debug($rt_s(419));
        return ju_ArrayList__init_();
    }
    $ans = ogu_CommonAlgorithms_directUndirectedCycles($eulerianGraph);
    $ans.$setDepotId($eulerianGraph.$getDepotId());
    if (ogu_CommonAlgorithms_isStronglyConnected0($ans))
        return ogu_CommonAlgorithms_hierholzer($ans, 1);
    ogu_CommonAlgorithms_LOGGER.$debug($rt_s(420));
    $rt_throw(jl_IllegalArgumentException__init_());
},
ogu_CommonAlgorithms_hierholzer = ($orig, $useMatchIds) => {
    let $graph, $edgeTrail, $edgeCycle, $visitedVertices, $simpleCycle, $start, $currNeighbors, $prevVertex, $nextStart, $indexedOrigEdges, var$13, var$14, $currEdge, $entry, $neigh, $links, var$19, $n, $j, $vertexIter;
    ogu_CommonAlgorithms_$callClinit();
    $graph = $orig.$getDeepCopy3();
    $edgeTrail = ju_ArrayList__init_();
    $edgeCycle = ju_ArrayList__init_();
    $visitedVertices = ju_ArrayList__init_();
    $simpleCycle = ju_ArrayList__init_();
    ($graph.$getVertices()).$iterator();
    $start = ($graph.$getInternalVertexMap()).$get($graph.$getDepotId());
    $visitedVertices.$add2($start);
    $simpleCycle.$add2($start);
    $currNeighbors = $start.$getNeighbors();
    $prevVertex = null;
    $nextStart = 1;
    $indexedOrigEdges = $orig.$getInternalEdgeMap();
    var$13 = $start;
    while ($nextStart) {
        var$14 = $prevVertex;
        $prevVertex = var$13;
        while (true) {
            $currEdge = null;
            var$13 = ($currNeighbors.$entrySet()).$iterator();
            a: {
                b: {
                    while (var$13.$hasNext()) {
                        $entry = var$13.$next();
                        $neigh = $entry.$getKey();
                        $links = $entry.$getValue0();
                        if ($links === null)
                            continue;
                        if (!$links.$size())
                            continue;
                        if (var$14 === null)
                            break b;
                        if ($neigh.$getId() != var$14.$getId())
                            break b;
                        if ($currEdge === null)
                            $currEdge = $links.$get(0);
                    }
                    break a;
                }
                $currEdge = $links.$get(0);
            }
            if ($currEdge === null)
                $currEdge = ((($currNeighbors.$values()).$iterator()).$next()).$get(0);
            if (!$useMatchIds)
                $edgeCycle.$add2(jl_Integer_valueOf($currEdge.$getMatchId()));
            else
                $edgeCycle.$add2(jl_Integer_valueOf(($indexedOrigEdges.$get($currEdge.$getMatchId())).$getMatchId()));
            var$19 = (($currEdge.$getEndpoints()).$getFirst()).$getId() != $prevVertex.$getId() ? ($currEdge.$getEndpoints()).$getFirst() : ($currEdge.$getEndpoints()).$getSecond();
            $simpleCycle.$add2(var$19);
            ($currNeighbors.$get1(var$19)).$remove0($currEdge);
            if (!($currNeighbors.$get1(var$19)).$size())
                $currNeighbors.$remove1(var$19);
            $currNeighbors = var$19.$getNeighbors();
            if (!$currEdge.$isDirected()) {
                ($currNeighbors.$get1($prevVertex)).$remove0($currEdge);
                if (!($currNeighbors.$get1($prevVertex)).$size())
                    $currNeighbors.$remove1($prevVertex);
            }
            if (var$19.$getId() == $start.$getId())
                break;
            var$14 = $prevVertex;
            $prevVertex = var$19;
        }
        $n = $visitedVertices.$size();
        $j = 0;
        c: {
            while (true) {
                if ($j >= $n)
                    break c;
                if ($visitedVertices.$get($j) === $start)
                    break;
                $j = $j + 1 | 0;
            }
            $visitedVertices.$remove($j);
            $visitedVertices.$addAll0($j, $simpleCycle);
            $edgeTrail.$addAll0($j, $edgeCycle);
        }
        $simpleCycle = ju_ArrayList__init_();
        $edgeCycle = ju_ArrayList__init_();
        $nextStart = 0;
        $vertexIter = $visitedVertices.$iterator();
        d: {
            while ($vertexIter.$hasNext()) {
                var$13 = $vertexIter.$next();
                if ((var$13.$getNeighbors()).$size()) {
                    $simpleCycle.$add2(var$13);
                    $currNeighbors = var$13.$getNeighbors();
                    $nextStart = 1;
                    $start = var$13;
                    break d;
                }
                $start = var$13;
            }
            var$13 = var$19;
        }
    }
    return $edgeTrail;
},
ogu_CommonAlgorithms_isStronglyConnected0 = $graph => {
    let $n, $m, $component, var$5, $nodei, $nodej, $index, $iter, var$10, var$11, $a;
    ogu_CommonAlgorithms_$callClinit();
    $n = ($graph.$getVertices0()).$size();
    $m = ($graph.$getEdges0()).$size();
    $component = $rt_createIntArray($n + 1 | 0);
    var$5 = $m + 1 | 0;
    $nodei = $rt_createIntArray(var$5);
    $nodej = $rt_createIntArray(var$5);
    $index = 1;
    $iter = ($graph.$getEdges0()).$iterator();
    while ($iter.$hasNext()) {
        var$10 = $nodej.data;
        var$11 = $nodei.data;
        $a = $iter.$next();
        var$11[$index] = ($a.$getTail()).$getId();
        var$10[$index] = ($a.$getHead()).$getId();
        $index = $index + 1 | 0;
    }
    var$10 = $component.data;
    ogu_CommonAlgorithms_stronglyConnectedComponents($n, $m, $nodei, $nodej, $component);
    return var$10[0] != 1 ? 0 : 1;
},
ogu_CommonAlgorithms_isStronglyConnected = $graph => {
    let $n, $m, var$4, $me, $component, var$7, $nodei, $nodej, $index, $iter, var$12, var$13, $e;
    ogu_CommonAlgorithms_$callClinit();
    $n = ($graph.$getVertices0()).$size();
    $m = ($graph.$getEdges0()).$size();
    var$4 = ($graph.$getEdges0()).$iterator();
    while (var$4.$hasNext()) {
        $me = var$4.$next();
        if (!$me.$isDirected())
            $m = $m + 1 | 0;
    }
    $component = $rt_createIntArray($n + 1 | 0);
    var$7 = $m + 1 | 0;
    $nodei = $rt_createIntArray(var$7);
    $nodej = $rt_createIntArray(var$7);
    $index = 1;
    $iter = ($graph.$getEdges0()).$iterator();
    while ($iter.$hasNext()) {
        var$12 = $nodej.data;
        var$13 = $nodei.data;
        $e = $iter.$next();
        var$13[$index] = (($e.$getEndpoints()).$getFirst()).$getId();
        var$12[$index] = (($e.$getEndpoints()).$getSecond()).$getId();
        if (!$e.$isDirected()) {
            $index = $index + 1 | 0;
            var$13[$index] = (($e.$getEndpoints()).$getSecond()).$getId();
            var$12[$index] = (($e.$getEndpoints()).$getFirst()).$getId();
        }
        $index = $index + 1 | 0;
    }
    var$13 = $component.data;
    ogu_CommonAlgorithms_stronglyConnectedComponents($n, $m, $nodei, $nodej, $component);
    return var$13[0] != 1 ? 0 : 1;
},
ogu_CommonAlgorithms_stronglyConnectedComponents0 = $graph => {
    let $n, $m, $component, var$5, $nodei, $nodej, $index, $iter, var$10, var$11, $a;
    ogu_CommonAlgorithms_$callClinit();
    $n = ($graph.$getVertices0()).$size();
    $m = ($graph.$getEdges0()).$size();
    $component = $rt_createIntArray($n + 1 | 0);
    var$5 = $m + 1 | 0;
    $nodei = $rt_createIntArray(var$5);
    $nodej = $rt_createIntArray(var$5);
    $index = 1;
    $iter = ($graph.$getEdges0()).$iterator();
    while ($iter.$hasNext()) {
        var$10 = $nodej.data;
        var$11 = $nodei.data;
        $a = $iter.$next();
        var$11[$index] = ($a.$getTail()).$getId();
        var$10[$index] = ($a.$getHead()).$getId();
        $index = $index + 1 | 0;
    }
    ogu_CommonAlgorithms_stronglyConnectedComponents($n, $m, $nodei, $nodej, $component);
    return $component;
},
ogu_CommonAlgorithms_connectedComponents = ($n, $edges, $nodei, $nodej, $component) => {
    let var$6, $i, var$8, $numnodes, $aux, $index, var$12, $q, var$14, var$15, $j, $nodeu, $nodev, $key1, $key2, var$21, var$22, var$23, $numcomp, $key3, $typeb, var$27, $typea, $compkey, $typea_0, $tracka, $tracka_0, $r, $p, var$35, var$36, var$37, var$38;
    ogu_CommonAlgorithms_$callClinit();
    if (!$edges) {
        var$6 = $component.data;
        var$6[0] = $n;
        $i = 1;
        while ($i < ($n + 1 | 0)) {
            var$6[$i] = $i;
            $i = $i + 1 | 0;
        }
        return;
    }
    var$8 = $n + 1 | 0;
    $numnodes = $rt_createIntArray(var$8);
    $aux = $rt_createIntArray(var$8);
    $index = $rt_createIntArray(3);
    var$12 = $index.data;
    var$12[1] = 1;
    var$12[2] = 2;
    $q = 2;
    $i = 1;
    while ($i <= $n) {
        var$6 = $component.data;
        var$14 = $numnodes.data;
        var$15 = $aux.data;
        var$6[$i] =  -$i | 0;
        var$14[$i] = 1;
        var$15[$i] = 0;
        $i = $i + 1 | 0;
    }
    $j = 1;
    a: {
        while (true) {
            var$6 = $nodei.data;
            var$14 = $nodej.data;
            var$15 = $component.data;
            $nodeu = var$6[$j];
            $nodev = var$14[$j];
            $key1 = var$15[$nodeu];
            if ($key1 < 0)
                $key1 = $nodeu;
            $key2 = var$15[$nodev];
            if ($key2 < 0)
                $key2 = $nodev;
            if ($key1 == $key2) {
                if ($j >= $edges) {
                    $edges = $edges + (-1) | 0;
                    break a;
                }
                var$6[$j] = var$6[$edges];
                var$14[$j] = var$14[$edges];
                var$6[$edges] = $nodeu;
                var$14[$edges] = $nodev;
                $edges = $edges + (-1) | 0;
                continue;
            }
            var$21 = $numnodes.data;
            if (var$21[$key1] < var$21[$key2])
                var$8 = jl_Math_abs(var$15[$key2]);
            else {
                var$8 =  -var$15[$key1] | 0;
                var$22 = $key1;
                $key1 = $key2;
                $key2 = var$22;
            }
            var$23 = $aux.data;
            var$23[var$8] = $key1;
            var$15[$key2] = var$15[$key1];
            var$8 = $key1;
            while (true) {
                var$15[var$8] = $key2;
                var$8 = var$23[var$8];
                if (!var$8)
                    break;
            }
            var$21[$key2] = var$21[$key2] + var$21[$key1] | 0;
            var$21[$key1] = 0;
            $j = $j + 1 | 0;
            if ($j > $edges)
                break a;
            if ($j > $n)
                break;
        }
    }
    $numcomp = 0;
    var$8 = 1;
    while (var$8 <= $n) {
        var$21 = $numnodes.data;
        if (var$21[var$8]) {
            var$23 = $aux.data;
            $numcomp = $numcomp + 1 | 0;
            var$21[$numcomp] = var$21[var$8];
            var$23[var$8] = $numcomp;
        }
        var$8 = var$8 + 1 | 0;
    }
    var$8 = 1;
    while (var$8 <= $n) {
        $key3 = var$15[var$8];
        if ($key3 < 0)
            $key3 = var$8;
        var$15[var$8] = $aux.data[$key3];
        var$8 = var$8 + 1 | 0;
    }
    if ($numcomp == 1) {
        var$15[0] = $numcomp;
        return;
    }
    var$21 = $numnodes.data;
    $typeb = var$21[1];
    var$21[1] = 1;
    var$27 = 2;
    while (var$27 <= $numcomp) {
        $typea = var$21[var$27];
        var$21[var$27] = (var$21[var$27 - 1 | 0] + $typeb | 0) - 1 | 0;
        var$27 = var$27 + 1 | 0;
        $typeb = $typea;
    }
    var$27 = 1;
    while (var$27 <= $edges) {
        var$23 = $aux.data;
        var$8 = var$6[var$27];
        $compkey = var$15[var$8];
        var$23[var$27] = var$21[$compkey];
        var$21[$compkey] = var$21[$compkey] + 1 | 0;
        var$27 = var$27 + 1 | 0;
    }
    var$22 = 1;
    while (var$22 <= $q) {
        $typea = var$12[var$22];
        while ($typea > var$22) {
            $typea_0 = var$12[$typea];
            var$12[$typea] =  -$typea_0 | 0;
            $typea = $typea_0;
        }
        var$12[var$22] =  -var$12[var$22] | 0;
        var$22 = var$22 + 1 | 0;
    }
    b: {
        var$23 = $aux.data;
        if (var$23[1] >= 0) {
            var$22 = 1;
            while (true) {
                if (var$22 > $edges)
                    break b;
                $tracka = var$23[var$22];
                while ($tracka > var$22) {
                    $tracka_0 = var$23[$tracka];
                    var$23[$tracka] =  -$tracka_0 | 0;
                    $tracka = $tracka_0;
                }
                var$23[var$22] =  -var$23[var$22] | 0;
                var$22 = var$22 + 1 | 0;
            }
        }
    }
    var$8 = 1;
    while (var$8 <= $q) {
        c: {
            $typea =  -var$12[var$8] | 0;
            if ($typea >= 0) {
                $r = 0;
                while (true) {
                    $typea = var$12[$typea];
                    $r = $r + 1 | 0;
                    if ($typea <= 0)
                        break;
                }
                var$22 = 1;
                var$27 = var$8;
                while (true) {
                    if (var$22 > $edges)
                        break c;
                    if (var$23[var$22] <= 0) {
                        $p = $r;
                        var$35 = var$22;
                        while (true) {
                            var$36 = var$35;
                            while (true) {
                                var$27 = jl_Math_abs(var$12[var$27]);
                                var$37 = $rt_compare(var$27, 1);
                                var$38 = var$37 ? var$14[var$36] : var$6[var$36];
                                var$36 = jl_Math_abs(var$23[var$36]);
                                if (var$37)
                                    var$14[var$36] = var$38;
                                else
                                    var$6[var$36] = var$38;
                                if (var$36 != var$35)
                                    continue;
                                $p = $p + (-1) | 0;
                                if (var$27 == var$8)
                                    break;
                            }
                            var$35 = jl_Math_abs(var$23[var$35]);
                            if (!$p)
                                break;
                        }
                    }
                    var$22 = var$22 + 1 | 0;
                }
            }
        }
        var$8 = var$8 + 1 | 0;
    }
    var$8 = 1;
    while (var$8 <= $q) {
        var$12[var$8] = jl_Math_abs(var$12[var$8]);
        var$8 = var$8 + 1 | 0;
    }
    if (var$23[1] > 0) {
        var$15[0] = $numcomp;
        return;
    }
    var$8 = 1;
    while (var$8 <= $edges) {
        var$23[var$8] = jl_Math_abs(var$23[var$8]);
        var$8 = var$8 + 1 | 0;
    }
    $typea = 1;
    var$8 = 1;
    while (var$8 <= $numcomp) {
        var$22 = var$21[var$8];
        var$21[var$8] = (var$22 - $typea | 0) + 1 | 0;
        var$8 = var$8 + 1 | 0;
        $typea = var$22;
    }
    var$15[0] = $numcomp;
},
ogu_CommonAlgorithms_stronglyConnectedComponents = ($n, $m, $nodei, $nodej, $component) => {
    let var$6, $backedge, $parent, $sequence, $stack, $firstedges, var$12, var$13, $endnode, $next, $trace, $fresh, $k, $i, $j, var$21, var$22, var$23, var$24, var$25, var$26, $series, $stackpointer, $numcompoents, $p, $skip, $q, $found, $r;
    ogu_CommonAlgorithms_$callClinit();
    var$6 = $n + 1 | 0;
    $backedge = $rt_createIntArray(var$6);
    $parent = $rt_createIntArray(var$6);
    $sequence = $rt_createIntArray(var$6);
    $stack = $rt_createIntArray(var$6);
    $firstedges = $rt_createIntArray($n + 2 | 0);
    var$12 = $firstedges.data;
    var$13 = $m + 1 | 0;
    $endnode = $rt_createIntArray(var$13);
    $next = $rt_createBooleanArray(var$6);
    $trace = $rt_createBooleanArray(var$6);
    $fresh = $rt_createBooleanArray(var$13);
    var$12[1] = 0;
    $k = 0;
    $i = 1;
    while ($i <= $n) {
        $j = 1;
        while ($j <= $m) {
            if ($nodei.data[$j] == $i) {
                var$21 = $nodej.data;
                var$22 = $endnode.data;
                $k = $k + 1 | 0;
                var$22[$k] = var$21[$j];
            }
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
        var$12[$i] = $k;
    }
    $j = 1;
    while ($j <= $m) {
        $fresh.data[$j] = 1;
        $j = $j + 1 | 0;
    }
    var$13 = 1;
    while (var$13 <= $n) {
        var$21 = $component.data;
        var$22 = $parent.data;
        var$23 = $sequence.data;
        var$24 = $backedge.data;
        var$25 = $next.data;
        var$26 = $trace.data;
        var$21[var$13] = 0;
        var$22[var$13] = 0;
        var$23[var$13] = 0;
        var$24[var$13] = 0;
        var$25[var$13] = 0;
        var$26[var$13] = 0;
        var$13 = var$13 + 1 | 0;
    }
    $series = 0;
    $stackpointer = 0;
    $numcompoents = 0;
    a: while (true) {
        $p = 0;
        while (true) {
            $p = $p + 1 | 0;
            if ($n < $p)
                break a;
            var$21 = $trace.data;
            if (!var$21[$p])
                break;
        }
        var$22 = $sequence.data;
        var$25 = $backedge.data;
        var$26 = $stack.data;
        var$23 = $next.data;
        $series = $series + 1 | 0;
        var$22[$p] = $series;
        var$25[$p] = $series;
        var$21[$p] = 1;
        $stackpointer = $stackpointer + 1 | 0;
        var$26[$stackpointer] = $p;
        var$23[$p] = 1;
        while (true) {
            $skip = 0;
            $q = 1;
            b: {
                while ($q <= $n) {
                    $found = 0;
                    var$6 = var$12[$p] + 1 | 0;
                    c: {
                        while (var$6 <= var$12[$p + 1 | 0]) {
                            if ($endnode.data[var$6] == $q) {
                                var$24 = $fresh.data;
                                if (var$24[var$6]) {
                                    var$24[var$6] = 0;
                                    $found = 1;
                                    break c;
                                }
                            }
                            var$6 = var$6 + 1 | 0;
                        }
                    }
                    if ($found) {
                        if (!var$21[$q]) {
                            var$24 = $parent.data;
                            $series = $series + 1 | 0;
                            var$22[$q] = $series;
                            var$25[$q] = $series;
                            var$24[$q] = $p;
                            var$21[$q] = 1;
                            $stackpointer = $stackpointer + 1 | 0;
                            var$26[$stackpointer] = $q;
                            var$23[$q] = 1;
                        } else if (!var$21[$q])
                            $q = $p;
                        else if (var$22[$q] >= var$22[$p])
                            $q = $p;
                        else if (!var$23[$q])
                            $q = $p;
                        else {
                            var$6 = var$25[$p] >= var$22[$q] ? var$22[$q] : var$25[$p];
                            var$25[$p] = var$6;
                            $q = $p;
                        }
                        $skip = 1;
                        break b;
                    }
                    $q = $q + 1 | 0;
                }
                $q = $p;
            }
            if ($skip) {
                $p = $q;
                continue;
            }
            if (var$25[$q] == var$22[$q]) {
                $numcompoents = $numcompoents + 1 | 0;
                while (true) {
                    var$24 = $component.data;
                    $r = var$26[$stackpointer];
                    $stackpointer = $stackpointer + (-1) | 0;
                    var$23[$r] = 0;
                    var$24[$r] = $numcompoents;
                    if ($r == $q)
                        break;
                }
            }
            var$24 = $parent.data;
            if (!var$24[$q])
                break;
            var$6 = var$24[$q];
            var$13 = var$25[var$24[$q]] >= var$25[$q] ? var$25[$q] : var$25[var$24[$q]];
            var$25[var$6] = var$13;
            $p = var$24[$q];
        }
    }
    $component.data[0] = $numcompoents;
},
ogu_CommonAlgorithms_isConnected0 = $graph => {
    let $vertices, $nextUp, $toAdd, $visited, $iter, $v, var$8, $uv;
    ogu_CommonAlgorithms_$callClinit();
    $vertices = ju_HashSet__init_();
    $vertices.$addAll($graph.$getVertices0());
    $nextUp = ju_HashSet__init_();
    $toAdd = ju_HashSet__init_();
    $visited = ju_HashSet__init_();
    if ($vertices.$size() <= 1)
        return 1;
    $nextUp.$add2(($vertices.$iterator()).$next());
    while ($vertices.$size() > 0 && $nextUp.$size() > 0) {
        $iter = $nextUp.$iterator();
        while ($iter.$hasNext()) {
            $v = $iter.$next();
            $vertices.$remove0($v);
            var$8 = (($v.$getNeighbors0()).$keySet()).$iterator();
            while (var$8.$hasNext()) {
                $uv = var$8.$next();
                if (!$visited.$contains0(jl_Integer_valueOf($uv.$getId()))) {
                    $toAdd.$add2($uv);
                    $visited.$add2(jl_Integer_valueOf($uv.$getId()));
                }
            }
        }
        $nextUp.$clear();
        $nextUp.$addAll($toAdd);
        $toAdd.$clear();
    }
    return $vertices.$size() ? 0 : 1;
},
ogu_CommonAlgorithms_isConnected = $graph => {
    let $vertices, $nextUp, $toAdd, $visited, $iter, $v, var$8, $wv;
    ogu_CommonAlgorithms_$callClinit();
    $vertices = ju_HashSet__init_();
    $vertices.$addAll($graph.$getVertices0());
    $nextUp = ju_HashSet__init_();
    $toAdd = ju_HashSet__init_();
    $visited = ju_HashSet__init_();
    if ($vertices.$size() <= 1)
        return 1;
    $nextUp.$add2(($vertices.$iterator()).$next());
    while ($vertices.$size() > 0 && $nextUp.$size() > 0) {
        $iter = $nextUp.$iterator();
        while ($iter.$hasNext()) {
            $v = $iter.$next();
            $vertices.$remove0($v);
            var$8 = (($v.$getNeighbors0()).$keySet()).$iterator();
            while (var$8.$hasNext()) {
                $wv = var$8.$next();
                if (!$visited.$contains0(jl_Integer_valueOf($wv.$getId()))) {
                    $toAdd.$add2($wv);
                    $visited.$add2(jl_Integer_valueOf($wv.$getId()));
                }
            }
        }
        $nextUp.$clear();
        $nextUp.$addAll($toAdd);
        $toAdd.$clear();
    }
    return $vertices.$size() ? 0 : 1;
},
ogu_CommonAlgorithms_isEulerian = $graph => {
    let var$2, $v;
    ogu_CommonAlgorithms_$callClinit();
    var$2 = ($graph.$getVertices0()).$iterator();
    while (var$2.$hasNext()) {
        $v = var$2.$next();
        if ($v.$getInDegree() != $v.$getOutDegree())
            return 0;
    }
    return 1;
},
ogu_CommonAlgorithms_isEulerian1 = $graph => {
    let var$2, $v;
    ogu_CommonAlgorithms_$callClinit();
    var$2 = ($graph.$getVertices0()).$iterator();
    while (var$2.$hasNext()) {
        $v = var$2.$next();
        if (($v.$getDegree() % 2 | 0) == 1)
            return 0;
    }
    return 1;
},
ogu_CommonAlgorithms_isEulerian0 = $graph => {
    let var$2, $v;
    ogu_CommonAlgorithms_$callClinit();
    var$2 = ($graph.$getVertices0()).$iterator();
    while (var$2.$hasNext()) {
        $v = var$2.$next();
        if (($v.$getDegree() % 2 | 0) == 1)
            return 0;
    }
    return 1;
},
ogu_CommonAlgorithms_isStronglyEulerian = $graph => {
    let var$2, $v;
    ogu_CommonAlgorithms_$callClinit();
    var$2 = ($graph.$getVertices0()).$iterator();
    while (var$2.$hasNext()) {
        $v = var$2.$next();
        if (($v.$getDegree() % 2 | 0) == 1)
            return 0;
        if ($v.$getDelta())
            return 0;
        if (!$v.$getDegree() && !$v.$getInDegree()) {
            ogu_CommonAlgorithms_LOGGER.$warn($rt_s(421));
            return 0;
        }
    }
    return 1;
},
ogu_CommonAlgorithms_slfShortestPaths0 = ($g, $sourceId, $dist, $path) => {
    ogu_CommonAlgorithms_$callClinit();
    ogu_CommonAlgorithms_slfShortestPaths($g, $sourceId, $dist, $path, null);
},
ogu_CommonAlgorithms_slfShortestPaths = ($g, $sourceId, $dist, $path, $edgePath) => {
    let $n, $BIG, var$8, $l, var$10, var$11, var$12, var$13, $recordEdgePath, $i, $indexedVertices, $activeVertices, $active, var$19, $minid, $counter, $lim, $searchForNegativeCycles, $u, $uid, var$26, $v, $min, $vid, $link, $alt, var$32, $continueSearching, $q, $problemPath, $problemEdgePath, $next;
    ogu_CommonAlgorithms_$callClinit();
    if (jl_Object_getClass($g) === $rt_cls(ogi_WindyGraph)) {
        ogu_CommonAlgorithms_windySLF($g, $sourceId, $dist, $path, $edgePath);
        return;
    }
    $n = ($g.$getVertices()).$size();
    $BIG = 0;
    var$8 = ($g.$getEdges()).$iterator();
    while (var$8.$hasNext()) {
        $l = var$8.$next();
        $BIG = $BIG + jl_Math_abs($l.$getCost()) | 0;
    }
    var$10 = $dist.data;
    var$11 = var$10.length;
    var$12 = $n + 1 | 0;
    if (var$11 == var$12) {
        var$13 = $path.data;
        if (var$13.length == var$12 && $BIG >= 0) {
            $recordEdgePath = $edgePath === null ? 0 : 1;
            if ($recordEdgePath && $edgePath.data.length != var$12) {
                ogu_CommonAlgorithms_LOGGER.$error($rt_s(422));
                $rt_throw(jl_IllegalArgumentException__init_());
            }
            $i = 0;
            while ($i <= $n) {
                var$10[$i] = $BIG;
                var$13[$i] = 0;
                if ($recordEdgePath)
                    $edgePath.data[$i] = 0;
                $i = $i + 1 | 0;
            }
            var$10[$sourceId] = 0;
            $indexedVertices = $g.$getInternalVertexMap();
            $activeVertices = ju_LinkedList__init_();
            $activeVertices.$add2(jl_Integer_valueOf($sourceId));
            $active = $rt_createBooleanArray(var$12);
            var$19 = $active.data;
            var$19[$sourceId] = 1;
            $minid = 0;
            $counter = 0;
            $lim = $rt_imul($n, ($g.$getEdges()).$size());
            $searchForNegativeCycles = 0;
            a: {
                while (!$activeVertices.$isEmpty()) {
                    $u = $indexedVertices.$get(($activeVertices.$remove3()).$intValue());
                    $uid = $u.$getId();
                    var$19[$uid] = 0;
                    var$26 = (($u.$getNeighbors()).$keySet()).$iterator();
                    while (var$26.$hasNext()) {
                        $v = var$26.$next();
                        $l = ($u.$getNeighbors()).$get1($v);
                        $min = 2147483647;
                        $vid = $v.$getId();
                        var$8 = $l.$iterator();
                        while (var$8.$hasNext()) {
                            $link = var$8.$next();
                            if ($link.$getCost() < $min) {
                                $min = $link.$getCost();
                                $minid = $link.$getId();
                            }
                        }
                        $alt = var$10[$uid] + $min | 0;
                        if ($alt < var$10[$vid]) {
                            var$10[$vid] = $alt;
                            var$13[$vid] = $uid;
                            if ($recordEdgePath)
                                $edgePath.data[$vid] = $minid;
                            if (!var$19[$vid]) {
                                var$19[$vid] = 1;
                                if ($activeVertices.$isEmpty())
                                    $activeVertices.$add2(jl_Integer_valueOf($vid));
                                else if (var$10[$vid] > var$10[($activeVertices.$peek()).$intValue()])
                                    $activeVertices.$addLast(jl_Integer_valueOf($vid));
                                else
                                    $activeVertices.$addFirst(jl_Integer_valueOf($vid));
                            }
                        }
                    }
                    $counter = $counter + 1 | 0;
                    if ($counter > $lim) {
                        $searchForNegativeCycles = 1;
                        break a;
                    }
                }
            }
            b: {
                if ($searchForNegativeCycles) {
                    var$32 = ($g.$getEdges()).$iterator();
                    while (true) {
                        if (!var$32.$hasNext())
                            break b;
                        $l = var$32.$next();
                        if ($l.$getCost() > 0)
                            continue;
                        $continueSearching = 0;
                        (($l.$getEndpoints()).$getFirst()).$getId();
                        $q = (($l.$getEndpoints()).$getSecond()).$getId();
                        $problemPath = gt_TIntArrayList__init_();
                        $problemEdgePath = gt_TIntArrayList__init_();
                        var$11 = 0;
                        var$12 = $q;
                        c: {
                            while (true) {
                                $next = var$13[var$12];
                                $problemPath.$add6($next);
                                if ($recordEdgePath)
                                    $problemEdgePath.$add6($edgePath.data[var$12]);
                                var$11 = var$11 + 1 | 0;
                                if (var$11 > $n) {
                                    $continueSearching = 1;
                                    break c;
                                }
                                if ($next == $q)
                                    break;
                                var$12 = $next;
                            }
                        }
                        if (!$continueSearching) {
                            ogu_CommonAlgorithms_LOGGER.$error($rt_s(423));
                            $rt_throw(oe_NegativeCycleException__init_($q, $problemPath.$toNativeArray1(), $problemEdgePath.$toNativeArray1(), $rt_s(424)));
                        }
                    }
                }
            }
            return;
        }
    }
    ogu_CommonAlgorithms_LOGGER.$error($rt_s(422));
    $rt_throw(jl_IllegalArgumentException__init_());
},
ogu_CommonAlgorithms_windySLF = ($g, $sourceId, $dist, $path, $edgePath) => {
    let $n, $virtual, $BIG, var$9, $l, var$11, $e, var$13, var$14, var$15, $recordEdgePath, $i, $indexedVertices, $activeVertices, $active, var$21, $minid, $counter, $lim, $searchForNegativeCycles, $u, $uid, var$28, $v, $min, $vid, $link, $alt, $continueSearching, $q, $problemPath, $problemEdgePath, $next, $$je;
    ogu_CommonAlgorithms_$callClinit();
    $n = ($g.$getVertices0()).$size();
    $virtual = ogi_DirectedGraph__init_0($n);
    $BIG = 0;
    a: {
        try {
            var$9 = ($g.$getEdges0()).$iterator();
            while (true) {
                if (!var$9.$hasNext())
                    break a;
                $l = var$9.$next();
                var$11 = $BIG + jl_Math_abs($l.$getCost()) | 0;
                $BIG = var$11 + jl_Math_abs($l.$getReverseCost()) | 0;
                $virtual.$addEdge12((($l.$getEndpoints()).$getFirst()).$getId(), (($l.$getEndpoints()).$getSecond()).$getId(), $l.$getCost());
                $virtual.$addEdge12((($l.$getEndpoints()).$getSecond()).$getId(), (($l.$getEndpoints()).$getFirst()).$getId(), $l.$getReverseCost());
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
        return;
    }
    var$13 = $dist.data;
    var$11 = var$13.length;
    var$14 = $n + 1 | 0;
    if (var$11 == var$14) {
        var$15 = $path.data;
        if (var$15.length == var$14 && $BIG >= 0) {
            $recordEdgePath = $edgePath === null ? 0 : 1;
            if ($recordEdgePath && $edgePath.data.length != var$14) {
                ogu_CommonAlgorithms_LOGGER.$error($rt_s(422));
                $rt_throw(jl_IllegalArgumentException__init_());
            }
            $i = 0;
            while ($i <= $n) {
                var$13[$i] = $BIG;
                var$15[$i] = 0;
                if ($recordEdgePath)
                    $edgePath.data[$i] = 0;
                $i = $i + 1 | 0;
            }
            var$13[$sourceId] = 0;
            $indexedVertices = $virtual.$getInternalVertexMap();
            $activeVertices = ju_LinkedList__init_();
            $activeVertices.$add2(jl_Integer_valueOf($sourceId));
            $active = $rt_createBooleanArray(var$14);
            var$21 = $active.data;
            var$21[$sourceId] = 1;
            $minid = 0;
            $counter = 0;
            $lim = $rt_imul($n, ($g.$getEdges0()).$size());
            $searchForNegativeCycles = 0;
            b: {
                while (!$activeVertices.$isEmpty()) {
                    $u = $indexedVertices.$get(($activeVertices.$remove3()).$intValue());
                    $uid = $u.$getId();
                    var$21[$uid] = 0;
                    var$28 = (($u.$getNeighbors()).$keySet()).$iterator();
                    while (var$28.$hasNext()) {
                        $v = var$28.$next();
                        $l = ($u.$getNeighbors()).$get1($v);
                        $min = 2147483647;
                        $vid = $v.$getId();
                        var$9 = $l.$iterator();
                        while (var$9.$hasNext()) {
                            $link = var$9.$next();
                            if ($link.$getCost() < $min) {
                                $min = $link.$getCost();
                                $minid = $link.$getMatchId();
                            }
                        }
                        $alt = var$13[$uid] + $min | 0;
                        if ($alt < var$13[$vid]) {
                            var$13[$vid] = $alt;
                            var$15[$vid] = $uid;
                            if ($recordEdgePath)
                                $edgePath.data[$vid] = $minid;
                            if (!var$21[$vid]) {
                                var$21[$vid] = 1;
                                if ($activeVertices.$isEmpty())
                                    $activeVertices.$add2(jl_Integer_valueOf($vid));
                                else if (var$13[$vid] > var$13[($activeVertices.$peek()).$intValue()])
                                    $activeVertices.$addLast(jl_Integer_valueOf($vid));
                                else
                                    $activeVertices.$addFirst(jl_Integer_valueOf($vid));
                            }
                        }
                    }
                    $counter = $counter + 1 | 0;
                    if ($counter > $lim) {
                        $searchForNegativeCycles = 1;
                        break b;
                    }
                }
            }
            c: {
                if ($searchForNegativeCycles) {
                    var$28 = ($g.$getEdges0()).$iterator();
                    while (true) {
                        if (!var$28.$hasNext())
                            break c;
                        $l = var$28.$next();
                        if ($l.$getCost() > 0)
                            continue;
                        $continueSearching = 0;
                        (($l.$getEndpoints()).$getFirst()).$getId();
                        $q = (($l.$getEndpoints()).$getSecond()).$getId();
                        $problemPath = gt_TIntArrayList__init_();
                        $problemEdgePath = gt_TIntArrayList__init_();
                        var$11 = 0;
                        var$14 = $q;
                        d: {
                            while (true) {
                                $next = var$15[var$14];
                                $problemPath.$add6($next);
                                if ($recordEdgePath)
                                    $problemEdgePath.$add6($edgePath.data[var$14]);
                                var$11 = var$11 + 1 | 0;
                                if (var$11 > $n) {
                                    $continueSearching = 1;
                                    break d;
                                }
                                if ($next == $q)
                                    break;
                                var$14 = $next;
                            }
                        }
                        if (!$continueSearching) {
                            ogu_CommonAlgorithms_LOGGER.$error($rt_s(423));
                            $rt_throw(oe_NegativeCycleException__init_($q, $problemPath.$toNativeArray1(), $problemEdgePath.$toNativeArray1(), $rt_s(424)));
                        }
                    }
                }
            }
            return;
        }
    }
    ogu_CommonAlgorithms_LOGGER.$error($rt_s(422));
    $rt_throw(jl_IllegalArgumentException__init_());
},
ogu_CommonAlgorithms_dijkstrasAlgorithm = ($g, $sourceId, $dist, $path, $edgePath) => {
    let var$6, $n, var$8, var$9, var$10, $recordEdgePath, $virtual, var$13, $l, $e, $pq, $i, $minid, $indexedVertices, $temp, $u, $uid, var$23, $v, $min, $vid, var$27, $link, $alt, $$je;
    ogu_CommonAlgorithms_$callClinit();
    var$6 = $dist.data;
    $n = ($g.$getVertices()).$size();
    var$8 = var$6.length;
    var$9 = $n + 1 | 0;
    if (var$8 == var$9) {
        var$10 = $path.data;
        if (var$10.length == var$9) {
            $recordEdgePath = $edgePath === null ? 0 : 1;
            if ($recordEdgePath && $edgePath.data.length != var$9) {
                ogu_CommonAlgorithms_LOGGER.$error($rt_s(425));
                $rt_throw(jl_IllegalArgumentException__init_());
            }
            $virtual = ogi_DirectedGraph__init_0($n);
            a: {
                try {
                    var$13 = ($g.$getEdges()).$iterator();
                    while (true) {
                        if (!var$13.$hasNext())
                            break a;
                        $l = var$13.$next();
                        if ($l.$isDirected())
                            $virtual.$addEdge13((($l.$getEndpoints()).$getFirst()).$getId(), (($l.$getEndpoints()).$getSecond()).$getId(), $l.$getCost(), $l.$getId());
                        else if (!$rt_isInstance($l, oli_AsymmetricLink)) {
                            $virtual.$addEdge13((($l.$getEndpoints()).$getFirst()).$getId(), (($l.$getEndpoints()).$getSecond()).$getId(), $l.$getCost(), $l.$getId());
                            $virtual.$addEdge13((($l.$getEndpoints()).$getSecond()).$getId(), (($l.$getEndpoints()).$getFirst()).$getId(), $l.$getCost(), $l.$getId());
                        } else {
                            $virtual.$addEdge13((($l.$getEndpoints()).$getFirst()).$getId(), (($l.$getEndpoints()).$getSecond()).$getId(), $l.$getCost(), $l.$getId());
                            $virtual.$addEdge13((($l.$getEndpoints()).$getSecond()).$getId(), (($l.$getEndpoints()).$getFirst()).$getId(), $l.$getReverseCost(), $l.$getId());
                        }
                    }
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace0();
                return;
            }
            $pq = ju_PriorityQueue__init_0($n, ogu_Utils$DijkstrasComparator__init_());
            var$6[$sourceId] = 0;
            var$10[$sourceId] = (-1);
            $i = 1;
            while ($i <= $n) {
                if ($i != $sourceId) {
                    var$6[$i] = 2147483647;
                    var$10[$i] = (-1);
                    if ($recordEdgePath)
                        $edgePath.data[$i] = (-1);
                }
                $pq.$add2(ogu_Pair__init_(jl_Integer_valueOf($i), jl_Integer_valueOf(var$6[$i])));
                $i = $i + 1 | 0;
            }
            $minid = 2147483647;
            $indexedVertices = $virtual.$getInternalVertexMap();
            while (!$pq.$isEmpty()) {
                $temp = $pq.$poll();
                $u = $indexedVertices.$get(($temp.$getFirst()).$intValue());
                $uid = $u.$getId();
                if (var$6[$uid] == 2147483647)
                    continue;
                var$23 = (($u.$getNeighbors0()).$keySet()).$iterator();
                while (var$23.$hasNext()) {
                    $v = var$23.$next();
                    $l = ($u.$getNeighbors0()).$get1($v);
                    $min = 2147483647;
                    $vid = $v.$getId();
                    if (!$pq.$contains0(ogu_Pair__init_(jl_Integer_valueOf($vid), jl_Integer_valueOf(var$6[$vid]))))
                        continue;
                    var$27 = $l.$iterator();
                    while (var$27.$hasNext()) {
                        $link = var$27.$next();
                        if ($link.$getCost() < $min) {
                            $min = $link.$getCost();
                            $minid = $link.$getMatchId();
                        }
                    }
                    $alt = var$6[$uid] + $min | 0;
                    if ($alt < var$6[$vid]) {
                        $pq.$remove0(ogu_Pair__init_(jl_Integer_valueOf($vid), jl_Integer_valueOf(var$6[$vid])));
                        var$6[$vid] = $alt;
                        var$10[$vid] = $uid;
                        if ($recordEdgePath)
                            $edgePath.data[$vid] = $minid;
                        $pq.$add2(ogu_Pair__init_(jl_Integer_valueOf($vid), jl_Integer_valueOf(var$6[$vid])));
                    }
                }
            }
            return;
        }
    }
    ogu_CommonAlgorithms_LOGGER.$error($rt_s(425));
    $rt_throw(jl_IllegalArgumentException__init_());
},
ogu_CommonAlgorithms_fwLeastCostPaths0 = ($g, $dist, $path) => {
    ogu_CommonAlgorithms_$callClinit();
    ogu_CommonAlgorithms_fwLeastCostPaths($g, $dist, $path, null);
},
ogu_CommonAlgorithms_randomizedLowCostSpanningTree = ($g, $setSize) => {
    let $m, $ans, $indexedEdges, $pq, $i, $temp, var$9, $start, $visitedVertices, $currTreeSize, $mstSize, $rng, var$15, var$16, $tempEndpoints, $offset, $counter;
    ogu_CommonAlgorithms_$callClinit();
    $m = ($g.$getEdges0()).$size();
    $ans = $rt_createIntArray($m + 1 | 0);
    $indexedEdges = $g.$getInternalEdgeMap();
    $pq = ju_ArrayList__init_();
    $i = 1;
    while ($i <= $m) {
        $temp = $indexedEdges.$get($i);
        $pq.$add2(ogu_Pair__init_(jl_Integer_valueOf($i), jl_Integer_valueOf($temp.$getCost())));
        $i = $i + 1 | 0;
    }
    var$9 = $ans.data;
    ju_Collections_sort($pq, ogu_Utils$DijkstrasComparator__init_());
    ju_Collections_reverse0($pq);
    $start = $pq.$size() - 1 | 0;
    $visitedVertices = ju_HashSet__init_();
    $temp = $indexedEdges.$get((($pq.$get($start)).$getFirst()).$intValue());
    var$9[$temp.$getId()] = 1;
    $visitedVertices.$add2(jl_Integer_valueOf((($temp.$getEndpoints()).$getFirst()).$getId()));
    $visitedVertices.$add2(jl_Integer_valueOf((($temp.$getEndpoints()).$getSecond()).$getId()));
    $pq.$remove($start);
    $currTreeSize = 1;
    $mstSize = ($g.$getVertices0()).$size() - 1 | 0;
    $rng = ju_Random__init_0(Long_fromInt(1000));
    while ($currTreeSize < $mstSize) {
        var$15 = $pq.$size() - 1 | 0;
        var$16 = $indexedEdges.$get((($pq.$get(var$15)).$getFirst()).$intValue());
        $tempEndpoints = var$16.$getEndpoints();
        $offset = $rng.$nextInt($setSize);
        $counter = 0;
        while ($counter <= $offset) {
            a: {
                while (true) {
                    if ($visitedVertices.$contains0(jl_Integer_valueOf(($tempEndpoints.$getFirst()).$getId())) != $visitedVertices.$contains0(jl_Integer_valueOf(($tempEndpoints.$getSecond()).$getId())))
                        break a;
                    if (!var$15)
                        break;
                    var$15 = var$15 + (-1) | 0;
                    var$16 = $indexedEdges.$get((($pq.$get(var$15)).$getFirst()).$intValue());
                    $tempEndpoints = var$16.$getEndpoints();
                }
            }
            $counter = $counter + 1 | 0;
        }
        var$9[var$16.$getId()] = 1;
        $visitedVertices.$add2(jl_Integer_valueOf(((var$16.$getEndpoints()).$getFirst()).$getId()));
        $visitedVertices.$add2(jl_Integer_valueOf(((var$16.$getEndpoints()).$getSecond()).$getId()));
        $pq.$remove(var$15);
        $currTreeSize = $currTreeSize + 1 | 0;
    }
    return $ans;
},
ogu_CommonAlgorithms_directUndirectedCycles = $input => {
    let $ans, $temp, $n, $i, var$6, $e, $indexedEdges, $indexedVertices, $startId, $currId, var$12, $v, $foundNewEdge, $usedEdges, $vertexIds, $edgeIds, $curr, $neighbors, var$20, $lim, $e2, var$23, $$je;
    ogu_CommonAlgorithms_$callClinit();
    if (!ogu_CommonAlgorithms_isStronglyEulerian($input)) {
        ogu_CommonAlgorithms_LOGGER.$error($rt_s(426));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    a: {
        try {
            $ans = ogi_DirectedGraph__init_();
            $temp = ogi_UndirectedGraph__init_();
            $n = ($input.$getVertices0()).$size();
            $i = 0;
            while ($i < $n) {
                $temp.$addVertex2(ovi_UndirectedVertex__init_($rt_s(427)));
                $ans.$addVertex1(ovi_DirectedVertex__init_($rt_s(307)));
                $i = $i + 1 | 0;
            }
            var$6 = ($input.$getEdges0()).$iterator();
            while (var$6.$hasNext()) {
                $e = var$6.$next();
                if ($e.$isDirected())
                    $ans.$addEdge(($e.$getTail0()).$getId(), ($e.$getHead0()).$getId(), $rt_s(307), $e.$getCost(), $e.$getId());
                else
                    $temp.$addEdge((($e.$getEndpoints()).$getFirst()).$getId(), (($e.$getEndpoints()).$getSecond()).$getId(), $rt_s(427), $e.$getCost(), $e.$getId());
            }
            $indexedEdges = $temp.$getInternalEdgeMap();
            $indexedVertices = $temp.$getInternalVertexMap();
            $startId = 0;
            $currId = 0;
            while (($temp.$getEdges0()).$size() > 0) {
                var$12 = ($temp.$getVertices0()).$iterator();
                b: {
                    while (var$12.$hasNext()) {
                        $v = var$12.$next();
                        if ($v.$getDegree() > 0) {
                            $currId = $v.$getId();
                            $startId = $currId;
                            break b;
                        }
                    }
                }
                $foundNewEdge = 0;
                $usedEdges = ju_HashSet__init_();
                $vertexIds = ju_ArrayList__init_();
                $edgeIds = ju_ArrayList__init_();
                $vertexIds.$add2(jl_Integer_valueOf($startId));
                while (true) {
                    $curr = $indexedVertices.$get($currId);
                    $neighbors = $curr.$getNeighbors0();
                    var$20 = ($neighbors.$keySet()).$iterator();
                    c: {
                        while (var$20.$hasNext()) {
                            $v = var$20.$next();
                            var$12 = ($neighbors.$get1($v)).$iterator();
                            d: {
                                while (var$12.$hasNext()) {
                                    $e = var$12.$next();
                                    if (!$usedEdges.$contains0(jl_Integer_valueOf($e.$getId()))) {
                                        $foundNewEdge = 1;
                                        $currId = $v.$getId();
                                        $vertexIds.$add2(jl_Integer_valueOf($currId));
                                        $edgeIds.$add2(jl_Integer_valueOf($e.$getId()));
                                        $usedEdges.$add2(jl_Integer_valueOf($e.$getId()));
                                        break d;
                                    }
                                }
                            }
                            if ($foundNewEdge) {
                                $foundNewEdge = 0;
                                break c;
                            }
                        }
                    }
                    if ($currId == $startId)
                        break;
                }
                $lim = $edgeIds.$size();
                $i = 0;
                while ($i < $lim) {
                    $e2 = $indexedEdges.$get(($edgeIds.$get($i)).$intValue());
                    $temp.$removeEdge2($e2);
                    var$23 = ($vertexIds.$get($i)).$intValue();
                    $i = $i + 1 | 0;
                    $ans.$addEdge(var$23, ($vertexIds.$get($i)).$intValue(), $rt_s(428), $e2.$getCost(), $e2.$getMatchId());
                }
            }
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
ogu_CommonAlgorithms_fwLeastCostPaths = ($g, $dist, $path, $edgePath) => {
    let $n, $m, $recordEdgePath, var$8, var$9, var$10, var$11, $g2, $i, $indexedWindyEdges, $temp, $j, var$17, $vi, var$19, $v, $l, $min, $edge, var$24, $link, $k, $e, $$je;
    ogu_CommonAlgorithms_$callClinit();
    $n = ($g.$getVertices()).$size();
    $m = ($g.$getEdges()).$size();
    $recordEdgePath = $edgePath === null ? 0 : 1;
    var$8 = $dist.data;
    var$9 = var$8.length;
    var$10 = $n + 1 | 0;
    if (var$9 == var$10) {
        var$11 = $path.data;
        if (var$11.length == var$10) {
            if ($recordEdgePath && $edgePath.data.length != var$10) {
                ogu_CommonAlgorithms_LOGGER.$error($rt_s(429));
                $rt_throw(jl_IllegalArgumentException__init_());
            }
            a: {
                b: {
                    try {
                        $g2 = ogi_DirectedGraph__init_();
                        $i = 0;
                        while ($i < $n) {
                            $g2.$addVertex1(ovi_DirectedVertex__init_($rt_s(293)));
                            $i = $i + 1 | 0;
                        }
                        $indexedWindyEdges = $g.$getInternalEdgeMap();
                        $i = 1;
                        while ($i <= $m) {
                            $temp = $indexedWindyEdges.$get($i);
                            if ($temp !== null) {
                                if ($temp.$isDirected())
                                    $g2.$addEdge((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(304), $temp.$getCost(), $i);
                                else if (!$rt_isInstance($temp, oli_AsymmetricLink)) {
                                    $g2.$addEdge($temp.$getFirstEndpointId(), $temp.$getSecondEndpointId(), $rt_s(304), $temp.$getCost(), $i);
                                    $g2.$addEdge($temp.$getSecondEndpointId(), $temp.$getFirstEndpointId(), $rt_s(305), $temp.$getCost(), $i);
                                } else {
                                    $g2.$addEdge((($temp.$getEndpoints()).$getFirst()).$getId(), (($temp.$getEndpoints()).$getSecond()).$getId(), $rt_s(304), $temp.$getCost(), $i);
                                    $g2.$addEdge((($temp.$getEndpoints()).$getSecond()).$getId(), (($temp.$getEndpoints()).$getFirst()).$getId(), $rt_s(305), $temp.$getReverseCost(), $i);
                                }
                            }
                            $i = $i + 1 | 0;
                        }
                        $i = 0;
                        while ($i <= $n) {
                            $j = 0;
                            while ($j <= $n) {
                                var$8[$i].data[$j] = 2147483647;
                                $j = $j + 1 | 0;
                            }
                            var$11[0].data[$i] = 2147483647;
                            var$11[$i].data[0] = 2147483647;
                            if ($recordEdgePath) {
                                var$17 = $edgePath.data;
                                var$17[0].data[$i] = 2147483647;
                                var$17[$i].data[0] = 2147483647;
                            }
                            $i = $i + 1 | 0;
                        }
                        $i = 1;
                        while ($i <= $n) {
                            $vi = ($g2.$getInternalVertexMap()).$get($i);
                            var$19 = (($vi.$getNeighbors()).$keySet()).$iterator();
                            while (var$19.$hasNext()) {
                                $v = var$19.$next();
                                $l = ($vi.$getNeighbors()).$get1($v);
                                $min = 2147483647;
                                $edge = null;
                                var$24 = $l.$iterator();
                                while (var$24.$hasNext()) {
                                    $link = var$24.$next();
                                    if ($link.$getCost() < $min) {
                                        $min = $link.$getCost();
                                        $edge = $link;
                                    }
                                }
                                var$8[$vi.$getId()].data[$v.$getId()] = $min;
                                var$11[$vi.$getId()].data[$v.$getId()] = $v.$getId();
                                if ($recordEdgePath)
                                    $edgePath.data[$vi.$getId()].data[$v.$getId()] = $edge.$getMatchId();
                            }
                            $i = $i + 1 | 0;
                        }
                        $k = 1;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $e = $$je;
                            break b;
                        } else {
                            throw $$e;
                        }
                    }
                    c: {
                        try {
                            d: while (true) {
                                if ($k > $n)
                                    break c;
                                $i = 1;
                                while ($i <= $n) {
                                    e: {
                                        if (var$8[$i].data[$k] < 2147483647) {
                                            $j = 1;
                                            while (true) {
                                                if ($j > $n)
                                                    break e;
                                                if (var$8[$k].data[$j] < 2147483647 && !(var$8[$i].data[$j] < 2147483647 && var$8[$i].data[$j] <= (var$8[$i].data[$k] + var$8[$k].data[$j] | 0))) {
                                                    var$11[$i].data[$j] = var$11[$i].data[$k];
                                                    if ($recordEdgePath) {
                                                        var$17 = $edgePath.data;
                                                        var$17[$i].data[$j] = var$17[$i].data[$k];
                                                    }
                                                    var$8[$i].data[$j] = var$8[$i].data[$k] + var$8[$k].data[$j] | 0;
                                                    if ($i == $j && var$8[$i].data[$j] < 0)
                                                        break d;
                                                }
                                                $j = $j + 1 | 0;
                                            }
                                        }
                                    }
                                    $i = $i + 1 | 0;
                                }
                                $k = $k + 1 | 0;
                            }
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $e = $$je;
                                break b;
                            } else {
                                throw $$e;
                            }
                        }
                        return;
                    }
                    try {
                        $i = 1;
                        while ($i <= $n) {
                            if (var$8[$i].data[$i] == 2147483647)
                                var$8[$i].data[$i] = 0;
                            $i = $i + 1 | 0;
                        }
                        break a;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                }
                $e.$printStackTrace0();
            }
            return;
        }
    }
    ogu_CommonAlgorithms_LOGGER.$error($rt_s(430));
    $rt_throw(jl_IllegalArgumentException__init_());
},
ogu_CommonAlgorithms_addShortestPath = ($g, $dist, $path, $edgePath, $p) => {
    let $curr, $end, $indexedEdges, var$9, var$10, var$11, $e, $$je;
    ogu_CommonAlgorithms_$callClinit();
    a: {
        try {
            $curr = ($p.$getFirst()).$intValue();
            $end = ($p.$getSecond()).$intValue();
            $indexedEdges = $g.$getInternalEdgeMap();
            while (true) {
                var$9 = $edgePath.data;
                var$10 = $path.data[$curr].data[$end];
                var$11 = var$9[$curr].data[$end];
                $g.$addEdge7(($indexedEdges.$get(var$11)).$getCopy(), var$11);
                if (var$10 == $end)
                    break;
                $curr = var$10;
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
ogu_CommonAlgorithms_shortestSuccessivePathsMinCostNetworkFlow = $g => {
    let $copy, $m, $retArray, $source, $sink, $hasDemand, var$8, $newm, var$10, $realIds, $artificialIds, $ans, $indexedArcs, $i, $n, var$17, $dist, $path, $sourceId, $sinkId, $e, $a, var$24, $dijkstraDist, $dijkstraPath, $dijkstraEdge, var$28, $augmentingPath, $maxFlow, $prevEdge, $temp, $index, var$34, var$35, var$36, $temp2, $gArcs, $realIndex, $v, var$41, $$je;
    ogu_CommonAlgorithms_$callClinit();
    $copy = $g.$getDeepCopy0();
    $m = ($copy.$getEdges0()).$size();
    $retArray = $rt_createIntArray($g.$getEidCounter());
    if (ogu_CommonAlgorithms_isEulerian($g))
        return $retArray;
    $source = ovi_DirectedVertex__init_($rt_s(431));
    $sink = ovi_DirectedVertex__init_($rt_s(432));
    $copy.$addVertex1($source);
    $copy.$addVertex1($sink);
    $hasDemand = 0;
    var$8 = ($copy.$getVertices0()).$iterator();
    a: while (true) {
        if (!var$8.$hasNext()) {
            $newm = ($copy.$getEdges0()).$size();
            var$10 = $newm + 1 | 0;
            $realIds = $rt_createIntArray(var$10);
            $artificialIds = $rt_createIntArray(var$10);
            $ans = $rt_createIntArray(var$10);
            if (!$hasDemand)
                return $ans;
            $indexedArcs = $copy.$getInternalEdgeMap();
            $i = 1;
            while ($i < var$10) {
                $realIds.data[($indexedArcs.$get($i)).$getMatchId()] = $i;
                $i = $i + 1 | 0;
            }
            $n = ($copy.$getVertices0()).$size();
            var$17 = $n + 1 | 0;
            $dist = $rt_createIntArray(var$17);
            $path = $rt_createIntArray(var$17);
            $sourceId = $source.$getId();
            $sinkId = $sink.$getId();
            b: {
                try {
                    ogu_CommonAlgorithms_slfShortestPaths0($copy, $sourceId, $dist, $path);
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Exception) {
                        $e = $$je;
                    } else {
                        throw $$e;
                    }
                }
                $e.$printStackTrace0();
                return null;
            }
            var$8 = ($copy.$getEdges0()).$iterator();
            while (var$8.$hasNext()) {
                $a = var$8.$next();
                if (($a.$getTail()).$getId() == $sourceId)
                    continue;
                var$24 = $dist.data;
                $a.$setCost(($a.$getCost() + var$24[($a.$getTail()).$getId()] | 0) - var$24[($a.$getHead()).$getId()] | 0);
            }
            if ($dist.data[$sinkId] == 2147483647) {
                ogu_CommonAlgorithms_LOGGER.$error($rt_s(433));
                $rt_throw(jl_IllegalArgumentException__init_());
            }
            $dijkstraDist = $rt_createIntArray(var$17);
            $dijkstraPath = $rt_createIntArray(var$17);
            $dijkstraEdge = $rt_createIntArray(var$17);
            ogu_CommonAlgorithms_dijkstrasAlgorithm($copy, $sourceId, $dijkstraDist, $dijkstraPath, $dijkstraEdge);
            c: {
                while (true) {
                    try {
                        var$28 = $dijkstraDist.data;
                        if (var$28[$sinkId] >= 2147483647)
                            break c;
                        $augmentingPath = ju_ArrayList__init_();
                        $maxFlow = 2147483647;
                        var$10 = $sinkId;
                        while (true) {
                            $prevEdge = $dijkstraEdge.data[var$10];
                            $augmentingPath.$add2(jl_Integer_valueOf($prevEdge));
                            $temp = $indexedArcs.$get($prevEdge);
                            if ($temp.$isCapacitySet() && $maxFlow > $temp.$getCapacity())
                                $maxFlow = $temp.$getCapacity();
                            var$10 = $dijkstraPath.data[var$10];
                            if (var$10 == $sourceId)
                                break;
                        }
                        var$8 = $augmentingPath.$iterator();
                        while (var$8.$hasNext()) {
                            var$24 = $artificialIds.data;
                            $index = var$8.$next();
                            var$34 = $indexedArcs.$get($index.$intValue());
                            if (var$24[var$34.$getMatchId()] == var$34.$getId()) {
                                var$35 = $ans.data;
                                var$36 = $realIds.data;
                                var$10 = var$34.$getMatchId();
                                var$35[var$10] = var$35[var$10] - $maxFlow | 0;
                                if (!var$36[var$34.$getMatchId()]) {
                                    $temp2 = oli_Arc__init_($rt_s(311), ogu_Pair__init_(var$34.$getHead(), var$34.$getTail()),  -var$34.$getCost() | 0);
                                    $temp2.$setCapacity($maxFlow);
                                    $copy.$addEdge7($temp2, var$34.$getMatchId());
                                    var$36[var$34.$getMatchId()] = $temp2.$getId();
                                } else {
                                    $temp2 = $indexedArcs.$get(var$36[var$34.$getMatchId()]);
                                    if ($temp2.$isCapacitySet())
                                        $temp2.$setCapacity($temp2.$getCapacity() + $maxFlow | 0);
                                }
                                var$34.$setCapacity(var$34.$getCapacity() - $maxFlow | 0);
                                if (!var$34.$getCapacity()) {
                                    var$24[var$34.$getMatchId()] = 0;
                                    $copy.$removeEdge(var$34);
                                }
                            } else {
                                var$36 = $realIds.data;
                                if (var$36[var$34.$getMatchId()] == var$34.$getId()) {
                                    var$35 = $ans.data;
                                    var$10 = var$34.$getMatchId();
                                    var$35[var$10] = var$35[var$10] + $maxFlow | 0;
                                    if (var$24[var$34.$getMatchId()]) {
                                        $temp2 = $indexedArcs.$get(var$24[var$34.$getMatchId()]);
                                        $temp2.$setCapacity($temp2.$getCapacity() + $maxFlow | 0);
                                    } else {
                                        $temp2 = oli_Arc__init_($rt_s(311), ogu_Pair__init_(var$34.$getHead(), var$34.$getTail()),  -var$34.$getCost() | 0);
                                        $temp2.$setCapacity($maxFlow);
                                        $copy.$addEdge7($temp2, var$34.$getMatchId());
                                        var$24[var$34.$getMatchId()] = $temp2.$getId();
                                    }
                                    if (var$34.$isCapacitySet()) {
                                        var$34.$setCapacity(var$34.$getCapacity() - $maxFlow | 0);
                                        if (!var$34.$getCapacity()) {
                                            var$36[var$34.$getMatchId()] = 0;
                                            $copy.$removeEdge(var$34);
                                        }
                                    }
                                }
                            }
                        }
                        var$8 = ($copy.$getEdges0()).$iterator();
                        while (var$8.$hasNext()) {
                            $a = var$8.$next();
                            $a.$setCost(($a.$getCost() + var$28[($a.$getTail()).$getId()] | 0) - var$28[($a.$getHead()).$getId()] | 0);
                        }
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($copy, $sourceId, $dijkstraDist, $dijkstraPath, $dijkstraEdge);
                        continue;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_Exception) {
                            $e = $$je;
                        } else {
                            throw $$e;
                        }
                    }
                }
                $e.$printStackTrace0();
                return null;
            }
            $gArcs = $g.$getInternalEdgeMap();
            $realIndex = 1;
            $i = 1;
            while ($i <= $m) {
                while (!$gArcs.$containsKey0($realIndex)) {
                    $realIndex = $realIndex + 1 | 0;
                }
                $retArray.data[$realIndex] = $ans.data[$i];
                $realIndex = $realIndex + 1 | 0;
                $i = $i + 1 | 0;
            }
            return $retArray;
        }
        $v = var$8.$next();
        d: {
            try {
                var$41 = $hasDemand;
                if ($v.$getDemand() > 0) {
                    var$41 = $hasDemand;
                    $temp = oli_Arc__init_($rt_s(434), ogu_Pair__init_($source, $v), 0);
                    $temp.$setCapacity($v.$getDemand());
                    $copy.$addEdge3($temp);
                    $temp.$setMatchId($temp.$getId());
                    $hasDemand = 1;
                    var$41 = $hasDemand;
                } else {
                    var$41 = $hasDemand;
                    if ($v.$getDemand() < 0) {
                        var$41 = $hasDemand;
                        $temp = oli_Arc__init_($rt_s(435), ogu_Pair__init_($v, $sink), 0);
                        $temp.$setCapacity( -$v.$getDemand() | 0);
                        $copy.$addEdge3($temp);
                        $temp.$setMatchId($temp.$getId());
                        $hasDemand = 1;
                        var$41 = $hasDemand;
                    }
                }
                break d;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof oe_NoDemandSetException) {
                } else if ($$je instanceof oe_InvalidEndpointsException) {
                    $e = $$je;
                    break a;
                } else {
                    throw $$e;
                }
            }
            $hasDemand = var$41;
        }
    }
    $e.$printStackTrace0();
    return null;
},
ogu_CommonAlgorithms_minCostMatching = $graph => {
    let $matching, $indexedVertices, $n, $m, $edges, $weights, var$8, var$9, var$10, $e, $ans, $matched, $i;
    ogu_CommonAlgorithms_$callClinit();
    $matching = ju_HashSet__init_();
    $indexedVertices = $graph.$getInternalVertexMap();
    $n = ($graph.$getVertices0()).$size();
    $m = ($graph.$getEdges0()).$size();
    $edges = $rt_createIntArray(2 * $m | 0);
    $weights = $rt_createIntArray($m);
    var$8 = ($graph.$getEdges0()).$iterator();
    while (var$8.$hasNext()) {
        var$9 = $weights.data;
        var$10 = $edges.data;
        $e = var$8.$next();
        var$10[(2 * $e.$getId() | 0) - 2 | 0] = (($e.$getEndpoints()).$getFirst()).$getId() - 1 | 0;
        var$10[(2 * $e.$getId() | 0) - 1 | 0] = (($e.$getEndpoints()).$getSecond()).$getId() - 1 | 0;
        var$9[$e.$getId() - 1 | 0] = $e.$getCost();
    }
    $ans = ogu_BlossomV_blossomV($n, $m, $edges, $weights);
    $matched = ju_ArrayList__init_();
    $i = 0;
    while (true) {
        var$10 = $ans.data;
        if ($i >= var$10.length)
            break;
        if (!$matched.$contains0(jl_Integer_valueOf($i))) {
            $matching.$add2(ogu_Pair__init_($indexedVertices.$get(var$10[$i] + 1 | 0), $indexedVertices.$get($i + 1 | 0)));
            $matched.$add2(jl_Integer_valueOf(var$10[$i]));
        }
        $i = $i + 1 | 0;
    }
    return $matching;
},
ogu_CommonAlgorithms__clinit_ = () => {
    ogu_CommonAlgorithms_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ogu_CommonAlgorithms));
},
jur_FSet$PossessiveFSet = $rt_classWithoutFields(jur_AbstractSet),
jur_FSet$PossessiveFSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_FSet$PossessiveFSet__init_0 = () => {
    let var_0 = new jur_FSet$PossessiveFSet();
    jur_FSet$PossessiveFSet__init_(var_0);
    return var_0;
},
jur_FSet$PossessiveFSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    return $stringIndex;
},
jur_FSet$PossessiveFSet_getName = $this => {
    return $rt_s(436);
},
jur_FSet$PossessiveFSet_hasConsumed = ($this, $mr) => {
    return 0;
},
jl_IllegalArgumentException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalArgumentException__init_1 = $this => {
    jl_RuntimeException__init_($this);
},
jl_IllegalArgumentException__init_ = () => {
    let var_0 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_1(var_0);
    return var_0;
},
jl_IllegalArgumentException__init_2 = ($this, $message) => {
    jl_RuntimeException__init_0($this, $message);
},
jl_IllegalArgumentException__init_0 = var_0 => {
    let var_1 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_2(var_1, var_0);
    return var_1;
},
jl_NumberFormatException = $rt_classWithoutFields(jl_IllegalArgumentException);
let jl_NumberFormatException__init_2 = $this => {
    jl_IllegalArgumentException__init_1($this);
},
jl_NumberFormatException__init_ = () => {
    let var_0 = new jl_NumberFormatException();
    jl_NumberFormatException__init_2(var_0);
    return var_0;
},
jl_NumberFormatException__init_0 = ($this, $message) => {
    jl_IllegalArgumentException__init_2($this, $message);
},
jl_NumberFormatException__init_1 = var_0 => {
    let var_1 = new jl_NumberFormatException();
    jl_NumberFormatException__init_0(var_1, var_0);
    return var_1;
},
oli_Edge = $rt_classWithoutFields(oc_Link),
oli_Edge__init_0 = ($this, $label, $endpoints, $cost) => {
    oc_Link__init_($this, $label, $endpoints, $cost);
    $this.$setDirected(0);
},
oli_Edge__init_ = (var_0, var_1, var_2) => {
    let var_3 = new oli_Edge();
    oli_Edge__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
oli_Edge_getCopy = $this => {
    return oli_Edge__init_($rt_s(437), $this.$getEndpoints(), $this.$getCost());
},
oli_Edge_isWindy = $this => {
    return 0;
},
jur_PosCompositeGroupQuantifierSet = $rt_classWithoutFields(jur_CompositeGroupQuantifierSet),
jur_PosCompositeGroupQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type, $setCounter) => {
    jur_CompositeGroupQuantifierSet__init_($this, $quant, $innerSet, $next, $type, $setCounter);
    jur_FSet_$callClinit();
    $innerSet.$setNext(jur_FSet_posFSet);
},
jur_PosCompositeGroupQuantifierSet__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new jur_PosCompositeGroupQuantifierSet();
    jur_PosCompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
jur_PosCompositeGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $counter, $max, $nextIndex;
    $counter = 0;
    $max = $this.$quantifier0.$max();
    a: {
        while (true) {
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
            if ($nextIndex <= $stringIndex)
                break a;
            if ($counter >= $max)
                break;
            $counter = $counter + 1 | 0;
            $stringIndex = $nextIndex;
        }
    }
    if ($nextIndex < 0 && $counter < $this.$quantifier0.$min())
        return (-1);
    return $this.$next2.$matches($stringIndex, $testString, $matchResult);
};
function oc_Route() {
    let a = this; jl_Object.call(a);
    a.$mCost = 0;
    a.$mServCost = 0;
    a.$mCustomIDMap = null;
    a.$mRoute = null;
    a.$traversalDirection = null;
    a.$compactRepresentation = null;
    a.$compactTD = null;
    a.$servicing = null;
    a.$directionDetermined = 0;
    a.$mGlobalId = 0;
}
let oc_Route_LOGGER = null,
oc_Route_routeIDCounter = 0,
oc_Route_$callClinit = () => {
    oc_Route_$callClinit = $rt_eraseClinit(oc_Route);
    oc_Route__clinit_();
},
oc_Route__init_ = $this => {
    let var$1;
    oc_Route_$callClinit();
    jl_Object__init_($this);
    $this.$mCost = 0;
    $this.$mServCost = 0;
    $this.$mCustomIDMap = gt_TIntIntHashMap__init_0();
    $this.$mRoute = ju_ArrayList__init_();
    $this.$traversalDirection = ju_ArrayList__init_();
    $this.$compactRepresentation = gt_TIntArrayList__init_();
    $this.$compactTD = ju_ArrayList__init_();
    $this.$servicing = ju_ArrayList__init_();
    var$1 = oc_Route_routeIDCounter;
    oc_Route_routeIDCounter = var$1 + 1 | 0;
    $this.$mGlobalId = var$1;
    $this.$directionDetermined = 0;
},
oc_Route_getCost = $this => {
    return $this.$mCost;
},
oc_Route_getPath = $this => {
    return $this.$mRoute;
},
oc_Route_appendEdge = ($this, $l) => {
    $this.$appendEdge($l, $l.$isRequired());
},
oc_Route_appendEdge0 = ($this, $l, $service) => {
    let $isWindy, $lreq, $lFirst, $lSecond, $temp, $tempReq, $tempFirst, $tempSecond, $trueCost, var$12, var$13, var$14, var$15, $limi, $i, $tempDir, var$19, $tempE, $tempCostMod, $tempTD;
    if ($service && !$l.$isRequired() && $l.$isWindy() && !$l.$isReverseRequired()) {
        oc_Route_$callClinit();
        oc_Route_LOGGER.$error($rt_s(438));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    a: {
        b: {
            $isWindy = $l.$isWindy();
            if (!$l.$isRequired()) {
                if (!$l.$isWindy())
                    break b;
                if (!$l.$isReverseRequired())
                    break b;
            }
            $lreq = 1;
            break a;
        }
        $lreq = 0;
    }
    $lFirst = (($l.$getEndpoints()).$getFirst()).$getId();
    $lSecond = (($l.$getEndpoints()).$getSecond()).$getId();
    if (!$this.$mRoute.$size()) {
        $this.$servicing.$add2(jl_Boolean_valueOf($service));
        $this.$mRoute.$add2($l);
        return;
    }
    c: {
        d: {
            $temp = $this.$mRoute.$get($this.$mRoute.$size() - 1 | 0);
            if (!$temp.$isRequired()) {
                if (!$temp.$isWindy())
                    break d;
                if (!$temp.$isReverseRequired())
                    break d;
            }
            $tempReq = 1;
            break c;
        }
        $tempReq = 0;
    }
    $tempFirst = (($temp.$getEndpoints()).$getFirst()).$getId();
    $tempSecond = (($temp.$getEndpoints()).$getSecond()).$getId();
    if ($this.$mRoute.$size() == 1 && !$this.$directionDetermined) {
        if (!($lFirst != $tempFirst && $lSecond != $tempFirst) && $isWindy) {
            $trueCost = $temp.$getReverseCost();
            $this.$traversalDirection.$add2(jl_Boolean_valueOf(0));
            if ($tempReq && ($this.$servicing.$get(0)).$booleanValue()) {
                $this.$mServCost = $this.$mServCost + $trueCost | 0;
                $this.$compactTD.$add2(jl_Boolean_valueOf(0));
                $this.$compactRepresentation.$add6($temp.$getId());
            }
        } else {
            $trueCost = $temp.$getCost();
            $this.$traversalDirection.$add2(jl_Boolean_valueOf(1));
            if ($tempReq && ($this.$servicing.$get(0)).$booleanValue()) {
                $this.$mServCost = $this.$mServCost + $trueCost | 0;
                $this.$compactTD.$add2(jl_Boolean_valueOf(1));
                $this.$compactRepresentation.$add6($temp.$getId());
            }
        }
        $this.$mCost = $this.$mCost + $trueCost | 0;
    }
    if (!$this.$directionDetermined) {
        var$12 = $rt_compare($lFirst, $tempFirst);
        if (!(!var$12 && $lSecond == $tempSecond)) {
            var$13 = $rt_compare($lSecond, $tempFirst);
            if (!(!var$13 && $lFirst == $tempSecond)) {
                e: {
                    if (!(($this.$traversalDirection.$get($this.$traversalDirection.$size() - 1 | 0)).$booleanValue() && $lSecond != $tempSecond && $lFirst != $tempSecond)) {
                        var$14 = $this.$traversalDirection;
                        var$15 = $this.$traversalDirection;
                        if ((var$14.$get(var$15.$size() - 1 | 0)).$booleanValue())
                            break e;
                        if (!var$13)
                            break e;
                        if (!var$12)
                            break e;
                    }
                    $limi = $this.$traversalDirection.$size();
                    $i = 0;
                    while ($i < $limi) {
                        $tempDir = ($this.$traversalDirection.$get($i)).$booleanValue();
                        var$14 = $this.$traversalDirection;
                        var$19 = $tempDir ? 0 : 1;
                        var$14.$set0($i, jl_Boolean_valueOf(var$19));
                        if ($isWindy) {
                            if (!$tempDir) {
                                $tempE = $this.$mRoute.$get($i);
                                $tempCostMod = $tempE.$getCost() - $tempE.$getReverseCost() | 0;
                                $this.$mCost = $this.$mCost + $tempCostMod | 0;
                                if ($tempE.$isRequired())
                                    $this.$mServCost = $this.$mServCost + $tempCostMod | 0;
                            } else {
                                $tempE = $this.$mRoute.$get($i);
                                $tempCostMod = $tempE.$getReverseCost() - $tempE.$getCost() | 0;
                                $this.$mCost = $this.$mCost + $tempCostMod | 0;
                                if ($tempE.$isRequired())
                                    $this.$mServCost = $this.$mServCost + $tempCostMod | 0;
                            }
                        }
                        $i = $i + 1 | 0;
                    }
                    var$12 = $this.$compactTD.$size();
                    $i = 0;
                    while (true) {
                        if ($i >= var$12)
                            break e;
                        $this.$compactTD.$set0($i, jl_Boolean_valueOf(($this.$compactTD.$get($i)).$booleanValue() ? 0 : 1));
                        $i = $i + 1 | 0;
                    }
                }
                $this.$directionDetermined = 1;
            }
        }
    }
    if (!$isWindy) {
        $trueCost = $l.$getCost();
        if ($lreq && $service)
            $this.$compactRepresentation.$add6($l.$getId());
    } else {
        var$19 = $rt_compare($lFirst, $tempFirst);
        if (!var$19 && $lSecond == $tempSecond) {
            $tempTD = ($this.$traversalDirection.$get($this.$traversalDirection.$size() - 1 | 0)).$booleanValue() ? 0 : 1;
            if ($tempTD) {
                $trueCost = $l.$getCost();
                $this.$traversalDirection.$add2(jl_Boolean_valueOf(1));
                if ($lreq && $service) {
                    $this.$compactTD.$add2(jl_Boolean_valueOf(1));
                    $this.$compactRepresentation.$add6($l.$getId());
                }
            } else {
                $trueCost = $l.$getReverseCost();
                $this.$traversalDirection.$add2(jl_Boolean_valueOf(0));
                if ($lreq && $service) {
                    $this.$compactTD.$add2(jl_Boolean_valueOf(0));
                    $this.$compactRepresentation.$add6($l.$getId());
                }
            }
        } else {
            var$12 = $rt_compare($lFirst, $tempSecond);
            if (!var$12 && $lSecond == $tempFirst) {
                $tempTD = ($this.$traversalDirection.$get($this.$traversalDirection.$size() - 1 | 0)).$booleanValue();
                if ($tempTD) {
                    $trueCost = $l.$getCost();
                    $this.$traversalDirection.$add2(jl_Boolean_valueOf(1));
                    if ($lreq && $service) {
                        $this.$compactTD.$add2(jl_Boolean_valueOf(1));
                        $this.$compactRepresentation.$add6($l.$getId());
                    }
                } else {
                    $trueCost = $l.$getReverseCost();
                    $this.$traversalDirection.$add2(jl_Boolean_valueOf(0));
                    if ($lreq && $service) {
                        $this.$compactTD.$add2(jl_Boolean_valueOf(0));
                        $this.$compactRepresentation.$add6($l.$getId());
                    }
                }
            } else if (var$19 && var$12) {
                if ($lSecond != $tempFirst && $lSecond != $tempSecond) {
                    oc_Route_$callClinit();
                    oc_Route_LOGGER.$error($rt_s(439));
                    $rt_throw(jl_IllegalArgumentException__init_());
                }
                $trueCost = $l.$getReverseCost();
                $this.$traversalDirection.$add2(jl_Boolean_valueOf(0));
                if ($lreq && $service) {
                    $this.$compactTD.$add2(jl_Boolean_valueOf(0));
                    $this.$compactRepresentation.$add6($l.$getId());
                }
            } else {
                $trueCost = $l.$getCost();
                $this.$traversalDirection.$add2(jl_Boolean_valueOf(1));
                if ($lreq && $service) {
                    $this.$compactTD.$add2(jl_Boolean_valueOf(1));
                    $this.$compactRepresentation.$add6($l.$getId());
                }
            }
        }
    }
    $this.$servicing.$add2(jl_Boolean_valueOf($service));
    $this.$mRoute.$add2($l);
    $this.$mCost = $this.$mCost + $trueCost | 0;
    if ($l.$isRequired() && $service)
        $this.$mServCost = $this.$mServCost + $trueCost | 0;
},
oc_Route_toString = $this => {
    let $ans, $list, $n, $firstToSecond, $useCustomMapping, $tempL, var$7, $tempV1, $tempV2, $prevIdReal, $prevIdReal_0, $prevAltId1, $prevAltId2, var$14, var$15, $beginningCycleLength, $i, $tempL2, $tempV12, $tempV22;
    $ans = $rt_s(33);
    $list = $this.$getPath();
    $n = $list.$size();
    $firstToSecond = 0;
    $useCustomMapping = 1;
    if ($this.$mCustomIDMap.$isEmpty())
        $useCustomMapping = 0;
    if (!$n)
        return $ans;
    if ($n == 1) {
        $tempL = $list.$get(0);
        if (!$useCustomMapping) {
            var$7 = ((((jl_StringBuilder__init_()).$append4($ans)).$append2((($tempL.$getEndpoints()).$getFirst()).$getId())).$append4($rt_s(18))).$toString();
            var$7 = (((jl_StringBuilder__init_()).$append4(var$7)).$append2((($tempL.$getEndpoints()).$getSecond()).$getId())).$toString();
        } else {
            var$7 = ((((jl_StringBuilder__init_()).$append4($ans)).$append2($this.$mCustomIDMap.$get2((($tempL.$getEndpoints()).$getFirst()).$getId()))).$append4($rt_s(18))).$toString();
            var$7 = (((jl_StringBuilder__init_()).$append4(var$7)).$append2($this.$mCustomIDMap.$get2((($tempL.$getEndpoints()).$getSecond()).$getId()))).$toString();
        }
        return var$7;
    }
    $tempL = $list.$get(0);
    $tempV1 = ($tempL.$getEndpoints()).$getFirst();
    $tempV2 = ($tempL.$getEndpoints()).$getSecond();
    $prevIdReal = $tempV1.$getId();
    $prevIdReal_0 = $tempV2.$getId();
    if (!$useCustomMapping) {
        $prevAltId1 = $tempV1.$getId();
        $prevAltId2 = $tempV2.$getId();
    } else {
        $prevAltId1 = $this.$mCustomIDMap.$get2($tempV1.$getId());
        $prevAltId2 = $this.$mCustomIDMap.$get2($tempV2.$getId());
    }
    a: {
        var$7 = $list.$get(1);
        var$14 = (var$7.$getEndpoints()).$getFirst();
        var$15 = (var$7.$getEndpoints()).$getSecond();
        if (!(var$14.$getId() == $prevIdReal && var$15.$getId() == $prevIdReal_0)) {
            if (var$14.$getId() != $prevIdReal_0)
                break a;
            if (var$15.$getId() != $prevIdReal)
                break a;
        }
        $beginningCycleLength = 2;
        $i = 2;
        b: {
            while ($i < $n) {
                $tempL2 = $list.$get($i);
                $tempV12 = ($tempL2.$getEndpoints()).$getFirst();
                $tempV22 = ($tempL2.$getEndpoints()).$getSecond();
                if (!($tempV12.$getId() == $prevIdReal && $tempV22.$getId() == $prevIdReal_0)) {
                    if ($tempV12.$getId() != $prevIdReal_0)
                        break b;
                    if ($tempV22.$getId() != $prevIdReal)
                        break b;
                }
                $beginningCycleLength = $beginningCycleLength + 1 | 0;
                $i = $i + 1 | 0;
            }
            break a;
        }
        if ($tempV12.$getId() != $prevIdReal && $tempV22.$getId() != $prevIdReal) {
            if ($tempV12.$getId() != $prevIdReal_0 && $tempV22.$getId() != $prevIdReal_0)
                return $rt_s(440);
            $firstToSecond = !($beginningCycleLength % 2 | 0) ? 0 : 1;
        } else
            $firstToSecond = $beginningCycleLength % 2 | 0 ? 0 : 1;
    }
    if (var$14.$getId() == $prevIdReal) {
        if (var$15.$getId() != $prevIdReal_0) {
            var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId2)).$append4($rt_s(18))).$append2($prevAltId1)).$append4($rt_s(18))).$toString();
            $prevIdReal_0 = var$15.$getId();
        } else if (!$firstToSecond)
            var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId2)).$append4($rt_s(18))).$append2($prevAltId1)).$append4($rt_s(18))).$toString();
        else {
            var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId1)).$append4($rt_s(18))).$append2($prevAltId2)).$append4($rt_s(18))).$toString();
            $prevIdReal_0 = $prevIdReal;
        }
    } else if (var$15.$getId() != $prevIdReal) {
        if (var$14.$getId() == $prevIdReal_0) {
            var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId1)).$append4($rt_s(18))).$append2($prevAltId2)).$append4($rt_s(18))).$toString();
            $prevIdReal_0 = var$15.$getId();
        } else {
            if (var$15.$getId() != $prevIdReal_0)
                return $rt_s(440);
            var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId1)).$append4($rt_s(18))).$append2($prevAltId2)).$append4($rt_s(18))).$toString();
            $prevIdReal_0 = var$14.$getId();
        }
    } else if (var$14.$getId() != $prevIdReal_0) {
        var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId2)).$append4($rt_s(18))).$append2($prevAltId1)).$append4($rt_s(18))).$toString();
        $prevIdReal_0 = var$14.$getId();
    } else if (!$firstToSecond)
        var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId2)).$append4($rt_s(18))).$append2($prevAltId1)).$append4($rt_s(18))).$toString();
    else {
        var$7 = ((((((jl_StringBuilder__init_()).$append4($ans)).$append2($prevAltId1)).$append4($rt_s(18))).$append2($prevAltId2)).$append4($rt_s(18))).$toString();
        $prevIdReal_0 = $prevIdReal;
    }
    $i = 2;
    while (true) {
        if ($i >= $n) {
            if ($n >= 2)
                var$7 = !$useCustomMapping ? (((jl_StringBuilder__init_()).$append4(var$7)).$append2($prevIdReal_0)).$toString() : (((jl_StringBuilder__init_()).$append4(var$7)).$append2($this.$mCustomIDMap.$get2($prevIdReal_0))).$toString();
            return var$7;
        }
        var$15 = $list.$get($i);
        var$14 = (var$15.$getEndpoints()).$getFirst();
        var$15 = (var$15.$getEndpoints()).$getSecond();
        if (var$14.$getId() == $prevIdReal_0) {
            var$7 = !$useCustomMapping ? ((((jl_StringBuilder__init_()).$append4(var$7)).$append2(var$14.$getId())).$append4($rt_s(18))).$toString() : ((((jl_StringBuilder__init_()).$append4(var$7)).$append2($this.$mCustomIDMap.$get2(var$14.$getId()))).$append4($rt_s(18))).$toString();
            $prevIdReal_0 = var$15.$getId();
        } else {
            if (var$15.$getId() != $prevIdReal_0)
                break;
            var$7 = !$useCustomMapping ? ((((jl_StringBuilder__init_()).$append4(var$7)).$append2(var$15.$getId())).$append4($rt_s(18))).$toString() : ((((jl_StringBuilder__init_()).$append4(var$7)).$append2($this.$mCustomIDMap.$get2(var$15.$getId()))).$append4($rt_s(18))).$toString();
            $prevIdReal_0 = var$14.$getId();
        }
        $i = $i + 1 | 0;
    }
    return $rt_s(440);
},
oc_Route__clinit_ = () => {
    oc_Route_LOGGER = ou_SimpleLogger_getLogger($rt_cls(oc_Route));
    oc_Route_routeIDCounter = 1;
};
function jur_MultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter = 0;
}
let jur_MultiLineEOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter = $counter;
},
jur_MultiLineEOLSet__init_0 = var_0 => {
    let var_1 = new jur_MultiLineEOLSet();
    jur_MultiLineEOLSet__init_(var_1, var_0);
    return var_1;
},
jur_MultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $strDif, $ch1, $ch2;
    $strDif = !$matchResult.$hasAnchoringBounds() ? $testString.$length() - $strIndex | 0 : $matchResult.$getRightBound() - $strIndex | 0;
    if (!$strDif) {
        $matchResult.$setConsumed($this.$consCounter, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    if ($strDif < 2) {
        $ch1 = $testString.$charAt($strIndex);
        $ch2 = 97;
    } else {
        $ch1 = $testString.$charAt($strIndex);
        $ch2 = $testString.$charAt($strIndex + 1 | 0);
    }
    switch ($ch1) {
        case 10:
        case 133:
        case 8232:
        case 8233:
            $matchResult.$setConsumed($this.$consCounter, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        case 13:
            if ($ch2 != 10) {
                $matchResult.$setConsumed($this.$consCounter, 0);
                return $this.$next2.$matches($strIndex, $testString, $matchResult);
            }
            $matchResult.$setConsumed($this.$consCounter, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        default:
    }
    return (-1);
},
jur_MultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !$matchResult.$getConsumed($this.$consCounter) ? 0 : 1;
    $matchResult.$setConsumed($this.$consCounter, (-1));
    return $res;
},
jur_MultiLineEOLSet_getName = $this => {
    return $rt_s(441);
},
jur_IntArrHash = $rt_classWithoutFields(),
jur_AbstractCharClass$LazyJavaMirrored = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaMirrored__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaMirrored__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
    jur_AbstractCharClass$LazyJavaMirrored__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaMirrored_computeValue = $this => {
    return jur_AbstractCharClass$LazyJavaMirrored$1__init_0($this);
};
function jur_AbstractCharClass$LazyJavaDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$016 = null;
}
let jur_AbstractCharClass$LazyJavaDigit$1__init_ = ($this, $this$0) => {
    $this.$this$016 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaDigit$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaDigit$1();
    jur_AbstractCharClass$LazyJavaDigit$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaDigit$1_contains = ($this, $ch) => {
    return jl_Character_isDigit($ch);
},
jur_AbstractCharClass$LazyJavaISOControl = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaISOControl__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaISOControl__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
    jur_AbstractCharClass$LazyJavaISOControl__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaISOControl_computeValue = $this => {
    return jur_AbstractCharClass$LazyJavaISOControl$1__init_0($this);
},
jl_IllegalStateException = $rt_classWithoutFields(jl_RuntimeException),
jl_IllegalStateException__init_0 = $this => {
    jl_RuntimeException__init_($this);
},
jl_IllegalStateException__init_ = () => {
    let var_0 = new jl_IllegalStateException();
    jl_IllegalStateException__init_0(var_0);
    return var_0;
},
oc_Link$Zone = $rt_classWithoutFields(jl_Enum),
oc_Link$Zone_RESIDENTIAL = null,
oc_Link$Zone_COMMERCIAL = null,
oc_Link$Zone_MIXED = null,
oc_Link$Zone_CIVIC = null,
oc_Link$Zone_OTHER = null,
oc_Link$Zone_NOT_SET = null,
oc_Link$Zone_$VALUES = null,
oc_Link$Zone_$callClinit = () => {
    oc_Link$Zone_$callClinit = $rt_eraseClinit(oc_Link$Zone);
    oc_Link$Zone__clinit_();
},
oc_Link$Zone__init_0 = ($this, var$1, var$2) => {
    oc_Link$Zone_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
oc_Link$Zone__init_ = (var_0, var_1) => {
    let var_2 = new oc_Link$Zone();
    oc_Link$Zone__init_0(var_2, var_0, var_1);
    return var_2;
},
oc_Link$Zone_$values = () => {
    let var$1, var$2;
    oc_Link$Zone_$callClinit();
    var$1 = $rt_createArray(oc_Link$Zone, 6);
    var$2 = var$1.data;
    var$2[0] = oc_Link$Zone_RESIDENTIAL;
    var$2[1] = oc_Link$Zone_COMMERCIAL;
    var$2[2] = oc_Link$Zone_MIXED;
    var$2[3] = oc_Link$Zone_CIVIC;
    var$2[4] = oc_Link$Zone_OTHER;
    var$2[5] = oc_Link$Zone_NOT_SET;
    return var$1;
},
oc_Link$Zone__clinit_ = () => {
    oc_Link$Zone_RESIDENTIAL = oc_Link$Zone__init_($rt_s(442), 0);
    oc_Link$Zone_COMMERCIAL = oc_Link$Zone__init_($rt_s(443), 1);
    oc_Link$Zone_MIXED = oc_Link$Zone__init_($rt_s(265), 2);
    oc_Link$Zone_CIVIC = oc_Link$Zone__init_($rt_s(444), 3);
    oc_Link$Zone_OTHER = oc_Link$Zone__init_($rt_s(445), 4);
    oc_Link$Zone_NOT_SET = oc_Link$Zone__init_($rt_s(446), 5);
    oc_Link$Zone_$VALUES = oc_Link$Zone_$values();
};
function jur_HighSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$high = 0;
}
let jur_HighSurrogateCharSet__init_ = ($this, $high) => {
    jur_JointSet__init_($this);
    $this.$high = $high;
},
jur_HighSurrogateCharSet__init_0 = var_0 => {
    let var_1 = new jur_HighSurrogateCharSet();
    jur_HighSurrogateCharSet__init_(var_1, var_0);
    return var_1;
},
jur_HighSurrogateCharSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
},
jur_HighSurrogateCharSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $strLength, var$5, var$6, $high, $low;
    $strLength = $matchResult.$getRightBound();
    var$5 = $stringIndex + 1 | 0;
    var$6 = $rt_compare(var$5, $strLength);
    if (var$6 > 0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = $testString.$charAt($stringIndex);
    if (var$6 < 0) {
        $low = $testString.$charAt(var$5);
        if (jl_Character_isLowSurrogate($low))
            return (-1);
    }
    if ($this.$high != $high)
        return (-1);
    return $this.$next2.$matches(var$5, $testString, $matchResult);
},
jur_HighSurrogateCharSet_find = ($this, $strIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$getRightBound();
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = $testStr.$indexOf4($this.$high, $strIndex);
        if (var$6 < 0)
            return (-1);
        $strIndex = var$6 + 1 | 0;
        if ($strIndex < $strLength && jl_Character_isLowSurrogate($testStr.$charAt($strIndex))) {
            $strIndex = var$6 + 2 | 0;
            continue;
        }
        if ($this.$next2.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
},
jur_HighSurrogateCharSet_findBack = ($this, $strIndex, $lastIndex, $testString, $matchResult) => {
    let $testStr, $strLength, var$7, var$8;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$getRightBound();
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$7 = $testStr.$lastIndexOf2($this.$high, $lastIndex);
            if (var$7 < 0)
                break a;
            if (var$7 < $strIndex)
                break a;
            var$8 = var$7 + 1 | 0;
            if (var$8 < $strLength && jl_Character_isLowSurrogate($testStr.$charAt(var$8))) {
                $lastIndex = var$7 + (-1) | 0;
                continue;
            }
            if ($this.$next2.$matches(var$8, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$7 + (-1) | 0;
        }
        return var$7;
    }
    return (-1);
},
jur_HighSurrogateCharSet_getName = $this => {
    let var$1, var$2;
    var$1 = $this.$high;
    var$2 = jl_StringBuilder__init_();
    jl_StringBuilder_append0(var$2, var$1);
    return jl_StringBuilder_toString(var$2);
},
jur_HighSurrogateCharSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_LowSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_HighSurrogateCharSet))
        return 1;
    return $set.$high != $this.$high ? 0 : 1;
},
jur_HighSurrogateCharSet_hasConsumed = ($this, $matchResult) => {
    return 1;
},
osi_MCPPSolver_Yaoyuenyong = $rt_classWithoutFields(oc_SingleVehicleSolver),
osi_MCPPSolver_Yaoyuenyong__init_ = ($this, $instance) => {
    oc_SingleVehicleSolver__init_($this, $instance);
},
osi_MCPPSolver_Yaoyuenyong__init_0 = var_0 => {
    let var_1 = new osi_MCPPSolver_Yaoyuenyong();
    osi_MCPPSolver_Yaoyuenyong__init_(var_1, var_0);
    return var_1;
},
osi_MCPPSolver_Yaoyuenyong_eliminateAddedDirectedCycles = ($n, $edgeContainers) => {
    let $mSize, $add, $i, var$6, $addVertices, $temp, $e, $cycleDetected, $addArcs, $dist, $path, $edgePath, var$15, $curr, var$17, $curr_0, $nextEdge, $u, $ex, $$je;
    a: {
        try {
            $mSize = $edgeContainers.$size() - 1 | 0;
            $add = ogi_DirectedGraph__init_();
            $i = 1;
            while (true) {
                var$6 = $n + 1 | 0;
                if ($i >= var$6)
                    break;
                $add.$addVertex0(ovi_DirectedVertex__init_($rt_s(33)), $i);
                $i = $i + 1 | 0;
            }
            $addVertices = $add.$getInternalVertexMap();
            $i = 1;
            while ($i < ($mSize + 1 | 0)) {
                $temp = $edgeContainers.$get($i);
                if ($temp.$getNumCopies() && $temp.$getNumCopies() != (-1)) {
                    $e = $temp.$getFirst0();
                    if (!$temp.$isDirectedForward())
                        $add.$addEdge7(oli_Arc__init_($rt_s(447), ogu_Pair__init_($addVertices.$get((($e.$getEndpoints()).$getSecond()).$getId()), $addVertices.$get((($e.$getEndpoints()).$getFirst()).$getId())), $e.$getCost()), $e.$getId());
                    else
                        $add.$addEdge7(oli_Arc__init_($rt_s(447), ogu_Pair__init_($addVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $addVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost()), $e.$getId());
                }
                $i = $i + 1 | 0;
            }
            $cycleDetected = 1;
            $addArcs = $add.$getInternalEdgeMap();
            while ($cycleDetected) {
                $cycleDetected = 0;
                $dist = $rt_createIntMultiArray([var$6, var$6]);
                $path = $rt_createIntMultiArray([var$6, var$6]);
                $edgePath = $rt_createIntMultiArray([var$6, var$6]);
                ogu_CommonAlgorithms_fwLeastCostPaths($add, $dist, $path, $edgePath);
                $i = 1;
                b: {
                    while ($i < var$6) {
                        var$15 = $dist.data;
                        if (var$15[$i].data[$i] < 2147483647 && var$15[$i].data[$i] > 0) {
                            $cycleDetected = 1;
                            $curr = $i;
                            while (true) {
                                var$17 = $edgePath.data;
                                $curr_0 = $path.data[$curr].data[$i];
                                $nextEdge = var$17[$curr].data[$i];
                                $u = $addArcs.$get($nextEdge);
                                ($edgeContainers.$get($u.$getMatchId())).$tryRemoveCopy();
                                $add.$removeEdge($u);
                                if ($curr_0 == $i)
                                    break;
                                $curr = $curr_0;
                            }
                            break b;
                        }
                        $i = $i + 1 | 0;
                    }
                }
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $ex = $$je;
            } else {
                throw $$e;
            }
        }
        $ex.$printStackTrace0();
    }
},
osi_MCPPSolver_Yaoyuenyong_addShortestPathAndUpdate = ($start, $end, $path, $edgePath, $gijEdges, $edgeContainers) => {
    let var$7, $next, $toEdit, $forward, var$11, $ex, $$je;
    a: {
        try {
            while (true) {
                var$7 = $edgePath.data;
                $next = $path.data[$end];
                $toEdit = $edgeContainers.$get(($gijEdges.$get(var$7[$end])).$getMatchId());
                $forward = $next != ((($toEdit.$getFirst0()).$getEndpoints()).$getFirst()).$getId() ? 0 : 1;
                var$11 = $toEdit.$getType3();
                oc_MultiEdge$EDGETYPE_$callClinit();
                if (var$11 === oc_MultiEdge$EDGETYPE_A) {
                    if (!$forward)
                        $toEdit.$directBackward();
                    else
                        $toEdit.$directForward();
                } else if ($toEdit.$getType3() === oc_MultiEdge$EDGETYPE_B) {
                    if ($forward != $toEdit.$isDirectedForward())
                        $toEdit.$addReverseCopy();
                    else
                        $toEdit.$addCopy();
                } else if ($toEdit.$getType3() === oc_MultiEdge$EDGETYPE_C) {
                    if ($forward != $toEdit.$isDirectedForward())
                        $toEdit.$tryRemoveCopy();
                    else
                        $toEdit.$addCopy();
                } else if ($toEdit.$getType3() === oc_MultiEdge$EDGETYPE_D) {
                    if (!$forward)
                        $toEdit.$directBackward();
                    else
                        $toEdit.$directForward();
                } else if ($toEdit.$getType3() === oc_MultiEdge$EDGETYPE_E)
                    $toEdit.$addCopy();
                else if ($toEdit.$getType3() === oc_MultiEdge$EDGETYPE_F) {
                    if (!$forward)
                        $toEdit.$tryRemoveCopy();
                    else
                        $toEdit.$addCopy();
                }
                if ($next == $start)
                    break;
                $end = $next;
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $ex = $$je;
            } else {
                throw $$e;
            }
        }
        $ex.$printStackTrace0();
    }
},
osi_MCPPSolver_Yaoyuenyong_CostMod1 = ($Gij, $edgeContainers, $Em, $Am) => {
    let $K, $gijEdges, var$7, var$8, $a, $temp, $e, $$je;
    a: {
        try {
            $K = (-5);
            $gijEdges = $Gij.$getInternalEdgeMap();
            var$7 = $Em.$iterator();
            while (true) {
                if (!var$7.$hasNext()) {
                    var$8 = $Am.$iterator();
                    while (var$8.$hasNext()) {
                        $a = var$8.$next();
                        if (!$a.$isDirected())
                            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(448)));
                        $temp = $gijEdges.$get($a.$getMatchId());
                        var$7 = ($edgeContainers.$get($a.$getMatchId())).$getType3();
                        oc_MultiEdge$EDGETYPE_$callClinit();
                        if (var$7 === oc_MultiEdge$EDGETYPE_E)
                            $temp.$setCost(0);
                        else {
                            if (($edgeContainers.$get($a.$getMatchId())).$getType3() !== oc_MultiEdge$EDGETYPE_F)
                                $rt_throw(jl_IllegalArgumentException__init_0($rt_s(449)));
                            $temp.$setCost($K);
                        }
                    }
                    break a;
                }
                $e = var$7.$next();
                if ($e.$isDirected())
                    break;
                $temp = $gijEdges.$get($e.$getMatchId());
                $temp.$setCost($K);
            }
            $rt_throw(jl_IllegalArgumentException__init_0($rt_s(450)));
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Yaoyuenyong_CostMod2 = ($Gij, $G, $edgeContainers, $i, $j) => {
    let $gEdges, $gijEdges, $m, $k, $temp, $tempType, $e, $cost, $e2, $from, $to, $gijVertices, $toRemove, var$19, $elim, $$je;
    a: {
        try {
            $gEdges = $G.$getInternalEdgeMap();
            $gijEdges = $Gij.$getInternalEdgeMap();
            $m = $edgeContainers.$size() - 1 | 0;
            $k = 1;
            while ($k < ($m + 1 | 0)) {
                $temp = $edgeContainers.$get($k);
                $tempType = $temp.$getType3();
                oc_MultiEdge$EDGETYPE_$callClinit();
                if (!($tempType !== oc_MultiEdge$EDGETYPE_A && $tempType !== oc_MultiEdge$EDGETYPE_D)) {
                    $e = $gEdges.$get($k);
                    $cost = $e.$getCost();
                    ($gijEdges.$get($k)).$setCost( -$cost | 0);
                } else if (!($tempType !== oc_MultiEdge$EDGETYPE_C && $tempType !== oc_MultiEdge$EDGETYPE_F)) {
                    $e = $gEdges.$get($k);
                    $e2 = $gijEdges.$get($k);
                    $cost = $e.$getCost();
                    if (!$temp.$isDirectedForward()) {
                        $from = ($e2.$getEndpoints()).$getFirst();
                        $to = ($e2.$getEndpoints()).$getSecond();
                    } else {
                        $from = ($e2.$getEndpoints()).$getSecond();
                        $to = ($e2.$getEndpoints()).$getFirst();
                    }
                    $Gij.$addEdge7(oli_MixedEdge__init_($rt_s(33), ogu_Pair__init_($from, $to),  -$cost | 0, 1), $e.$getId());
                }
                $k = $k + 1 | 0;
            }
            $gijVertices = $Gij.$getInternalVertexMap();
            $toRemove = $Gij.$findEdges(ogu_Pair__init_($gijVertices.$get($i), $gijVertices.$get($j)));
            var$19 = $toRemove.$iterator();
            while (var$19.$hasNext()) {
                $elim = var$19.$next();
                $Gij.$removeEdge0($elim);
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Yaoyuenyong_inOutDegree = ($input, $U, $M, $inMdubPrime, $edgeContainers) => {
    let $setup, $i, $inputEdges, $inputVertices, $setupVertices, $setupEdges, $m, var$13, $e, $a, var$16, var$17, $v, $flowanswer, $undirTraversals, $setupM, $eContainer, var$23, $j, $temp, $$je;
    a: {
        try {
            $setup = ogi_DirectedGraph__init_();
            $i = 1;
            while ($i < (($input.$getVertices0()).$size() + 1 | 0)) {
                $setup.$addVertex0(ovi_DirectedVertex__init_($rt_s(317)), $i);
                $i = $i + 1 | 0;
            }
            $inputEdges = $input.$getInternalEdgeMap();
            $inputVertices = $input.$getInternalVertexMap();
            $setupVertices = $setup.$getInternalVertexMap();
            $setupEdges = $setup.$getInternalEdgeMap();
            $m = ($input.$getEdges0()).$size();
            $i = 1;
            while (true) {
                var$13 = $m + 1 | 0;
                if ($i >= var$13)
                    break;
                $e = $inputEdges.$get($i);
                if ($e.$isDirected())
                    $setup.$addEdge7(oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get(($e.$getTail0()).$getId()), $setupVertices.$get(($e.$getHead0()).$getId())), $e.$getCost()), $e.$getId());
                else {
                    $setup.$addEdge7(oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost()), $e.$getId());
                    $setup.$addEdge7(oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId())), $e.$getCost()), $e.$getId());
                    if ($e.$getCost()) {
                        $a = oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), 0);
                        $a.$setCapacity(1);
                        $setup.$addEdge7($a, $e.$getId());
                        var$16 = oli_Arc__init_($rt_s(317), ogu_Pair__init_($setupVertices.$get((($e.$getEndpoints()).$getSecond()).$getId()), $setupVertices.$get((($e.$getEndpoints()).$getFirst()).$getId())), 0);
                        var$16.$setCapacity(1);
                        $setup.$addEdge7(var$16, $e.$getId());
                    }
                }
                $i = $i + 1 | 0;
            }
            var$17 = ($setup.$getVertices0()).$iterator();
            while (var$17.$hasNext()) {
                $v = var$17.$next();
                if ($v.$getDelta())
                    $v.$setDemand($v.$getDelta());
            }
            $flowanswer = ogu_CommonAlgorithms_shortestSuccessivePathsMinCostNetworkFlow($setup);
            $undirTraversals = $rt_createIntArray(var$13);
            $setupM = ($setup.$getEdges0()).$size();
            $i = 1;
            while ($i < ($setupM + 1 | 0)) {
                $e = $inputEdges.$get(($setupEdges.$get($i)).$getMatchId());
                $eContainer = $edgeContainers.$get($e.$getId());
                $a = $setupEdges.$get($i);
                if ($e.$isDirected()) {
                    var$23 = $undirTraversals.data;
                    $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_($e.$getTail0(), $e.$getHead0()), $e.$getCost(), 1));
                    $inMdubPrime.$add2(jl_Boolean_valueOf(0));
                    var$23[$e.$getId()] = 2;
                    $j = 0;
                    while ($j < $flowanswer.data[$i]) {
                        $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_($e.$getTail0(), $e.$getHead0()), $e.$getCost(), 1));
                        $inMdubPrime.$add2(jl_Boolean_valueOf(1));
                        $eContainer.$addCopy();
                        $j = $j + 1 | 0;
                    }
                } else if (!$a.$isCapacitySet()) {
                    var$23 = $flowanswer.data;
                    if (var$23[$i] > 0) {
                        if (!$e.$getCost() && !(!($edgeContainers.$get($e.$getId())).$isDirectedBackward() && !($edgeContainers.$get($e.$getId())).$isDirectedForward()))
                            $U.$add2(oli_MixedEdge__init_($rt_s(451), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), 0, 0));
                        else if (($a.$getTail()).$getId() != (($e.$getEndpoints()).$getFirst()).$getId())
                            ($edgeContainers.$get($e.$getId())).$directBackward();
                        else
                            ($edgeContainers.$get($e.$getId())).$directForward();
                    }
                    $j = 0;
                    while ($j < var$23[$i]) {
                        $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_($inputVertices.$get(($a.$getTail()).$getId()), $inputVertices.$get(($a.$getHead()).$getId())), $e.$getCost(), 1));
                        $inMdubPrime.$add2(jl_Boolean_valueOf(1));
                        $eContainer.$addCopy();
                        $j = $j + 1 | 0;
                    }
                } else if ($flowanswer.data[$i]) {
                    $temp = $inputVertices.$get(($a.$getTail()).$getId());
                    if (!$temp.$equals(($e.$getEndpoints()).$getFirst())) {
                        var$23 = $undirTraversals.data;
                        if (!var$23[$e.$getId()])
                            var$23[$e.$getId()] = (-1);
                        else {
                            $U.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 0));
                            var$23[$e.$getId()] = 2;
                        }
                    } else {
                        var$23 = $undirTraversals.data;
                        if (!var$23[$e.$getId()])
                            var$23[$e.$getId()] = 1;
                        else {
                            $U.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 0));
                            var$23[$e.$getId()] = 2;
                        }
                    }
                }
                $i = $i + 1 | 0;
            }
            $i = 1;
            while (true) {
                var$23 = $undirTraversals.data;
                if ($i >= var$23.length)
                    break;
                $e = $inputEdges.$get($i);
                $eContainer = $edgeContainers.$get($e.$getId());
                if (!var$23[$i])
                    $U.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 0));
                else if (var$23[$i] == 1) {
                    $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), 1));
                    $inMdubPrime.$add2(jl_Boolean_valueOf(0));
                    if (!$eContainer.$isDirectedForward())
                        $eContainer.$directForward();
                } else if (var$23[$i] == (-1)) {
                    $M.$add2(oli_MixedEdge__init_($rt_s(328), ogu_Pair__init_(($e.$getEndpoints()).$getSecond(), ($e.$getEndpoints()).$getFirst()), $e.$getCost(), 1));
                    $inMdubPrime.$add2(jl_Boolean_valueOf(0));
                    if (!$eContainer.$isDirectedBackward())
                        $eContainer.$directBackward();
                }
                $i = $i + 1 | 0;
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Yaoyuenyong_evenDegree = ($input, $Em, $Am) => {
    let $setup, $i, $indexedVertices, var$7, $e, $n, var$10, $dist, $path, $edgePath, $matchingGraph, var$15, $v, $oddVertices, var$18, $v2, var$20, $matchingSolution, $setupEdges, $p, $curr, $end, var$26, var$27, $temp, $$je;
    a: {
        try {
            $setup = ogi_UndirectedGraph__init_();
            $i = 1;
            while ($i < (($input.$getVertices0()).$size() + 1 | 0)) {
                $setup.$addVertex0(ovi_UndirectedVertex__init_($rt_s(326)), $i);
                $i = $i + 1 | 0;
            }
            $indexedVertices = $setup.$getInternalVertexMap();
            var$7 = ($input.$getEdges0()).$iterator();
            while (var$7.$hasNext()) {
                $e = var$7.$next();
                $setup.$addEdge7(oli_Edge__init_($rt_s(326), ogu_Pair__init_($indexedVertices.$get((($e.$getEndpoints()).$getFirst()).$getId()), $indexedVertices.$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost()), $e.$getId());
            }
            $n = ($setup.$getVertices0()).$size();
            var$10 = $n + 1 | 0;
            $dist = $rt_createIntMultiArray([var$10, var$10]);
            $path = $rt_createIntMultiArray([var$10, var$10]);
            $edgePath = $rt_createIntMultiArray([var$10, var$10]);
            ogu_CommonAlgorithms_fwLeastCostPaths($setup, $dist, $path, $edgePath);
            $matchingGraph = ogi_UndirectedGraph__init_();
            var$15 = ($setup.$getVertices0()).$iterator();
            while (var$15.$hasNext()) {
                $v = var$15.$next();
                if (($v.$getDegree() % 2 | 0) == 1)
                    $matchingGraph.$addVertex0(ovi_UndirectedVertex__init_($rt_s(245)), $v.$getId());
            }
            $oddVertices = $matchingGraph.$getVertices0();
            var$18 = $oddVertices.$iterator();
            while (var$18.$hasNext()) {
                $v = var$18.$next();
                var$7 = $oddVertices.$iterator();
                while (var$7.$hasNext()) {
                    $v2 = var$7.$next();
                    if ($v.$getId() <= $v2.$getId())
                        continue;
                    var$20 = $dist.data;
                    $matchingGraph.$addEdge0(oli_Edge__init_($rt_s(246), ogu_Pair__init_($v, $v2), var$20[$v.$getMatchId()].data[$v2.$getMatchId()]));
                }
            }
            $matchingSolution = ogu_CommonAlgorithms_minCostMatching($matchingGraph);
            $setupEdges = $setup.$getInternalEdgeMap();
            var$7 = $matchingSolution.$iterator();
            while (var$7.$hasNext()) {
                $p = var$7.$next();
                $curr = ($p.$getFirst()).$getMatchId();
                $end = ($p.$getSecond()).$getMatchId();
                while (true) {
                    var$26 = $edgePath.data;
                    var$10 = $path.data[$curr].data[$end];
                    var$27 = var$26[$curr].data[$end];
                    $e = ($input.$getInternalEdgeMap()).$get(($setupEdges.$get(var$27)).$getMatchId());
                    $temp = oli_MixedEdge__init_($rt_s(327), ogu_Pair__init_(($e.$getEndpoints()).$getFirst(), ($e.$getEndpoints()).$getSecond()), $e.$getCost(), $e.$isDirected());
                    $input.$addEdge7($temp, $e.$getId());
                    if (!$temp.$isDirected())
                        $Em.$add2($temp);
                    else
                        $Am.$add2($temp);
                    if (var$10 == $end)
                        break;
                    $curr = var$10;
                }
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace0();
    }
},
osi_MCPPSolver_Yaoyuenyong_solve = $this => {
    let $G, $gEdges, $gEdgeContainers, $m, $i, $Gm, $Gstar, $U, $M, $Em, $Am, $inMdubPrime, $improvements, $iStat, $n, $start, $resetStart, $idToImprove, $k, var$20, $toImprove, $j, $Gij1, $Gij2, $gij1Edges, $gij2Vertices, $cost1, $curr, $end, $dist, $path, $edgePath, $edgePath2, $path2, var$35, var$36, $next, $cost2, var$39, $dist2, var$41, $path3, $edgePath3, var$44, $Gij3, $Gij4, $gij3Edges, $gij4Edges, var$49, $Gnew, var$51, $e, $k2, $tour, $eulerTour, $indexedEdges, $ret, $ex, $$je;
    a: {
        try {
            $G = ($this.$mInstance.$getGraph()).$getDeepCopy1();
            $gEdges = $G.$getInternalEdgeMap();
            $gEdgeContainers = ju_ArrayList__init_();
            $gEdgeContainers.$add2(null);
            $m = ($G.$getEdges0()).$size();
            $i = 1;
            while ($i <= $m) {
                $gEdgeContainers.$add2(oc_MultiEdge__init_($gEdges.$get($i)));
                $i = $i + 1 | 0;
            }
            $Gm = $G.$getDeepCopy1();
            $Gstar = $G.$getDeepCopy1();
            $U = ju_ArrayList__init_();
            $M = ju_ArrayList__init_();
            $Em = ju_ArrayList__init_();
            $Am = ju_ArrayList__init_();
            $inMdubPrime = ju_ArrayList__init_();
            osi_MCPPSolver_Yaoyuenyong_evenDegree($Gm, $Em, $Am);
            osi_MCPPSolver_Yaoyuenyong_inOutDegree($Gstar, $U, $M, $inMdubPrime, $gEdgeContainers);
            $improvements = 1;
            $iStat = null;
            $n = ($G.$getVertices0()).$size();
            $start = 1;
            while ($improvements) {
                $improvements = 0;
                $resetStart = 1;
                while (true) {
                    $idToImprove = 0;
                    $k = $start;
                    b: {
                        c: {
                            while (true) {
                                var$20 = $m + 1 | 0;
                                if ($k >= var$20)
                                    break;
                                $iStat = ($gEdgeContainers.$get($k)).$getType3();
                                oc_MultiEdge$EDGETYPE_$callClinit();
                                if ($iStat === oc_MultiEdge$EDGETYPE_A)
                                    break c;
                                if ($iStat === oc_MultiEdge$EDGETYPE_C)
                                    break c;
                                if ($iStat === oc_MultiEdge$EDGETYPE_D)
                                    break c;
                                if ($iStat === oc_MultiEdge$EDGETYPE_F)
                                    break c;
                                $k = $k + 1 | 0;
                            }
                            $k = $idToImprove;
                            break b;
                        }
                        $start = $k + 1 | 0;
                    }
                    if (!$k) {
                        if ($resetStart)
                            break;
                        $start = 1;
                        $resetStart = 1;
                        continue;
                    }
                    $toImprove = $gEdgeContainers.$get($k);
                    $i = ((($toImprove.$getFirst0()).$getEndpoints()).$getFirst()).$getId();
                    $j = ((($toImprove.$getFirst0()).$getEndpoints()).$getSecond()).$getId();
                    $Gij1 = $G.$getDeepCopy1();
                    $Gij2 = $G.$getDeepCopy1();
                    $gij1Edges = $Gij1.$getInternalEdgeMap();
                    osi_MCPPSolver_Yaoyuenyong_CostMod1($Gij1, $gEdgeContainers, $Em, $Am);
                    osi_MCPPSolver_Yaoyuenyong_CostMod2($Gij1, $G, $gEdgeContainers, $i, $j);
                    osi_MCPPSolver_Yaoyuenyong_CostMod2($Gij2, $G, $gEdgeContainers, $i, $j);
                    $gij2Vertices = $Gij2.$getInternalVertexMap();
                    oc_MultiEdge$EDGETYPE_$callClinit();
                    if ($iStat !== oc_MultiEdge$EDGETYPE_A && $iStat !== oc_MultiEdge$EDGETYPE_D) {
                        $cost1 = 0;
                        $curr = !$toImprove.$isDirectedBackward() ? $i : $j;
                        $end = !$toImprove.$isDirectedBackward() ? $j : $i;
                        var$20 = $n + 1 | 0;
                        $dist = $rt_createIntArray(var$20);
                        $path = $rt_createIntArray(var$20);
                        $edgePath = $rt_createIntArray(var$20);
                        $edgePath2 = $rt_createIntArray(var$20);
                        $path2 = $rt_createIntArray(var$20);
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij1, $curr, $dist, $path, $edgePath);
                        var$35 = $rt_createIntArray(var$20);
                        var$36 = var$35.data;
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij2, $curr, var$35, $path2, $edgePath2);
                        if (var$36[$end] == 2147483647)
                            continue;
                        while (true) {
                            $next = $path.data[$end];
                            $cost1 = $cost1 + (((($gij2Vertices.$get($next)).$getNeighbors0()).$get1($gij2Vertices.$get($end))).$get(0)).$getCost() | 0;
                            if ($next == $curr)
                                break;
                            $end = $next;
                        }
                        if ($cost1 < ($toImprove.$getFirst0()).$getCost()) {
                            (jl_System_out()).$println1((((((jl_StringBuilder__init_()).$append4($rt_s(452))).$append2($cost1)).$append4($rt_s(453))).$append2(($toImprove.$getFirst0()).$getCost())).$toString());
                            $resetStart = 0;
                            if ($toImprove.$isDirectedBackward())
                                $j = $i;
                            (jl_System_out()).$println1(((((((jl_StringBuilder__init_()).$append4($rt_s(454))).$append2($curr)).$append4($rt_s(455))).$append2($j)).$append4($rt_s(408))).$toString());
                            osi_MCPPSolver_Yaoyuenyong_addShortestPathAndUpdate($curr, $j, $path, $edgePath, $gij1Edges, $gEdgeContainers);
                            $toImprove.$tryRemoveCopy();
                        }
                    } else {
                        $cost1 = 0;
                        $cost2 = 0;
                        var$20 = $n + 1 | 0;
                        $dist = $rt_createIntArray(var$20);
                        $path = $rt_createIntArray(var$20);
                        $edgePath = $rt_createIntArray(var$20);
                        $edgePath2 = $rt_createIntArray(var$20);
                        $path2 = $rt_createIntArray(var$20);
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij1, $i, $dist, $path, $edgePath);
                        var$35 = $rt_createIntArray(var$20);
                        var$36 = var$35.data;
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij2, $i, var$35, $path2, $edgePath2);
                        if (var$36[$j] == 2147483647)
                            $cost1 = 2147483647;
                        else {
                            var$39 = $j;
                            while (true) {
                                $next = $path.data[var$39];
                                $cost1 = $cost1 + (((($gij2Vertices.$get($next)).$getNeighbors0()).$get1($gij2Vertices.$get(var$39))).$get(0)).$getCost() | 0;
                                if ($next == $i)
                                    break;
                                var$39 = $next;
                            }
                        }
                        $dist2 = $rt_createIntArray(var$20);
                        var$36 = $dist2.data;
                        var$35 = $rt_createIntArray(var$20);
                        var$41 = $rt_createIntArray(var$20);
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij1, $j, $dist2, var$41, var$35);
                        $path3 = $rt_createIntArray(var$20);
                        $edgePath3 = $rt_createIntArray(var$20);
                        ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij2, $j, $dist2, $path3, $edgePath3);
                        if (var$36[$i] == 2147483647)
                            $cost2 = 2147483647;
                        else {
                            var$20 = $i;
                            while (true) {
                                $next = var$41.data[var$20];
                                $cost2 = $cost2 + (((($gij2Vertices.$get($next)).$getNeighbors0()).$get1($gij2Vertices.$get(var$20))).$get(0)).$getCost() | 0;
                                if ($next == $j)
                                    break;
                                var$20 = $next;
                            }
                        }
                        if ($cost1 < ($toImprove.$getFirst0()).$getCost() && $cost1 < $cost2) {
                            (jl_System_out()).$println1(((((((jl_StringBuilder__init_()).$append4($rt_s(452))).$append2($cost1)).$append4($rt_s(453))).$append2(($toImprove.$getFirst0()).$getCost())).$append4($rt_s(408))).$toString());
                            $resetStart = 0;
                            $toImprove.$directBackward();
                            (jl_System_out()).$println1(((((((jl_StringBuilder__init_()).$append4($rt_s(454))).$append2($i)).$append4($rt_s(455))).$append2($j)).$append4($rt_s(408))).$toString());
                            osi_MCPPSolver_Yaoyuenyong_addShortestPathAndUpdate($i, $j, $path, $edgePath, $gij1Edges, $gEdgeContainers);
                        } else if ($cost2 < ($toImprove.$getFirst0()).$getCost() && $cost2 < $cost1) {
                            (jl_System_out()).$println1((((((jl_StringBuilder__init_()).$append4($rt_s(452))).$append2($cost2)).$append4($rt_s(453))).$append2(($toImprove.$getFirst0()).$getCost())).$toString());
                            $resetStart = 0;
                            $toImprove.$directForward();
                            (jl_System_out()).$println1(((((((jl_StringBuilder__init_()).$append4($rt_s(454))).$append2($j)).$append4($rt_s(455))).$append2($i)).$append4($rt_s(408))).$toString());
                            osi_MCPPSolver_Yaoyuenyong_addShortestPathAndUpdate($j, $i, var$41, var$35, $gij1Edges, $gEdgeContainers);
                        }
                    }
                    osi_MCPPSolver_Yaoyuenyong_eliminateAddedDirectedCycles($n, $gEdgeContainers);
                }
                $start = 1;
                var$44 = 1;
                while (true) {
                    $k = $start;
                    d: {
                        while ($k < var$20) {
                            $iStat = ($gEdgeContainers.$get($k)).$getType3();
                            oc_MultiEdge$EDGETYPE_$callClinit();
                            if ($iStat === oc_MultiEdge$EDGETYPE_B) {
                                $start = $k + 1 | 0;
                                break d;
                            }
                            $k = $k + 1 | 0;
                        }
                        $k = 0;
                    }
                    if (!$k) {
                        if (var$44)
                            break;
                        $start = 1;
                        var$44 = 1;
                        continue;
                    }
                    $toImprove = $gEdgeContainers.$get($k);
                    $i = ((($toImprove.$getFirst0()).$getEndpoints()).$getFirst()).$getId();
                    $j = ((($toImprove.$getFirst0()).$getEndpoints()).$getSecond()).$getId();
                    $Gij3 = $G.$getDeepCopy1();
                    $Gij4 = $G.$getDeepCopy1();
                    $gij3Edges = $Gij3.$getInternalEdgeMap();
                    $gij4Edges = $Gij4.$getInternalEdgeMap();
                    osi_MCPPSolver_Yaoyuenyong_CostMod2($Gij3, $G, $gEdgeContainers, $i, $j);
                    $curr = !$toImprove.$isDirectedBackward() ? $i : $j;
                    $end = !$toImprove.$isDirectedBackward() ? $j : $i;
                    var$39 = $n + 1 | 0;
                    $dist = $rt_createIntArray(var$39);
                    var$35 = $dist.data;
                    $path = $rt_createIntArray(var$39);
                    $edgePath = $rt_createIntArray(var$39);
                    ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij3, $curr, $dist, $path, $edgePath);
                    if (var$35[$end] == 2147483647)
                        continue;
                    var$49 = var$35[$end];
                    $Gnew = ju_ArrayList__init_();
                    $Gnew.$add2(null);
                    $k = 1;
                    while ($k < $gEdgeContainers.$size()) {
                        $Gnew.$add2(($gEdgeContainers.$get($k)).$getCopy0());
                        $k = $k + 1 | 0;
                    }
                    osi_MCPPSolver_Yaoyuenyong_addShortestPathAndUpdate($curr, $end, $path, $edgePath, $gij3Edges, $Gnew);
                    osi_MCPPSolver_Yaoyuenyong_CostMod2($Gij4, $G, $Gnew, $i, $j);
                    $dist2 = $rt_createIntArray(var$39);
                    var$35 = $dist2.data;
                    $path2 = $rt_createIntArray(var$39);
                    $edgePath2 = $rt_createIntArray(var$39);
                    ogu_CommonAlgorithms_dijkstrasAlgorithm($Gij4, $curr, $dist2, $path2, $edgePath2);
                    if (var$35[$end] == 2147483647)
                        continue;
                    $cost2 = var$35[$end];
                    var$39 = var$49 + $cost2 | 0;
                    if (var$39 >= 0)
                        continue;
                    (jl_System_out()).$println1((((jl_StringBuilder__init_()).$append4($rt_s(456))).$append2(var$39)).$toString());
                    var$44 = 0;
                    $improvements = 1;
                    if (!$toImprove.$isDirectedForward()) {
                        $toImprove.$addReverseCopy();
                        $toImprove.$directForward();
                    } else {
                        $toImprove.$addReverseCopy();
                        $toImprove.$directBackward();
                    }
                    (jl_System_out()).$println1(((((((jl_StringBuilder__init_()).$append4($rt_s(454))).$append2($curr)).$append4($rt_s(455))).$append2($end)).$append4($rt_s(408))).$toString());
                    osi_MCPPSolver_Yaoyuenyong_addShortestPathAndUpdate($curr, $end, $path, $edgePath, $gij3Edges, $gEdgeContainers);
                    osi_MCPPSolver_Yaoyuenyong_addShortestPathAndUpdate($curr, $end, $path2, $edgePath2, $gij4Edges, $gEdgeContainers);
                    osi_MCPPSolver_Yaoyuenyong_eliminateAddedDirectedCycles($n, $gEdgeContainers);
                }
            }
            $k = 1;
            while ($k < $gEdgeContainers.$size()) {
                $toImprove = $gEdgeContainers.$get($k);
                var$51 = $toImprove.$getType3();
                oc_MultiEdge$EDGETYPE_$callClinit();
                if (var$51 === oc_MultiEdge$EDGETYPE_A) {
                    $toImprove.$directForward();
                    $toImprove.$addReverseCopy();
                }
                $k = $k + 1 | 0;
            }
            $G.$clearEdges();
            $k = 1;
            while ($k < $gEdgeContainers.$size()) {
                $toImprove = $gEdgeContainers.$get($k);
                $e = $toImprove.$getFirst0();
                if ($toImprove.$isDirectedForward()) {
                    $k2 = 0;
                    while ($k2 < ($toImprove.$getNumCopies() + 1 | 0)) {
                        $G.$addEdge8(oli_MixedEdge__init_($rt_s(306), $e.$getEndpoints(), $e.$getCost(), 1));
                        $k2 = $k2 + 1 | 0;
                    }
                } else if (!$toImprove.$isDirectedBackward()) {
                    $G.$addEdge8(oli_MixedEdge__init_($rt_s(306), ogu_Pair__init_(($e.$getEndpoints()).$getSecond(), ($e.$getEndpoints()).$getFirst()), $e.$getCost(), 1));
                    $G.$addEdge8(oli_MixedEdge__init_($rt_s(306), $e.$getEndpoints(), $e.$getCost(), 1));
                } else {
                    $k2 = 0;
                    while ($k2 < ($toImprove.$getNumCopies() + 1 | 0)) {
                        $G.$addEdge8(oli_MixedEdge__init_($rt_s(306), ogu_Pair__init_(($e.$getEndpoints()).$getSecond(), ($e.$getEndpoints()).$getFirst()), $e.$getCost(), 1));
                        $k2 = $k2 + 1 | 0;
                    }
                }
                $k = $k + 1 | 0;
            }
            $tour = ogu_CommonAlgorithms_tryHierholzer0($G);
            $eulerTour = ori_Tour__init_();
            $indexedEdges = $G.$getInternalEdgeMap();
            $k = 0;
            while ($k < $tour.$size()) {
                $eulerTour.$appendEdge0($indexedEdges.$get(($tour.$get($k)).$intValue()));
                $k = $k + 1 | 0;
            }
            $this.$mInstance.$setSol($eulerTour);
            $ret = ju_HashSet__init_();
            $ret.$add2($eulerTour);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $ex = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ret;
    }
    $ex.$printStackTrace0();
    return null;
},
osi_MCPPSolver_Yaoyuenyong_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_MIXED;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
},
osi_MCPPSolver_Yaoyuenyong_getSolverName = $this => {
    return $rt_s(457);
},
osi_MCPPSolver_Yaoyuenyong_checkGraphRequirements = $this => {
    let $mGraph;
    if ($this.$mInstance.$getGraph() === null)
        return 0;
    $mGraph = $this.$mInstance.$getGraph();
    if (ogu_CommonAlgorithms_isStronglyConnected($mGraph))
        return 1;
    return 0;
},
jur_ReluctantCompositeQuantifierSet = $rt_classWithoutFields(jur_CompositeQuantifierSet),
jur_ReluctantCompositeQuantifierSet__init_ = ($this, $quant, $innerSet, $next, $type) => {
    jur_CompositeQuantifierSet__init_($this, $quant, $innerSet, $next, $type);
},
jur_ReluctantCompositeQuantifierSet__init_0 = (var_0, var_1, var_2, var_3) => {
    let var_4 = new jur_ReluctantCompositeQuantifierSet();
    jur_ReluctantCompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
jur_ReluctantCompositeQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $min, $max, $i, var$7, var$8;
    $min = $this.$quantifier.$min();
    $max = $this.$quantifier.$max();
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    var$7 = $this.$next2.$matches($stringIndex, $testString, $matchResult);
                    if (var$7 >= 0)
                        break;
                    if (($stringIndex + $this.$leaf.$charCount() | 0) <= $matchResult.$getRightBound()) {
                        var$7 = $this.$leaf.$accepts($stringIndex, $testString);
                        $stringIndex = $stringIndex + var$7 | 0;
                        $i = $i + 1 | 0;
                    }
                    if (var$7 < 1)
                        break a;
                    if ($i > $max)
                        break a;
                }
                return var$7;
            }
            return (-1);
        }
        if (($stringIndex + $this.$leaf.$charCount() | 0) > $matchResult.$getRightBound()) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        var$8 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$8 < 1)
            break;
        $stringIndex = $stringIndex + var$8 | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
},
jl_NullPointerException = $rt_classWithoutFields(jl_RuntimeException),
jl_NullPointerException__init_2 = ($this, $message) => {
    jl_RuntimeException__init_0($this, $message);
},
jl_NullPointerException__init_1 = var_0 => {
    let var_1 = new jl_NullPointerException();
    jl_NullPointerException__init_2(var_1, var_0);
    return var_1;
},
jl_NullPointerException__init_0 = $this => {
    jl_RuntimeException__init_($this);
},
jl_NullPointerException__init_ = () => {
    let var_0 = new jl_NullPointerException();
    jl_NullPointerException__init_0(var_0);
    return var_0;
},
jur_SOLSet = $rt_classWithoutFields(jur_AbstractSet),
jur_SOLSet__init_ = $this => {
    jur_AbstractSet__init_($this);
},
jur_SOLSet__init_0 = () => {
    let var_0 = new jur_SOLSet();
    jur_SOLSet__init_(var_0);
    return var_0;
},
jur_SOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    if ($strIndex && !($matchResult.$hasAnchoringBounds() && $strIndex == $matchResult.$getLeftBound()))
        return (-1);
    return $this.$next2.$matches($strIndex, $testString, $matchResult);
},
jur_SOLSet_hasConsumed = ($this, $matchResult) => {
    return 0;
},
jur_SOLSet_getName = $this => {
    return $rt_s(458);
},
oe_InvalidEndpointsException = $rt_classWithoutFields(jl_Exception),
oe_InvalidEndpointsException__init_0 = $this => {
    jl_Exception__init_($this);
},
oe_InvalidEndpointsException__init_ = () => {
    let var_0 = new oe_InvalidEndpointsException();
    oe_InvalidEndpointsException__init_0(var_0);
    return var_0;
};
function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
    jur_AbstractCharClass.call(this);
    this.$this$032 = null;
}
let jur_AbstractCharClass$LazyJavaSpaceChar$1__init_ = ($this, $this$0) => {
    $this.$this$032 = $this$0;
    jur_AbstractCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaSpaceChar$1__init_0 = var_0 => {
    let var_1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1();
    jur_AbstractCharClass$LazyJavaSpaceChar$1__init_(var_1, var_0);
    return var_1;
},
jur_AbstractCharClass$LazyJavaSpaceChar$1_contains = ($this, $ch) => {
    return jl_Character_isSpaceChar($ch);
},
ori_Tour = $rt_classWithoutFields(oc_Route),
ori_Tour__init_0 = $this => {
    oc_Route__init_($this);
},
ori_Tour__init_ = () => {
    let var_0 = new ori_Tour();
    ori_Tour__init_0(var_0);
    return var_0;
},
gt_TObjectHash = $rt_classWithoutFields(gt_THash),
gt_TObjectHash_REMOVED = null,
gt_TObjectHash_NULL = null,
gt_TObjectHash_$callClinit = () => {
    gt_TObjectHash_$callClinit = $rt_eraseClinit(gt_TObjectHash);
    gt_TObjectHash__clinit_();
},
gt_TObjectHash__clinit_ = () => {
    gt_TObjectHash_REMOVED = jl_Object__init_0();
    gt_TObjectHash_NULL = gt_TObjectHash$NULL__init_0();
},
ogu_BlossomV$1 = $rt_classWithoutFields(),
ogu_BlossomV$1__init_ = $this => {
    jl_Object__init_($this);
},
ogu_BlossomV$1__init_0 = () => {
    let var_0 = new ogu_BlossomV$1();
    ogu_BlossomV$1__init_(var_0);
    return var_0;
},
ogu_BlossomV$1_compare = ($this, $e1, $e2) => {
    return jl_Integer_compare($e1.$weight, $e2.$weight);
},
ogu_BlossomV$1_compare0 = ($this, var$1, var$2) => {
    return $this.$compare6(var$1, var$2);
},
jl_Math = $rt_classWithoutFields(),
jl_Math_floor = var$1 => {
    return Math.floor(var$1);
},
jl_Math_random = () => {
    return jl_Math_randomImpl();
},
jl_Math_randomImpl = () => {
    return Math.random();
},
jl_Math_min = ($a, $b) => {
    if ($a < $b)
        $b = $a;
    return $b;
},
jl_Math_max = ($a, $b) => {
    if ($a > $b)
        $b = $a;
    return $b;
},
jl_Math_abs = $n => {
    if ($n < 0)
        $n =  -$n | 0;
    return $n;
},
ogi_WindyGraph = $rt_classWithoutFields(oc_MutableGraph),
ogi_WindyGraph_LOGGER = null,
ogi_WindyGraph_$callClinit = () => {
    ogi_WindyGraph_$callClinit = $rt_eraseClinit(ogi_WindyGraph);
    ogi_WindyGraph__clinit_();
},
ogi_WindyGraph__init_1 = $this => {
    ogi_WindyGraph_$callClinit();
    oc_MutableGraph__init_($this);
},
ogi_WindyGraph__init_ = () => {
    let var_0 = new ogi_WindyGraph();
    ogi_WindyGraph__init_1(var_0);
    return var_0;
},
ogi_WindyGraph__init_0 = ($this, $n) => {
    ogi_WindyGraph_$callClinit();
    oc_MutableGraph__init_0($this, $n);
},
ogi_WindyGraph__init_2 = var_0 => {
    let var_1 = new ogi_WindyGraph();
    ogi_WindyGraph__init_0(var_1, var_0);
    return var_1;
},
ogi_WindyGraph_addEdge2 = ($this, $i, $j, $desc, $cost, $reverseCost) => {
    $this.$addEdge14($this.$constructEdge2($i, $j, $desc, $cost, $reverseCost));
},
ogi_WindyGraph_addEdge1 = ($this, $i, $j, $cost, $reverseCost, $isRequired) => {
    $this.$addEdge14($this.$constructEdge3($i, $j, $rt_s(33), $cost, $reverseCost, $isRequired));
},
ogi_WindyGraph_addEdge4 = ($this, $i, $j, $desc, $cost, $reverseCost, $isRequired) => {
    $this.$addEdge14($this.$constructEdge3($i, $j, $desc, $cost, $reverseCost, $isRequired));
},
ogi_WindyGraph_addEdge3 = ($this, $i, $j, $desc, $cost, $reverseCost, $matchId, $isRequired) => {
    $this.$addEdge7($this.$constructEdge3($i, $j, $desc, $cost, $reverseCost, $isRequired), $matchId);
},
ogi_WindyGraph_constructEdge0 = ($this, $i, $j, $desc, $cost, $reverseCost) => {
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0)
        return oli_WindyEdge__init_0($desc, ogu_Pair__init_(($this.$getInternalVertexMap()).$get($i), ($this.$getInternalVertexMap()).$get($j)), $cost, $reverseCost);
    ogi_WindyGraph_LOGGER.$error($rt_s(348));
    $rt_throw(oe_InvalidEndpointsException__init_());
},
ogi_WindyGraph_constructEdge = ($this, $i, $j, $desc, $cost, $reverseCost, $isRequired) => {
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0)
        return oli_WindyEdge__init_2($desc, ogu_Pair__init_(($this.$getInternalVertexMap()).$get($i), ($this.$getInternalVertexMap()).$get($j)), $cost, $reverseCost, $isRequired);
    ogi_WindyGraph_LOGGER.$error($rt_s(348));
    $rt_throw(oe_InvalidEndpointsException__init_());
},
ogi_WindyGraph_addVertex = ($this, $v) => {
    oc_MutableGraph_addVertex($this, $v);
},
ogi_WindyGraph_addEdge0 = ($this, $e) => {
    let $endpoints, $toUpdate, var$4;
    $endpoints = $e.$getEndpoints();
    ($endpoints.$getFirst()).$addToNeighbors0($endpoints.$getSecond(), $e);
    ($endpoints.$getSecond()).$addToNeighbors0($endpoints.$getFirst(), $e);
    ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
    ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
    $toUpdate = $endpoints.$getFirst();
    $toUpdate.$setDegree($toUpdate.$getDegree() + 1 | 0);
    var$4 = ($e.$getEndpoints()).$getSecond();
    var$4.$setDegree(var$4.$getDegree() + 1 | 0);
    oc_MutableGraph_addEdge($this, $e);
},
ogi_WindyGraph_getDeepCopy = $this => {
    let $ans, $indexedEdges, $indexedVertices, $n, $i, $temp2, $temp, $forSortingE, $m, $e, $e2, $$je;
    a: {
        try {
            $ans = ogi_WindyGraph__init_();
            $indexedEdges = $this.$getInternalEdgeMap();
            $indexedVertices = $this.$getInternalVertexMap();
            $n = ($this.$getVertices0()).$size();
            $i = 1;
            while ($i <= $n) {
                $temp2 = $indexedVertices.$get($i);
                $temp = ovi_WindyVertex__init_($temp2.$getLabel());
                $temp.$setCoordinates($temp2.$getX(), $temp2.$getY());
                if ($temp2.$isDemandSet())
                    $temp.$setDemand($temp2.$getDemand());
                $ans.$addVertex0($temp, $temp2.$getId());
                $i = $i + 1 | 0;
            }
            $forSortingE = gt_TIntArrayList__init_0($indexedEdges.$keys());
            $forSortingE.$sort1();
            $m = $forSortingE.$size();
            $i = 0;
            while ($i < $m) {
                $e = $indexedEdges.$get($forSortingE.$get2($i));
                $e2 = oli_WindyEdge__init_0($e.$getLabel(), ogu_Pair__init_($ans.$getVertex($e.$getFirstEndpointId()), $ans.$getVertex($e.$getSecondEndpointId())), $e.$getCost(), $e.$getReverseCost());
                $e2.$setMatchId($e.$getId());
                $e2.$setRequired($e.$isRequired());
                $e2.$setZone($e.$getZone());
                $e2.$setType0($e.$getType());
                $e2.$setMaxSpeed($e.$getMaxSpeed());
                $ans.$addEdge7($e2, $e.$getId());
                $i = $i + 1 | 0;
            }
            $ans.$setDepotId($this.$getDepotId());
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
ogi_WindyGraph_constructVertex0 = ($this, $desc) => {
    return ovi_WindyVertex__init_($desc);
},
ogi_WindyGraph_addVertex0 = ($this, var$1) => {
    $this.$addVertex(var$1);
},
ogi_WindyGraph_addEdge = ($this, var$1) => {
    $this.$addEdge14(var$1);
},
ogi_WindyGraph_constructVertex = ($this, var$1) => {
    return $this.$constructVertex1(var$1);
},
ogi_WindyGraph__clinit_ = () => {
    ogi_WindyGraph_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ogi_WindyGraph));
};
function ju_HashMap$HashMapEntrySet() {
    ju_AbstractSet.call(this);
    this.$associatedMap0 = null;
}
let ju_HashMap$HashMapEntrySet__init_ = ($this, $hm) => {
    ju_AbstractSet__init_($this);
    $this.$associatedMap0 = $hm;
},
ju_HashMap$HashMapEntrySet__init_0 = var_0 => {
    let var_1 = new ju_HashMap$HashMapEntrySet();
    ju_HashMap$HashMapEntrySet__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$HashMapEntrySet_iterator = $this => {
    return ju_HashMap$EntryIterator__init_0($this.$associatedMap0);
},
ogi_DirectedGraph = $rt_classWithoutFields(oc_MutableGraph),
ogi_DirectedGraph_LOGGER = null,
ogi_DirectedGraph_$callClinit = () => {
    ogi_DirectedGraph_$callClinit = $rt_eraseClinit(ogi_DirectedGraph);
    ogi_DirectedGraph__clinit_();
},
ogi_DirectedGraph__init_2 = $this => {
    ogi_DirectedGraph_$callClinit();
    oc_MutableGraph__init_($this);
},
ogi_DirectedGraph__init_ = () => {
    let var_0 = new ogi_DirectedGraph();
    ogi_DirectedGraph__init_2(var_0);
    return var_0;
},
ogi_DirectedGraph__init_1 = ($this, $n) => {
    ogi_DirectedGraph_$callClinit();
    oc_MutableGraph__init_0($this, $n);
},
ogi_DirectedGraph__init_0 = var_0 => {
    let var_1 = new ogi_DirectedGraph();
    ogi_DirectedGraph__init_1(var_1, var_0);
    return var_1;
},
ogi_DirectedGraph_addVertex0 = ($this, $v) => {
    oc_MutableGraph_addVertex($this, $v);
},
ogi_DirectedGraph_addEdge = ($this, $e) => {
    let $toUpdate, var$3;
    ($e.$getTail()).$addToNeighbors1($e.$getHead(), $e);
    ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
    ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
    $toUpdate = $e.$getTail();
    $toUpdate.$setOutDegree($toUpdate.$getOutDegree() + 1 | 0);
    var$3 = $e.$getHead();
    var$3.$setInDegree(var$3.$getInDegree() + 1 | 0);
    oc_MutableGraph_addEdge($this, $e);
},
ogi_DirectedGraph_removeEdge = ($this, $e) => {
    let $toUpdate, var$3;
    if (!($this.$getEdges0()).$contains0($e)) {
        ogi_DirectedGraph_LOGGER.$error($rt_s(459));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    ($e.$getTail()).$removeFromNeighbors0($e.$getHead(), $e);
    ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
    ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
    $toUpdate = $e.$getTail();
    $toUpdate.$setOutDegree($toUpdate.$getOutDegree() - 1 | 0);
    var$3 = $e.$getHead();
    var$3.$setInDegree(var$3.$getInDegree() - 1 | 0);
    oc_MutableGraph_removeEdge($this, $e);
},
ogi_DirectedGraph_getDeepCopy = $this => {
    let $ans, $indexedVertices, $indexedArcs, $n, $i, $temp, $temp2, $forSorting, var$9, $a, $a2, $e, $$je;
    a: {
        try {
            $ans = ogi_DirectedGraph__init_();
            $indexedVertices = $this.$getInternalVertexMap();
            $indexedArcs = $this.$getInternalEdgeMap();
            $n = ($this.$getVertices0()).$size();
            ($this.$getEdges0()).$size();
            $i = 1;
            while ($i <= $n) {
                $temp = ovi_DirectedVertex__init_($rt_s(351));
                $temp2 = $indexedVertices.$get($i);
                if ($temp2.$isDemandSet())
                    $temp.$setDemand($temp2.$getDemand());
                $temp.$setCoordinates($temp2.$getX(), $temp2.$getY());
                $ans.$addVertex0($temp, $i);
                $i = $i + 1 | 0;
            }
            $forSorting = gt_TIntArrayList__init_0($indexedArcs.$keys());
            $forSorting.$sort1();
            var$9 = $forSorting.$size();
            $i = 0;
            while ($i < var$9) {
                $a = $indexedArcs.$get($forSorting.$get2($i));
                $a2 = oli_Arc__init_($rt_s(351), ogu_Pair__init_(($ans.$getInternalVertexMap()).$get(($a.$getTail()).$getId()), ($ans.$getInternalVertexMap()).$get(($a.$getHead()).$getId())), $a.$getCost());
                if ($a.$isCapacitySet())
                    $a2.$setCapacity($a.$getCapacity());
                $a2.$setRequired($a.$isRequired());
                $a2.$setZone($a.$getZone());
                $a2.$setType0($a.$getType());
                $a2.$setMaxSpeed($a.$getMaxSpeed());
                $a2.$setMatchId($a.$getId());
                $ans.$addEdge3($a2);
                $i = $i + 1 | 0;
            }
            $ans.$setDepotId($this.$getDepotId());
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
ogi_DirectedGraph_constructEdge = ($this, $i, $j, $desc, $cost) => {
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0)
        return oli_Arc__init_($desc, ogu_Pair__init_(($this.$getInternalVertexMap()).$get($i), ($this.$getInternalVertexMap()).$get($j)), $cost);
    ogi_DirectedGraph_LOGGER.$error($rt_s(348));
    $rt_throw(oe_InvalidEndpointsException__init_());
},
ogi_DirectedGraph_constructVertex = ($this, $desc) => {
    return ovi_DirectedVertex__init_($desc);
},
ogi_DirectedGraph_addVertex = ($this, var$1) => {
    $this.$addVertex1(var$1);
},
ogi_DirectedGraph_addEdge0 = ($this, var$1) => {
    $this.$addEdge3(var$1);
},
ogi_DirectedGraph_getDeepCopy0 = $this => {
    return $this.$getDeepCopy0();
},
ogi_DirectedGraph_constructEdge0 = ($this, var$1, var$2, var$3, var$4) => {
    return $this.$constructEdge(var$1, var$2, var$3, var$4);
},
ogi_DirectedGraph_constructVertex0 = ($this, var$1) => {
    return $this.$constructVertex2(var$1);
},
ogi_DirectedGraph__clinit_ = () => {
    ogi_DirectedGraph_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ogi_DirectedGraph));
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function jur_PatternSyntaxException() {
    let a = this; jl_IllegalArgumentException.call(a);
    a.$desc = null;
    a.$pattern1 = null;
    a.$index2 = 0;
}
let jur_PatternSyntaxException__init_0 = ($this, $description, $pattern, $index) => {
    jl_IllegalArgumentException__init_1($this);
    $this.$index2 = (-1);
    $this.$desc = $description;
    $this.$pattern1 = $pattern;
    $this.$index2 = $index;
},
jur_PatternSyntaxException__init_ = (var_0, var_1, var_2) => {
    let var_3 = new jur_PatternSyntaxException();
    jur_PatternSyntaxException__init_0(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PatternSyntaxException_getMessage = $this => {
    let $filler, $temp, var$3, var$4, var$5, var$6;
    $filler = $rt_s(33);
    if ($this.$index2 >= 1) {
        $temp = $rt_createCharArray($this.$index2);
        ju_Arrays_fill2($temp, 32);
        $filler = jl_String__init_($temp);
    }
    var$3 = $this.$desc;
    if ($this.$pattern1 !== null && $this.$pattern1.$length()) {
        var$4 = $this.$index2;
        var$5 = $this.$pattern1;
        var$6 = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append1(var$6, var$4), $rt_s(273)), var$5), $rt_s(273)), $filler);
        var$5 = jl_StringBuilder_toString(var$6);
    } else
        var$5 = $rt_s(33);
    var$6 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(var$6, var$3), var$5);
    return jl_StringBuilder_toString(var$6);
},
ot_TeaVMWrapper = $rt_classWithoutFields(),
ot_TeaVMWrapper_LOGGER = null,
ot_TeaVMWrapper_$callClinit = () => {
    ot_TeaVMWrapper_$callClinit = $rt_eraseClinit(ot_TeaVMWrapper);
    ot_TeaVMWrapper__clinit_();
},
ot_TeaVMWrapper_main = $args => {
    let var$2, var$3, var$4, $arg, $solver, $instanceContent, $dg, $dcpp, $dcppSolver, $ex, $ug, $ucpp, $ucppSolver, $mg, $mcpp, $mcppSolver, $mg2, $vertices, var$20, $v, $mcpp2, $mcppSolver2, $e, $wg, $wpp, $wppSolver, $wg2, $wrpp, $wrppSolver, $$je;
    ot_TeaVMWrapper_$callClinit();
    var$2 = $args.data;
    var$3 = var$2.length;
    if (var$3 != 2 && !var$2[0].$equals($rt_s(460)) && !(var$3 == 3 && var$2[0].$equals($rt_s(460)))) {
        var$4 = 0;
        while (var$4 < var$3) {
            $arg = var$2[var$4];
            (jl_System_out()).$println1($arg);
            var$4 = var$4 + 1 | 0;
        }
        ot_TeaVMWrapper_displayHelp();
        return;
    }
    a: {
        try {
            b: {
                $solver = jl_Integer_parseInt0(var$2[0]);
                $instanceContent = var$2[1];
                switch ($solver) {
                    case 1:
                        try {
                            $dg = ot_OARLibParser_parseDirectedGraph($instanceContent);
                            $dcpp = opic_DirectedCPP__init_0($dg, $rt_s(461));
                            $dcppSolver = osi_DCPPSolver_Edmonds__init_0($dcpp);
                            $dcppSolver.$trySolve();
                            (jl_System_out()).$println1($dcppSolver.$printCurrentSol());
                            break b;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $ex = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        $ex.$printStackTrace0();
                        break b;
                    case 2:
                        try {
                            $ug = ot_OARLibParser_parseUndirectedGraph($instanceContent);
                            $ucpp = opic_UndirectedCPP__init_0($ug, $rt_s(461));
                            $ucppSolver = osi_UCPPSolver_Edmonds__init_0($ucpp);
                            $ucppSolver.$trySolve();
                            (jl_System_out()).$println1($ucppSolver.$printCurrentSol());
                            break b;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $ex = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        $ex.$printStackTrace0();
                        break b;
                    case 3:
                        try {
                            $mg = ot_OARLibParser_parseMixedGraph($instanceContent);
                            $mcpp = opic_MixedCPP__init_0($mg, $rt_s(461));
                            $mcppSolver = osi_MCPPSolver_Frederickson__init_0($mcpp);
                            $mcppSolver.$trySolve();
                            (jl_System_out()).$println1($mcppSolver.$printCurrentSol());
                            break b;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $ex = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        $ex.$printStackTrace0();
                        break b;
                    case 4:
                        try {
                            $mg2 = ot_OARLibParser_parseMixedGraph($instanceContent);
                            (jl_System_out()).$println1($rt_s(462));
                            $vertices = ju_ArrayList__init_3($mg2.$getVertices0());
                            ju_Collections_sort($vertices, ot_TeaVMWrapper$main$lambda$_1_0__init_0());
                            var$20 = $vertices.$iterator();
                            while (var$20.$hasNext()) {
                                $v = var$20.$next();
                                (jl_System_out()).$println1((((((((((jl_StringBuilder__init_()).$append4($rt_s(463))).$append2($v.$getId())).$append4($rt_s(464))).$append2($v.$getDegree())).$append4($rt_s(465))).$append2($v.$getInDegree())).$append4($rt_s(466))).$append2($v.$getOutDegree())).$toString());
                            }
                            $mcpp2 = opic_MixedCPP__init_0($mg2, $rt_s(467));
                            $mcppSolver2 = osi_MCPPSolver_Yaoyuenyong__init_0($mcpp2);
                            $mcppSolver2.$trySolve();
                            (jl_System_out()).$println1($mcppSolver2.$printCurrentSol());
                            break b;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $e = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        $e.$printStackTrace0();
                        break b;
                    case 5:
                        try {
                            $wg = ot_OARLibParser_parseWindyGraph($instanceContent);
                            $wpp = opic_WindyCPP__init_0($wg, $rt_s(467));
                            $wppSolver = osi_WRPPSolver_Win__init_0($wpp);
                            $wppSolver.$trySolve();
                            (jl_System_out()).$println1($wppSolver.$printCurrentSol());
                            break b;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $e = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        $e.$printStackTrace0();
                        break b;
                    case 6:
                        break;
                    case 7:
                        try {
                            $wg2 = ot_OARLibParser_parseWindyGraph($instanceContent);
                            $wrpp = opir_WindyRPP__init_0($wg2, $rt_s(467));
                            $wrppSolver = osi_WRPPSolver_Benavent_H1__init_1($wrpp);
                            $wrppSolver.$trySolve();
                            (jl_System_out()).$println1($wrppSolver.$printCurrentSol());
                            break b;
                        } catch ($$e) {
                            $$je = $rt_wrapException($$e);
                            if ($$je instanceof jl_Exception) {
                                $e = $$je;
                            } else {
                                throw $$e;
                            }
                        }
                        $e.$printStackTrace0();
                        break b;
                    default:
                        break b;
                }
                (jl_System_out()).$println1($rt_s(468));
                (jl_System_out()).$println1($rt_s(469));
            }
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NumberFormatException) {
            } else {
                throw $$e;
            }
        }
        ot_TeaVMWrapper_displayHelp();
    }
},
ot_TeaVMWrapper_displayHelp = () => {
    let $helpText, var$2;
    ot_TeaVMWrapper_$callClinit();
    $helpText = $rt_s(470);
    var$2 = (((jl_StringBuilder__init_()).$append4($helpText)).$append4($rt_s(239))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(239))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(471))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(472))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(473))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(474))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(475))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(476))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(477))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(478))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(479))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(480))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(481))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(239))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(482))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(483))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(239))).$toString();
    var$2 = (((jl_StringBuilder__init_()).$append4(var$2)).$append4($rt_s(484))).$toString();
    (jl_System_out()).$println1(var$2);
},
ot_TeaVMWrapper_lambda$main$0 = ($v1, $v2) => {
    ot_TeaVMWrapper_$callClinit();
    return jl_Integer_compare($v1.$getId(), $v2.$getId());
},
ot_TeaVMWrapper__clinit_ = () => {
    ot_TeaVMWrapper_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ot_TeaVMWrapper));
},
opi_RuralPostmanProblem = $rt_classWithoutFields(oc_Problem),
opi_RuralPostmanProblem_LOGGER = null,
opi_RuralPostmanProblem_$callClinit = () => {
    opi_RuralPostmanProblem_$callClinit = $rt_eraseClinit(opi_RuralPostmanProblem);
    opi_RuralPostmanProblem__clinit_();
},
opi_RuralPostmanProblem__init_ = ($this, $graph, $name, $objFunc) => {
    let $isCpp, var$5, $l;
    opi_RuralPostmanProblem_$callClinit();
    oc_Problem__init_($this, $graph, $name, $objFunc);
    $isCpp = 1;
    var$5 = ($graph.$getEdges()).$iterator();
    while (var$5.$hasNext()) {
        $l = var$5.$next();
        if (!$l.$isRequired())
            $isCpp = 0;
    }
    if ($isCpp)
        opi_RuralPostmanProblem_LOGGER.$warn($rt_s(485));
},
opi_RuralPostmanProblem__clinit_ = () => {
    opi_RuralPostmanProblem_LOGGER = ou_SimpleLogger_getLogger($rt_cls(opi_RuralPostmanProblem));
},
jur_AbstractCharClass$LazyJavaDefined = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaDefined__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaDefined__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaDefined();
    jur_AbstractCharClass$LazyJavaDefined__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaDefined_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaDefined$1__init_0($this);
    $chCl.$lowHighSurrogates.$set(0, 2048);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function opi_ProblemAttributes() {
    let a = this; jl_Object.call(a);
    a.$mGraphType = null;
    a.$mProblemType = null;
    a.$mNumVehicles = null;
    a.$mNumDepots = null;
    a.$mProperties = null;
}
let opi_ProblemAttributes__init_ = ($this, $graphType, $problemType, $numVehicles, $numDepots, $properties) => {
    jl_Object__init_($this);
    $this.$mGraphType = $graphType;
    $this.$mProblemType = $problemType;
    $this.$mNumVehicles = $numVehicles;
    $this.$mNumDepots = $numDepots;
    $this.$mProperties = $properties;
},
opi_ProblemAttributes__init_0 = (var_0, var_1, var_2, var_3, var_4) => {
    let var_5 = new opi_ProblemAttributes();
    opi_ProblemAttributes__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
},
opi_ProblemAttributes_getmGraphType = $this => {
    return $this.$mGraphType;
},
opi_ProblemAttributes_getmProblemType = $this => {
    return $this.$mProblemType;
},
opi_ProblemAttributes_getmNumVehicles = $this => {
    return $this.$mNumVehicles;
},
opi_ProblemAttributes_getmNumDepots = $this => {
    return $this.$mNumDepots;
},
opi_ProblemAttributes_getmProperties = $this => {
    return $this.$mProperties;
},
opi_ProblemAttributes_isCompatibleWith = ($this, $other) => {
    if ($this.$mGraphType !== null && $other.$getmGraphType() !== null && $this.$mGraphType !== $other.$getmGraphType())
        return 0;
    if ($this.$mProblemType !== null && $other.$getmProblemType() !== null && $this.$mProblemType !== $other.$getmProblemType())
        return 0;
    if ($this.$mNumVehicles !== null && $other.$getmNumVehicles() !== null && $this.$mNumVehicles !== $other.$getmNumVehicles())
        return 0;
    if ($this.$mNumDepots !== null && $other.$getmNumDepots() !== null && $this.$mNumDepots !== $other.$getmNumDepots())
        return 0;
    if (ju_Arrays_deepEquals($this.$mProperties, $other.$getmProperties()))
        return 1;
    return 0;
},
opi_ProblemAttributes$Type = $rt_classWithoutFields(jl_Enum),
opi_ProblemAttributes$Type_CHINESE_POSTMAN = null,
opi_ProblemAttributes$Type_RURAL_POSTMAN = null,
opi_ProblemAttributes$Type_PARTITIONING = null,
opi_ProblemAttributes$Type_$VALUES = null,
opi_ProblemAttributes$Type_$callClinit = () => {
    opi_ProblemAttributes$Type_$callClinit = $rt_eraseClinit(opi_ProblemAttributes$Type);
    opi_ProblemAttributes$Type__clinit_();
},
opi_ProblemAttributes$Type__init_0 = ($this, var$1, var$2) => {
    opi_ProblemAttributes$Type_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
opi_ProblemAttributes$Type__init_ = (var_0, var_1) => {
    let var_2 = new opi_ProblemAttributes$Type();
    opi_ProblemAttributes$Type__init_0(var_2, var_0, var_1);
    return var_2;
},
opi_ProblemAttributes$Type_$values = () => {
    let var$1, var$2;
    opi_ProblemAttributes$Type_$callClinit();
    var$1 = $rt_createArray(opi_ProblemAttributes$Type, 3);
    var$2 = var$1.data;
    var$2[0] = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    var$2[1] = opi_ProblemAttributes$Type_RURAL_POSTMAN;
    var$2[2] = opi_ProblemAttributes$Type_PARTITIONING;
    return var$1;
},
opi_ProblemAttributes$Type__clinit_ = () => {
    opi_ProblemAttributes$Type_CHINESE_POSTMAN = opi_ProblemAttributes$Type__init_($rt_s(486), 0);
    opi_ProblemAttributes$Type_RURAL_POSTMAN = opi_ProblemAttributes$Type__init_($rt_s(487), 1);
    opi_ProblemAttributes$Type_PARTITIONING = opi_ProblemAttributes$Type__init_($rt_s(488), 2);
    opi_ProblemAttributes$Type_$VALUES = opi_ProblemAttributes$Type_$values();
};
function jur_Pattern() {
    let a = this; jl_Object.call(a);
    a.$lexemes = null;
    a.$flags = 0;
    a.$backRefs = null;
    a.$needsBackRefReplacement = 0;
    a.$globalGroupIndex = 0;
    a.$compCount0 = 0;
    a.$consCount0 = 0;
    a.$start1 = null;
}
let jur_Pattern_matcher = ($this, $input) => {
    return jur_Matcher__init_0($this, $input);
},
jur_Pattern_split0 = ($this, $inputSeq, $limit) => {
    let $res, $mat, $index, $curPos, var$7, var$8;
    $res = ju_ArrayList__init_();
    $mat = jur_Pattern_matcher($this, $inputSeq);
    $index = 0;
    $curPos = 0;
    if (!$inputSeq.$length()) {
        var$7 = $rt_createArray(jl_String, 1);
        var$7.data[0] = $rt_s(33);
        return var$7;
    }
    while (jur_Matcher_find0($mat)) {
        var$8 = $index + 1 | 0;
        if (var$8 >= $limit && $limit > 0)
            break;
        $res.$add2(($inputSeq.$subSequence($curPos, jur_Matcher_start($mat))).$toString());
        $curPos = jur_Matcher_end0($mat);
        $index = var$8;
    }
    a: {
        $res.$add2(($inputSeq.$subSequence($curPos, $inputSeq.$length())).$toString());
        var$8 = $index + 1 | 0;
        if (!$limit)
            while (true) {
                var$8 = var$8 + (-1) | 0;
                if (var$8 < 0)
                    break;
                if ((($res.$get(var$8)).$toString()).$length())
                    break a;
                $res.$remove(var$8);
            }
    }
    if (var$8 < 0)
        var$8 = 0;
    return $res.$toArray($rt_createArray(jl_String, var$8));
},
jur_Pattern_split = ($this, $input) => {
    return jur_Pattern_split0($this, $input, 0);
},
jur_Pattern_pattern = $this => {
    return $this.$lexemes.$toString();
},
jur_Pattern_compile0 = ($pattern, $flags) => {
    if ($pattern === null)
        $rt_throw(jl_NullPointerException__init_1($rt_s(489)));
    if ($flags && ($flags | 255) != 255)
        $rt_throw(jl_IllegalArgumentException__init_0($rt_s(33)));
    jur_AbstractSet_$callClinit();
    jur_AbstractSet_counter = 1;
    return jur_Pattern_compileImpl(jur_Pattern__init_0(), $pattern, $flags);
},
jur_Pattern_compileImpl = ($this, $pattern, $flags) => {
    $this.$lexemes = jur_Lexer__init_0($pattern, $flags);
    $this.$flags = $flags;
    $this.$start1 = jur_Pattern_processExpression($this, (-1), $this.$flags, null);
    if ($this.$lexemes.$isEmpty()) {
        jur_Pattern_finalizeCompile($this);
        return $this;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$lexemes.$toString(), $this.$lexemes.$getIndex()));
},
jur_Pattern_processAlternations = ($this, $last) => {
    let $auxRange, var$3, $rangeSet;
    $auxRange = jur_CharClass__init_4(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
    while (!$this.$lexemes.$isEmpty()) {
        var$3 = $this.$lexemes;
        if (!var$3.$isLetter0())
            break;
        var$3 = $this.$lexemes;
        if (var$3.$lookAhead() && $this.$lexemes.$lookAhead() != (-536870788)) {
            var$3 = $this.$lexemes;
            if (var$3.$lookAhead() != (-536870871))
                break;
        }
        $auxRange.$add($this.$lexemes.$next0());
        if ($this.$lexemes.$peek0() != (-536870788))
            continue;
        $this.$lexemes.$next0();
    }
    $rangeSet = jur_Pattern_processRangeSet($this, $auxRange);
    $rangeSet.$setNext($last);
    return $rangeSet;
},
jur_Pattern_processExpression = ($this, $ch, $newFlags, $last) => {
    let $children, $saveFlags, $saveChangedFlags, $fSet, var$8, $child;
    $children = ju_ArrayList__init_();
    $saveFlags = $this.$flags;
    $saveChangedFlags = 0;
    if ($newFlags != $this.$flags)
        $this.$flags = $newFlags;
    a: {
        switch ($ch) {
            case -1073741784:
                $fSet = new jur_NonCapFSet;
                var$8 = $this.$consCount0 + 1 | 0;
                $this.$consCount0 = var$8;
                jur_NonCapFSet__init_($fSet, var$8);
                break a;
            case -536870872:
            case -268435416:
                break;
            case -134217688:
            case -67108824:
                $fSet = new jur_BehindFSet;
                var$8 = $this.$consCount0 + 1 | 0;
                $this.$consCount0 = var$8;
                jur_BehindFSet__init_($fSet, var$8);
                break a;
            case -33554392:
                $fSet = new jur_AtomicFSet;
                var$8 = $this.$consCount0 + 1 | 0;
                $this.$consCount0 = var$8;
                jur_AtomicFSet__init_($fSet, var$8);
                break a;
            default:
                $this.$globalGroupIndex = $this.$globalGroupIndex + 1 | 0;
                if ($last !== null)
                    $fSet = jur_FSet__init_0($this.$globalGroupIndex);
                else {
                    $fSet = jur_FinalSet__init_0();
                    $saveChangedFlags = 1;
                }
                if ($this.$globalGroupIndex <= (-1))
                    break a;
                if ($this.$globalGroupIndex >= 10)
                    break a;
                $this.$backRefs.data[$this.$globalGroupIndex] = $fSet;
                break a;
        }
        $fSet = jur_AheadFSet__init_0();
    }
    while (true) {
        if ($this.$lexemes.$isLetter0() && $this.$lexemes.$lookAhead() == (-536870788))
            $child = jur_Pattern_processAlternations($this, $fSet);
        else if ($this.$lexemes.$peek0() == (-536870788)) {
            $child = jur_EmptySet__init_($fSet);
            $this.$lexemes.$next0();
        } else {
            $child = jur_Pattern_processSubExpression($this, $fSet);
            if ($this.$lexemes.$peek0() == (-536870788))
                $this.$lexemes.$next0();
        }
        if ($child !== null)
            $children.$add2($child);
        if ($this.$lexemes.$isEmpty())
            break;
        if ($this.$lexemes.$peek0() == (-536870871))
            break;
    }
    if ($this.$lexemes.$back() == (-536870788))
        $children.$add2(jur_EmptySet__init_($fSet));
    if ($this.$flags != $saveFlags && !$saveChangedFlags) {
        $this.$flags = $saveFlags;
        $this.$lexemes.$restoreFlags($this.$flags);
    }
    switch ($ch) {
        case -1073741784:
            break;
        case -536870872:
            return jur_PositiveLookAhead__init_0($children, $fSet);
        case -268435416:
            return jur_NegativeLookAhead__init_0($children, $fSet);
        case -134217688:
            return jur_PositiveLookBehind__init_0($children, $fSet);
        case -67108824:
            return jur_NegativeLookBehind__init_0($children, $fSet);
        case -33554392:
            return jur_AtomicJointSet__init_0($children, $fSet);
        default:
            switch ($children.$size()) {
                case 0:
                    break;
                case 1:
                    return jur_SingleSet__init_0($children.$get(0), $fSet);
                default:
                    return jur_JointSet__init_1($children, $fSet);
            }
            return jur_EmptySet__init_($fSet);
    }
    return jur_NonCapJointSet__init_0($children, $fSet);
},
jur_Pattern_processSequence = $this => {
    let $substring, var$2, $ch;
    $substring = jl_StringBuffer__init_0();
    while (!$this.$lexemes.$isEmpty()) {
        var$2 = $this.$lexemes;
        if (!var$2.$isLetter0())
            break;
        var$2 = $this.$lexemes;
        if (var$2.$isHighSurrogate0())
            break;
        var$2 = $this.$lexemes;
        if (var$2.$isLowSurrogate0())
            break;
        var$2 = $this.$lexemes;
        if (!(!var$2.$isNextSpecial() && !$this.$lexemes.$lookAhead())) {
            var$2 = $this.$lexemes;
            if (!(!var$2.$isNextSpecial() && jur_Lexer_isLetter($this.$lexemes.$lookAhead()))) {
                var$2 = $this.$lexemes;
                if (var$2.$lookAhead() != (-536870871)) {
                    var$2 = $this.$lexemes;
                    if ((var$2.$lookAhead() & (-2147418113)) != (-2147483608)) {
                        var$2 = $this.$lexemes;
                        if (var$2.$lookAhead() != (-536870788)) {
                            var$2 = $this.$lexemes;
                            if (var$2.$lookAhead() != (-536870876))
                                break;
                        }
                    }
                }
            }
        }
        $ch = $this.$lexemes.$next0();
        if (!jl_Character_isSupplementaryCodePoint($ch))
            $substring.$append17($ch & 65535);
        else
            $substring.$append18(jl_Character_toChars($ch));
    }
    if (!jur_Pattern_hasFlag($this, 2))
        return jur_SequenceSet__init_0($substring);
    if (jur_Pattern_hasFlag($this, 64))
        return jur_UCISequenceSet__init_0($substring);
    return jur_CISequenceSet__init_0($substring);
},
jur_Pattern_processDecomposedChar = $this => {
    let $codePoints, $readCodePoints, $curSymb, $curSymbIndex, var$5, $codePointsHangul, var$7, var$8, var$9, var$10;
    $codePoints = $rt_createIntArray(4);
    $readCodePoints = 0;
    $curSymb = (-1);
    $curSymbIndex = (-1);
    if (!$this.$lexemes.$isEmpty() && $this.$lexemes.$isLetter0()) {
        var$5 = $codePoints.data;
        $curSymb = $this.$lexemes.$next0();
        var$5[$readCodePoints] = $curSymb;
        $curSymbIndex = $curSymb - 4352 | 0;
    }
    if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
        $codePointsHangul = $rt_createCharArray(3);
        var$5 = $codePointsHangul.data;
        var$5[$readCodePoints] = $curSymb & 65535;
        var$7 = $this.$lexemes.$peek0();
        var$8 = var$7 - 4449 | 0;
        if (var$8 >= 0 && var$8 < 21) {
            var$5[1] = var$7 & 65535;
            $this.$lexemes.$next0();
            var$9 = $this.$lexemes.$peek0();
            var$7 = var$9 - 4519 | 0;
            if (var$7 >= 0 && var$7 < 28) {
                var$5[2] = var$9 & 65535;
                $this.$lexemes.$next0();
                return jur_HangulDecomposedCharSet__init_0($codePointsHangul, 3);
            }
            return jur_HangulDecomposedCharSet__init_0($codePointsHangul, 2);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_CharSet__init_(var$5[0]);
        if (jur_Pattern_hasFlag($this, 64))
            return jur_UCICharSet__init_0(var$5[0]);
        return jur_CICharSet__init_(var$5[0]);
    }
    var$10 = 1;
    while (var$10 < 4 && !$this.$lexemes.$isEmpty() && $this.$lexemes.$isLetter0()) {
        var$5 = $codePoints.data;
        var$9 = var$10 + 1 | 0;
        var$5[var$10] = $this.$lexemes.$next0();
        var$10 = var$9;
    }
    if (var$10 == 1) {
        var$5 = $codePoints.data;
        if (!jur_Lexer_hasSingleCodepointDecomposition(var$5[0]))
            return jur_Pattern_processCharSet($this, var$5[0]);
    }
    if (!jur_Pattern_hasFlag($this, 2))
        return jur_DecomposedCharSet__init_0($codePoints, var$10);
    if (jur_Pattern_hasFlag($this, 64))
        return jur_UCIDecomposedCharSet__init_0($codePoints, var$10);
    return jur_CIDecomposedCharSet__init_0($codePoints, var$10);
},
jur_Pattern_processSubExpression = ($this, $last) => {
    let $cur, $term, var$4, $next;
    if ($this.$lexemes.$isLetter0() && !$this.$lexemes.$isNextSpecial() && jur_Lexer_isLetter($this.$lexemes.$lookAhead())) {
        if (!jur_Pattern_hasFlag($this, 128)) {
            if (!$this.$lexemes.$isHighSurrogate0() && !$this.$lexemes.$isLowSurrogate0())
                $cur = jur_Pattern_processSequence($this);
            else {
                $term = jur_Pattern_processTerminal($this, $last);
                $cur = jur_Pattern_processQuantifier($this, $last, $term);
            }
        } else {
            $cur = jur_Pattern_processDecomposedChar($this);
            if (!$this.$lexemes.$isEmpty()) {
                var$4 = $this.$lexemes;
                if (!(var$4.$peek0() == (-536870871) && !($last instanceof jur_FinalSet))) {
                    var$4 = $this.$lexemes;
                    if (var$4.$peek0() != (-536870788) && !$this.$lexemes.$isLetter0())
                        $cur = jur_Pattern_processQuantifier($this, $last, $cur);
                }
            }
        }
    } else if ($this.$lexemes.$peek0() != (-536870871)) {
        $term = jur_Pattern_processTerminal($this, $last);
        $cur = jur_Pattern_processQuantifier($this, $last, $term);
    } else {
        if ($last instanceof jur_FinalSet)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$lexemes.$toString(), $this.$lexemes.$getIndex()));
        $cur = jur_EmptySet__init_($last);
    }
    a: {
        if (!$this.$lexemes.$isEmpty()) {
            var$4 = $this.$lexemes;
            if (!(var$4.$peek0() == (-536870871) && !($last instanceof jur_FinalSet))) {
                var$4 = $this.$lexemes;
                if (var$4.$peek0() != (-536870788)) {
                    $next = jur_Pattern_processSubExpression($this, $last);
                    if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
                        var$4 = $cur;
                        if (!$next.$first(var$4.$getInnerSet()))
                            $cur = jur_UnifiedQuantifierSet__init_0(var$4);
                    }
                    if (($next.$getType0() & 65535) != 43)
                        $cur.$setNext($next);
                    else
                        $cur.$setNext($next.$getInnerSet());
                    break a;
                }
            }
        }
        if ($cur === null)
            return null;
        $cur.$setNext($last);
    }
    if (($cur.$getType0() & 65535) != 43)
        return $cur;
    return $cur.$getInnerSet();
},
jur_Pattern_processQuantifier = ($this, $last, $term) => {
    let $quant, var$4, var$5, var$6, $q, var$8, $leaf;
    $quant = $this.$lexemes.$peek0();
    if ($term !== null && !($term instanceof jur_LeafSet)) {
        switch ($quant) {
            case -2147483606:
                $this.$lexemes.$next0();
                return jur_PossessiveGroupQuantifierSet__init_0($term, $last, $quant);
            case -2147483605:
                $this.$lexemes.$next0();
                return jur_PosPlusGroupQuantifierSet__init_0($term, $last, (-2147483606));
            case -2147483585:
                $this.$lexemes.$next0();
                return jur_PosAltGroupQuantifierSet__init_0($term, $last, (-536870849));
            case -2147483525:
                var$4 = new jur_PosCompositeGroupQuantifierSet;
                var$5 = $this.$lexemes.$nextSpecial();
                var$6 = $this.$compCount0 + 1 | 0;
                $this.$compCount0 = var$6;
                jur_PosCompositeGroupQuantifierSet__init_(var$4, var$5, $term, $last, (-536870849), var$6);
                return var$4;
            case -1073741782:
            case -1073741781:
                $this.$lexemes.$next0();
                $q = jur_ReluctantGroupQuantifierSet__init_0($term, $last, $quant);
                $term.$setNext($q);
                return $q;
            case -1073741761:
                $this.$lexemes.$next0();
                $q = jur_RelAltGroupQuantifierSet__init_0($term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -1073741701:
                $q = new jur_RelCompositeGroupQuantifierSet;
                var$4 = $this.$lexemes;
                var$4 = var$4.$nextSpecial();
                var$8 = $this.$compCount0 + 1 | 0;
                $this.$compCount0 = var$8;
                jur_RelCompositeGroupQuantifierSet__init_($q, var$4, $term, $last, (-536870849), var$8);
                $term.$setNext($q);
                return $q;
            case -536870870:
            case -536870869:
                $this.$lexemes.$next0();
                $q = $term.$getType0() != (-2147483602) ? jur_GroupQuantifierSet__init_0($term, $last, $quant) : jur_Pattern_hasFlag($this, 32) ? jur_DotAllQuantifierSet__init_0($term, $last, $quant) : jur_DotQuantifierSet__init_0($term, $last, $quant, jur_AbstractLineTerminator_getInstance($this.$flags));
                $term.$setNext($q);
                return $q;
            case -536870849:
                $this.$lexemes.$next0();
                $q = jur_AltGroupQuantifierSet__init_0($term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -536870789:
                $q = new jur_CompositeGroupQuantifierSet;
                var$4 = $this.$lexemes;
                var$4 = var$4.$nextSpecial();
                var$6 = $this.$compCount0 + 1 | 0;
                $this.$compCount0 = var$6;
                jur_CompositeGroupQuantifierSet__init_($q, var$4, $term, $last, (-536870849), var$6);
                $term.$setNext($q);
                return $q;
            default:
        }
        return $term;
    }
    $leaf = null;
    if ($term !== null)
        $leaf = $term;
    switch ($quant) {
        case -2147483606:
        case -2147483605:
            $this.$lexemes.$next0();
            $q = jur_PossessiveQuantifierSet__init_0($leaf, $last, $quant);
            $leaf.$setNext($q);
            return $q;
        case -2147483585:
            $this.$lexemes.$next0();
            return jur_PossessiveAltQuantifierSet__init_0($leaf, $last, (-2147483585));
        case -2147483525:
            return jur_PossessiveCompositeQuantifierSet__init_0($this.$lexemes.$nextSpecial(), $leaf, $last, (-2147483525));
        case -1073741782:
        case -1073741781:
            $this.$lexemes.$next0();
            $q = jur_ReluctantQuantifierSet__init_0($leaf, $last, $quant);
            $leaf.$setNext($q);
            return $q;
        case -1073741761:
            $this.$lexemes.$next0();
            return jur_ReluctantAltQuantifierSet__init_0($leaf, $last, (-1073741761));
        case -1073741701:
            return jur_ReluctantCompositeQuantifierSet__init_0($this.$lexemes.$nextSpecial(), $leaf, $last, (-1073741701));
        case -536870870:
        case -536870869:
            $this.$lexemes.$next0();
            $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
            $leaf.$setNext($q);
            return $q;
        case -536870849:
            $this.$lexemes.$next0();
            return jur_AltQuantifierSet__init_0($leaf, $last, (-536870849));
        case -536870789:
            return jur_CompositeQuantifierSet__init_0($this.$lexemes.$nextSpecial(), $leaf, $last, (-536870789));
        default:
    }
    return $term;
},
jur_Pattern_processTerminal = ($this, $last) => {
    let $term, $ch, $newFlags, var$5, $negative, $cc, $number, var$9, var$10, var$11;
    $term = null;
    while (true) {
        a: {
            $ch = $this.$lexemes.$peek0();
            if (($ch & (-2147418113)) == (-2147483608)) {
                $this.$lexemes.$next0();
                $newFlags = ($ch & 16711680) >> 16;
                $ch = $ch & (-16711681);
                if ($ch == (-16777176))
                    $this.$flags = $newFlags;
                else {
                    if ($ch != (-1073741784))
                        $newFlags = $this.$flags;
                    $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                    if ($this.$lexemes.$peek0() != (-536870871))
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$lexemes.$toString(), $this.$lexemes.$getIndex()));
                    $this.$lexemes.$next0();
                }
            } else {
                b: {
                    c: {
                        switch ($ch) {
                            case -2147483599:
                            case -2147483598:
                            case -2147483597:
                            case -2147483596:
                            case -2147483595:
                            case -2147483594:
                            case -2147483593:
                            case -2147483592:
                            case -2147483591:
                                break c;
                            case -2147483583:
                                break;
                            case -2147483582:
                                $this.$lexemes.$next0();
                                $term = jur_WordBoundary__init_(0);
                                break a;
                            case -2147483577:
                                $this.$lexemes.$next0();
                                $term = jur_PreviousMatch__init_0();
                                break a;
                            case -2147483558:
                                $this.$lexemes.$next0();
                                $term = new jur_EOLSet;
                                var$5 = $this.$consCount0 + 1 | 0;
                                $this.$consCount0 = var$5;
                                jur_EOLSet__init_($term, var$5);
                                break a;
                            case -2147483550:
                                $this.$lexemes.$next0();
                                $term = jur_WordBoundary__init_(1);
                                break a;
                            case -2147483526:
                                $this.$lexemes.$next0();
                                $term = jur_EOISet__init_0();
                                break a;
                            case -536870876:
                                $this.$lexemes.$next0();
                                $this.$consCount0 = $this.$consCount0 + 1 | 0;
                                if (jur_Pattern_hasFlag($this, 8)) {
                                    if (jur_Pattern_hasFlag($this, 1)) {
                                        $term = jur_UMultiLineEOLSet__init_0($this.$consCount0);
                                        break a;
                                    }
                                    $term = jur_MultiLineEOLSet__init_0($this.$consCount0);
                                    break a;
                                }
                                if (jur_Pattern_hasFlag($this, 1)) {
                                    $term = jur_UEOLSet__init_0($this.$consCount0);
                                    break a;
                                }
                                $term = jur_EOLSet__init_0($this.$consCount0);
                                break a;
                            case -536870866:
                                $this.$lexemes.$next0();
                                if (jur_Pattern_hasFlag($this, 32)) {
                                    $term = jur_DotAllSet__init_0();
                                    break a;
                                }
                                $term = jur_DotSet__init_0(jur_AbstractLineTerminator_getInstance($this.$flags));
                                break a;
                            case -536870821:
                                $this.$lexemes.$next0();
                                $negative = 0;
                                if ($this.$lexemes.$peek0() == (-536870818)) {
                                    $negative = 1;
                                    $this.$lexemes.$next0();
                                }
                                $term = jur_Pattern_processRange($this, $negative, $last);
                                if ($this.$lexemes.$peek0() != (-536870819))
                                    $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$lexemes.$toString(), $this.$lexemes.$getIndex()));
                                $this.$lexemes.$setMode(1);
                                $this.$lexemes.$next0();
                                break a;
                            case -536870818:
                                $this.$lexemes.$next0();
                                $this.$consCount0 = $this.$consCount0 + 1 | 0;
                                if (!jur_Pattern_hasFlag($this, 8)) {
                                    $term = jur_SOLSet__init_0();
                                    break a;
                                }
                                $term = jur_MultiLineSOLSet__init_0(jur_AbstractLineTerminator_getInstance($this.$flags));
                                break a;
                            case 0:
                                $cc = $this.$lexemes.$peekSpecial();
                                if ($cc !== null)
                                    $term = jur_Pattern_processRangeSet($this, $cc);
                                else {
                                    if ($this.$lexemes.$isEmpty()) {
                                        $term = jur_EmptySet__init_($last);
                                        break a;
                                    }
                                    $term = jur_CharSet__init_($ch & 65535);
                                }
                                $this.$lexemes.$next0();
                                break a;
                            default:
                                break b;
                        }
                        $this.$lexemes.$next0();
                        $term = jur_SOLSet__init_0();
                        break a;
                    }
                    $number = ($ch & 2147483647) - 48 | 0;
                    if ($this.$globalGroupIndex < $number)
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$lexemes.$toString(), $this.$lexemes.$getIndex()));
                    $this.$lexemes.$next0();
                    $this.$consCount0 = $this.$consCount0 + 1 | 0;
                    $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_0($number, $this.$consCount0) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_0($number, $this.$consCount0) : jur_CIBackReferenceSet__init_0($number, $this.$consCount0);
                    $this.$backRefs.data[$number].$isBackReferenced = 1;
                    $this.$needsBackRefReplacement = 1;
                    break a;
                }
                if ($ch >= 0 && !$this.$lexemes.$isSpecial()) {
                    $term = jur_Pattern_processCharSet($this, $ch);
                    $this.$lexemes.$next0();
                } else if ($ch == (-536870788))
                    $term = jur_EmptySet__init_($last);
                else {
                    if ($ch != (-536870871)) {
                        var$9 = new jur_PatternSyntaxException;
                        var$10 = !$this.$lexemes.$isSpecial() ? jl_Character_toString($ch & 65535) : ($this.$lexemes.$peekSpecial()).$toString();
                        var$11 = $this.$lexemes;
                        jur_PatternSyntaxException__init_0(var$9, var$10, var$11.$toString(), $this.$lexemes.$getIndex());
                        $rt_throw(var$9);
                    }
                    if ($last instanceof jur_FinalSet)
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$lexemes.$toString(), $this.$lexemes.$getIndex()));
                    $term = jur_EmptySet__init_($last);
                }
            }
        }
        if ($ch != (-16777176))
            break;
    }
    return $term;
},
jur_Pattern_processRange = ($this, $negative, $last) => {
    let $res, $rangeSet;
    $res = jur_Pattern_processRangeExpression($this, $negative);
    $rangeSet = jur_Pattern_processRangeSet($this, $res);
    $rangeSet.$setNext($last);
    return $rangeSet;
},
jur_Pattern_processRangeExpression = ($this, $alt) => {
    let $res, $buffer, $intersection, $notClosed, $firstInClass, var$7, $cur, $negative, $cs, $$je;
    $res = jur_CharClass__init_3($alt, jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
    $buffer = (-1);
    $intersection = 0;
    $notClosed = 0;
    $firstInClass = 1;
    a: {
        b: {
            c: while (true) {
                if ($this.$lexemes.$isEmpty())
                    break a;
                $notClosed = $this.$lexemes.$peek0() == (-536870819) && !$firstInClass ? 0 : 1;
                if (!$notClosed)
                    break a;
                d: {
                    switch ($this.$lexemes.$peek0()) {
                        case -536870874:
                            if ($buffer >= 0)
                                $res.$add($buffer);
                            $buffer = $this.$lexemes.$next0();
                            if ($this.$lexemes.$peek0() != (-536870874)) {
                                $buffer = 38;
                                break d;
                            }
                            if ($this.$lexemes.$lookAhead() == (-536870821)) {
                                $this.$lexemes.$next0();
                                $intersection = 1;
                                $buffer = (-1);
                                break d;
                            }
                            $this.$lexemes.$next0();
                            if ($firstInClass) {
                                $res = jur_Pattern_processRangeExpression($this, 0);
                                break d;
                            }
                            if ($this.$lexemes.$peek0() == (-536870819))
                                break d;
                            $res.$intersection(jur_Pattern_processRangeExpression($this, 0));
                            break d;
                        case -536870867:
                            if (!$firstInClass && $this.$lexemes.$lookAhead() != (-536870819)) {
                                var$7 = $this.$lexemes;
                                if (var$7.$lookAhead() != (-536870821) && $buffer >= 0) {
                                    $this.$lexemes.$next0();
                                    $cur = $this.$lexemes.$peek0();
                                    if ($this.$lexemes.$isSpecial())
                                        break c;
                                    if ($cur < 0) {
                                        var$7 = $this.$lexemes;
                                        if (var$7.$lookAhead() != (-536870819)) {
                                            var$7 = $this.$lexemes;
                                            if (var$7.$lookAhead() != (-536870821) && $buffer >= 0)
                                                break c;
                                        }
                                    }
                                    e: {
                                        try {
                                            if (jur_Lexer_isLetter($cur))
                                                break e;
                                            $cur = $cur & 65535;
                                            break e;
                                        } catch ($$e) {
                                            $$je = $rt_wrapException($$e);
                                            if ($$je instanceof jl_Exception) {
                                                break b;
                                            } else {
                                                throw $$e;
                                            }
                                        }
                                    }
                                    try {
                                        $res.$add0($buffer, $cur);
                                    } catch ($$e) {
                                        $$je = $rt_wrapException($$e);
                                        if ($$je instanceof jl_Exception) {
                                            break b;
                                        } else {
                                            throw $$e;
                                        }
                                    }
                                    $this.$lexemes.$next0();
                                    $buffer = (-1);
                                    break d;
                                }
                            }
                            if ($buffer >= 0)
                                $res.$add($buffer);
                            $buffer = 45;
                            $this.$lexemes.$next0();
                            break d;
                        case -536870821:
                            if ($buffer >= 0) {
                                $res.$add($buffer);
                                $buffer = (-1);
                            }
                            $this.$lexemes.$next0();
                            $negative = 0;
                            if ($this.$lexemes.$peek0() == (-536870818)) {
                                $this.$lexemes.$next0();
                                $negative = 1;
                            }
                            if (!$intersection)
                                $res.$union(jur_Pattern_processRangeExpression($this, $negative));
                            else
                                $res.$intersection(jur_Pattern_processRangeExpression($this, $negative));
                            $intersection = 0;
                            $this.$lexemes.$next0();
                            break d;
                        case -536870819:
                            if ($buffer >= 0)
                                $res.$add($buffer);
                            $buffer = 93;
                            $this.$lexemes.$next0();
                            break d;
                        case -536870818:
                            if ($buffer >= 0)
                                $res.$add($buffer);
                            $buffer = 94;
                            $this.$lexemes.$next0();
                            break d;
                        case 0:
                            if ($buffer >= 0)
                                $res.$add($buffer);
                            $cs = $this.$lexemes.$peekSpecial();
                            if ($cs === null)
                                $buffer = 0;
                            else {
                                $res.$add7($cs);
                                $buffer = (-1);
                            }
                            $this.$lexemes.$next0();
                            break d;
                        default:
                    }
                    if ($buffer >= 0)
                        $res.$add($buffer);
                    $buffer = $this.$lexemes.$next0();
                }
                $firstInClass = 0;
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), jur_Pattern_pattern($this), $this.$lexemes.$getIndex()));
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), jur_Pattern_pattern($this), $this.$lexemes.$getIndex()));
    }
    if (!$notClosed) {
        if ($buffer >= 0)
            $res.$add($buffer);
        return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), jur_Pattern_pattern($this), $this.$lexemes.$getIndex() - 1 | 0));
},
jur_Pattern_processCharSet = ($this, $ch) => {
    let $isSupplCodePoint;
    $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
    if (jur_Pattern_hasFlag($this, 2)) {
        a: {
            if (!($ch >= 97 && $ch <= 122)) {
                if ($ch < 65)
                    break a;
                if ($ch > 90)
                    break a;
            }
            return jur_CICharSet__init_($ch & 65535);
        }
        if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
            if ($isSupplCodePoint)
                return jur_UCISupplCharSet__init_0($ch);
            if (jur_Lexer_isLowSurrogate($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate($ch))
                return jur_UCICharSet__init_0($ch & 65535);
            return jur_HighSurrogateCharSet__init_0($ch & 65535);
        }
    }
    if ($isSupplCodePoint)
        return jur_SupplCharSet__init_0($ch);
    if (jur_Lexer_isLowSurrogate($ch))
        return jur_LowSurrogateCharSet__init_($ch & 65535);
    if (!jur_Lexer_isHighSurrogate($ch))
        return jur_CharSet__init_($ch & 65535);
    return jur_HighSurrogateCharSet__init_0($ch & 65535);
},
jur_Pattern_processRangeSet = ($this, $charClass) => {
    let $surrogates, $lowHighSurrRangeSet;
    if (!$charClass.$hasLowHighSurrogates()) {
        if (!$charClass.$mayContainSupplCodepoints()) {
            if ($charClass.$hasUCI())
                return jur_UCIRangeSet__init_0($charClass);
            return jur_RangeSet__init_0($charClass);
        }
        if ($charClass.$hasUCI())
            return jur_UCISupplRangeSet__init_($charClass);
        return jur_SupplRangeSet__init_0($charClass);
    }
    $surrogates = $charClass.$getSurrogates();
    $lowHighSurrRangeSet = jur_LowHighSurrogateRangeSet__init_0($surrogates);
    if (!$charClass.$mayContainSupplCodepoints()) {
        if ($charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_0($charClass.$getWithoutSurrogates()), $lowHighSurrRangeSet);
        return jur_CompositeRangeSet__init_(jur_RangeSet__init_0($charClass.$getWithoutSurrogates()), $lowHighSurrRangeSet);
    }
    if ($charClass.$hasUCI())
        return jur_CompositeRangeSet__init_(jur_UCISupplRangeSet__init_($charClass.$getWithoutSurrogates()), $lowHighSurrRangeSet);
    return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_0($charClass.$getWithoutSurrogates()), $lowHighSurrRangeSet);
},
jur_Pattern_compile = $pattern => {
    return jur_Pattern_compile0($pattern, 0);
},
jur_Pattern_finalizeCompile = $this => {
    if ($this.$needsBackRefReplacement)
        $this.$start1.$processSecondPass();
},
jur_Pattern_quote = $s => {
    let $sb, $apos, var$4, $apos_0;
    $sb = (jl_StringBuilder__init_()).$append4($rt_s(490));
    $apos = 0;
    while (true) {
        var$4 = $s.$indexOf2($rt_s(491), $apos);
        if (var$4 < 0)
            break;
        $apos_0 = var$4 + 2 | 0;
        ($sb.$append4($s.$substring($apos, $apos_0))).$append4($rt_s(492));
        $apos = $apos_0;
    }
    return (($sb.$append4($s.$substring0($apos))).$append4($rt_s(491))).$toString();
},
jur_Pattern_groupCount = $this => {
    return $this.$globalGroupIndex;
},
jur_Pattern_compCount = $this => {
    return $this.$compCount0 + 1 | 0;
},
jur_Pattern_consCount = $this => {
    return $this.$consCount0 + 1 | 0;
},
jur_Pattern_getSupplement = $ch => {
    if ($ch >= 97 && $ch <= 122)
        $ch = ($ch - 32 | 0) & 65535;
    else if ($ch >= 65 && $ch <= 90)
        $ch = ($ch + 32 | 0) & 65535;
    return $ch;
},
jur_Pattern_hasFlag = ($this, $flag) => {
    return ($this.$flags & $flag) != $flag ? 0 : 1;
},
jur_Pattern__init_ = $this => {
    jl_Object__init_($this);
    $this.$backRefs = $rt_createArray(jur_FSet, 10);
    $this.$globalGroupIndex = (-1);
    $this.$compCount0 = (-1);
    $this.$consCount0 = (-1);
},
jur_Pattern__init_0 = () => {
    let var_0 = new jur_Pattern();
    jur_Pattern__init_(var_0);
    return var_0;
},
oc_Link$HighwayType = $rt_classWithoutFields(jl_Enum),
oc_Link$HighwayType_TRUNK = null,
oc_Link$HighwayType_PRIMARY = null,
oc_Link$HighwayType_SECONDARY = null,
oc_Link$HighwayType_TERTIARY = null,
oc_Link$HighwayType_RESIDENTIAL_ACCESS = null,
oc_Link$HighwayType_OTHER = null,
oc_Link$HighwayType_NOT_SET = null,
oc_Link$HighwayType_$VALUES = null,
oc_Link$HighwayType_$callClinit = () => {
    oc_Link$HighwayType_$callClinit = $rt_eraseClinit(oc_Link$HighwayType);
    oc_Link$HighwayType__clinit_();
},
oc_Link$HighwayType__init_0 = ($this, var$1, var$2) => {
    oc_Link$HighwayType_$callClinit();
    jl_Enum__init_($this, var$1, var$2);
},
oc_Link$HighwayType__init_ = (var_0, var_1) => {
    let var_2 = new oc_Link$HighwayType();
    oc_Link$HighwayType__init_0(var_2, var_0, var_1);
    return var_2;
},
oc_Link$HighwayType_$values = () => {
    let var$1, var$2;
    oc_Link$HighwayType_$callClinit();
    var$1 = $rt_createArray(oc_Link$HighwayType, 7);
    var$2 = var$1.data;
    var$2[0] = oc_Link$HighwayType_TRUNK;
    var$2[1] = oc_Link$HighwayType_PRIMARY;
    var$2[2] = oc_Link$HighwayType_SECONDARY;
    var$2[3] = oc_Link$HighwayType_TERTIARY;
    var$2[4] = oc_Link$HighwayType_RESIDENTIAL_ACCESS;
    var$2[5] = oc_Link$HighwayType_OTHER;
    var$2[6] = oc_Link$HighwayType_NOT_SET;
    return var$1;
},
oc_Link$HighwayType__clinit_ = () => {
    oc_Link$HighwayType_TRUNK = oc_Link$HighwayType__init_($rt_s(493), 0);
    oc_Link$HighwayType_PRIMARY = oc_Link$HighwayType__init_($rt_s(494), 1);
    oc_Link$HighwayType_SECONDARY = oc_Link$HighwayType__init_($rt_s(495), 2);
    oc_Link$HighwayType_TERTIARY = oc_Link$HighwayType__init_($rt_s(496), 3);
    oc_Link$HighwayType_RESIDENTIAL_ACCESS = oc_Link$HighwayType__init_($rt_s(497), 4);
    oc_Link$HighwayType_OTHER = oc_Link$HighwayType__init_($rt_s(445), 5);
    oc_Link$HighwayType_NOT_SET = oc_Link$HighwayType__init_($rt_s(446), 6);
    oc_Link$HighwayType_$VALUES = oc_Link$HighwayType_$values();
},
jur_PosAltGroupQuantifierSet = $rt_classWithoutFields(jur_AltGroupQuantifierSet),
jur_PosAltGroupQuantifierSet__init_ = ($this, $innerSet, $next, $type) => {
    jur_AltGroupQuantifierSet__init_($this, $innerSet, $next, $type);
    jur_FSet_$callClinit();
    $innerSet.$setNext(jur_FSet_posFSet);
},
jur_PosAltGroupQuantifierSet__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new jur_PosAltGroupQuantifierSet();
    jur_PosAltGroupQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_PosAltGroupQuantifierSet_matches = ($this, $stringIndex, $testString, $matchResult) => {
    let $nextIndex;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex <= 0)
        $nextIndex = $stringIndex;
    return $this.$next2.$matches($nextIndex, $testString, $matchResult);
},
jur_PosAltGroupQuantifierSet_setNext = ($this, $next) => {
    $this.$next2 = $next;
};
function ou_SimpleLogger() {
    jl_Object.call(this);
    this.$name = null;
}
let ou_SimpleLogger__init_0 = ($this, $name) => {
    jl_Object__init_($this);
    $this.$name = $name;
},
ou_SimpleLogger__init_ = var_0 => {
    let var_1 = new ou_SimpleLogger();
    ou_SimpleLogger__init_0(var_1, var_0);
    return var_1;
},
ou_SimpleLogger_getLogger = $clazz => {
    return ou_SimpleLogger__init_(jl_Class_getSimpleName($clazz));
},
ou_SimpleLogger_debug = ($this, $message) => {
    (jl_System_out()).$println1((((((jl_StringBuilder__init_()).$append4($rt_s(498))).$append4($this.$name)).$append4($rt_s(499))).$append4($message)).$toString());
},
ou_SimpleLogger_info = ($this, $message) => {
    (jl_System_out()).$println1((((((jl_StringBuilder__init_()).$append4($rt_s(500))).$append4($this.$name)).$append4($rt_s(499))).$append4($message)).$toString());
},
ou_SimpleLogger_warn = ($this, $message) => {
    (jl_System_out()).$println1((((((jl_StringBuilder__init_()).$append4($rt_s(501))).$append4($this.$name)).$append4($rt_s(499))).$append4($message)).$toString());
},
ou_SimpleLogger_error0 = ($this, $message) => {
    (jl_System_err()).$println1((((((jl_StringBuilder__init_()).$append4($rt_s(502))).$append4($this.$name)).$append4($rt_s(499))).$append4($message)).$toString());
},
ou_SimpleLogger_error = ($this, $message, $throwable) => {
    (jl_System_err()).$println1((((((jl_StringBuilder__init_()).$append4($rt_s(502))).$append4($this.$name)).$append4($rt_s(499))).$append4($message)).$toString());
    if ($throwable !== null)
        $throwable.$printStackTrace(jl_System_err());
};
function ovi_WindyVertex() {
    let a = this; oc_Vertex.call(a);
    a.$degree0 = 0;
    a.$neighbors2 = null;
}
let ovi_WindyVertex__init_0 = ($this, $label) => {
    oc_Vertex__init_($this, $label);
    $this.$neighbors2 = ju_HashMap__init_();
    $this.$setDegree(0);
},
ovi_WindyVertex__init_ = var_0 => {
    let var_1 = new ovi_WindyVertex();
    ovi_WindyVertex__init_0(var_1, var_0);
    return var_1;
},
ovi_WindyVertex_addToNeighbors = ($this, $v, $e) => {
    if (!(($e.$getEndpoints()).$getFirst() !== $this && ($e.$getEndpoints()).$getSecond() !== $this) && !(($e.$getEndpoints()).$getFirst() !== $v && ($e.$getEndpoints()).$getSecond() !== $v) && $this.$getGraphId() == $v.$getGraphId()) {
        if (!$this.$neighbors2.$containsKey($v))
            $this.$neighbors2.$put($v, ju_ArrayList__init_());
        ($this.$neighbors2.$get1($v)).$add2($e);
        return;
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ovi_WindyVertex_getDegree = $this => {
    return $this.$degree0;
},
ovi_WindyVertex_setDegree = ($this, $degree) => {
    $this.$degree0 = $degree;
},
ovi_WindyVertex_getNeighbors = $this => {
    return $this.$neighbors2;
},
ovi_WindyVertex_getNeighbors0 = $this => {
    return $this.$getNeighbors0();
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function ju_HashMap() {
    let a = this; ju_AbstractMap.call(a);
    a.$elementCount = 0;
    a.$elementData = null;
    a.$modCount0 = 0;
    a.$loadFactor = 0.0;
    a.$threshold = 0;
}
let ju_HashMap_newElementArray = ($this, $s) => {
    return $rt_createArray(ju_HashMap$HashEntry, $s);
},
ju_HashMap__init_2 = $this => {
    ju_HashMap__init_0($this, 16);
},
ju_HashMap__init_ = () => {
    let var_0 = new ju_HashMap();
    ju_HashMap__init_2(var_0);
    return var_0;
},
ju_HashMap__init_0 = ($this, $capacity) => {
    ju_HashMap__init_1($this, $capacity, 0.75);
},
ju_HashMap__init_3 = var_0 => {
    let var_1 = new ju_HashMap();
    ju_HashMap__init_0(var_1, var_0);
    return var_1;
},
ju_HashMap_calculateCapacity = $x => {
    let var$2, var$3;
    if ($x >= 1073741824)
        return 1073741824;
    if (!$x)
        return 16;
    var$2 = $x - 1 | 0;
    var$3 = var$2 | var$2 >> 1;
    var$3 = var$3 | var$3 >> 2;
    var$3 = var$3 | var$3 >> 4;
    var$3 = var$3 | var$3 >> 8;
    var$3 = var$3 | var$3 >> 16;
    return var$3 + 1 | 0;
},
ju_HashMap__init_1 = ($this, $capacity, $loadFactor) => {
    let var$3;
    ju_AbstractMap__init_($this);
    if ($capacity >= 0 && $loadFactor > 0.0) {
        var$3 = ju_HashMap_calculateCapacity($capacity);
        $this.$elementCount = 0;
        $this.$elementData = $this.$newElementArray(var$3);
        $this.$loadFactor = $loadFactor;
        ju_HashMap_computeThreshold($this);
        return;
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ju_HashMap__init_4 = (var_0, var_1) => {
    let var_2 = new ju_HashMap();
    ju_HashMap__init_1(var_2, var_0, var_1);
    return var_2;
},
ju_HashMap_clear = $this => {
    if ($this.$elementCount > 0) {
        $this.$elementCount = 0;
        ju_Arrays_fill4($this.$elementData, null);
        $this.$modCount0 = $this.$modCount0 + 1 | 0;
    }
},
ju_HashMap_computeThreshold = $this => {
    $this.$threshold = $this.$elementData.data.length * $this.$loadFactor | 0;
},
ju_HashMap_containsKey = ($this, $key) => {
    let $m;
    $m = ju_HashMap_entryByKey($this, $key);
    return $m === null ? 0 : 1;
},
ju_HashMap_entrySet = $this => {
    return ju_HashMap$HashMapEntrySet__init_0($this);
},
ju_HashMap_get = ($this, $key) => {
    let $m;
    $m = ju_HashMap_entryByKey($this, $key);
    if ($m === null)
        return null;
    return $m.$value;
},
ju_HashMap_entryByKey = ($this, $key) => {
    let $m, $hash, $index;
    if ($key === null)
        $m = ju_HashMap_findNullKeyEntry($this);
    else {
        $hash = $key.$hashCode0();
        $index = $hash & ($this.$elementData.data.length - 1 | 0);
        $m = ju_HashMap_findNonNullKeyEntry($this, $key, $index, $hash);
    }
    return $m;
},
ju_HashMap_findNonNullKeyEntry = ($this, $key, $index, $keyHash) => {
    let $m;
    $m = $this.$elementData.data[$index];
    while ($m !== null && !($m.$origKeyHash == $keyHash && ju_HashMap_areEqualKeys($key, $m.$key))) {
        $m = $m.$next3;
    }
    return $m;
},
ju_HashMap_findNullKeyEntry = $this => {
    let $m;
    $m = $this.$elementData.data[0];
    while ($m !== null && $m.$key !== null) {
        $m = $m.$next3;
    }
    return $m;
},
ju_HashMap_keySet = $this => {
    if ($this.$cachedKeySet === null)
        $this.$cachedKeySet = ju_HashMap$1__init_0($this);
    return $this.$cachedKeySet;
},
ju_HashMap_put = ($this, $key, $value) => {
    return ju_HashMap_putImpl($this, $key, $value);
},
ju_HashMap_putImpl = ($this, $key, $value) => {
    let $entry, var$4, $hash, $index, $result;
    if ($key === null) {
        $entry = ju_HashMap_findNullKeyEntry($this);
        if ($entry === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            $entry = ju_HashMap_createHashedEntry($this, null, 0, 0);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold)
                $this.$rehash0();
        }
    } else {
        $hash = $key.$hashCode0();
        $index = $hash & ($this.$elementData.data.length - 1 | 0);
        $entry = ju_HashMap_findNonNullKeyEntry($this, $key, $index, $hash);
        if ($entry === null) {
            $this.$modCount0 = $this.$modCount0 + 1 | 0;
            $entry = ju_HashMap_createHashedEntry($this, $key, $index, $hash);
            var$4 = $this.$elementCount + 1 | 0;
            $this.$elementCount = var$4;
            if (var$4 > $this.$threshold)
                $this.$rehash0();
        }
    }
    $result = $entry.$value;
    $entry.$value = $value;
    return $result;
},
ju_HashMap_createHashedEntry = ($this, $key, $index, $hash) => {
    let $entry;
    $entry = ju_HashMap$HashEntry__init_0($key, $hash);
    $entry.$next3 = $this.$elementData.data[$index];
    $this.$elementData.data[$index] = $entry;
    return $entry;
},
ju_HashMap_rehash0 = ($this, $capacity) => {
    let $length, $newData, $i, $entry, var$6, $index, $next;
    $length = ju_HashMap_calculateCapacity(!$capacity ? 1 : $capacity << 1);
    $newData = $this.$newElementArray($length);
    $i = 0;
    while ($i < $this.$elementData.data.length) {
        $entry = $this.$elementData.data[$i];
        $this.$elementData.data[$i] = null;
        while ($entry !== null) {
            var$6 = $newData.data;
            $index = $entry.$origKeyHash & ($length - 1 | 0);
            $next = $entry.$next3;
            $entry.$next3 = var$6[$index];
            var$6[$index] = $entry;
            $entry = $next;
        }
        $i = $i + 1 | 0;
    }
    $this.$elementData = $newData;
    ju_HashMap_computeThreshold($this);
},
ju_HashMap_rehash = $this => {
    $this.$rehash($this.$elementData.data.length);
},
ju_HashMap_remove = ($this, $key) => {
    let $entry;
    $entry = ju_HashMap_removeByKey($this, $key);
    if ($entry === null)
        return null;
    return $entry.$value;
},
ju_HashMap_removeByKey = ($this, $key) => {
    let $index, $last, $entry, $entry_0, $hash;
    a: {
        $index = 0;
        $last = null;
        if ($key === null) {
            $entry = $this.$elementData.data[0];
            while ($entry !== null) {
                if ($entry.$key === null)
                    break a;
                $entry_0 = $entry.$next3;
                $last = $entry;
                $entry = $entry_0;
            }
        } else {
            $hash = $key.$hashCode0();
            $index = $hash & ($this.$elementData.data.length - 1 | 0);
            $entry = $this.$elementData.data[$index];
            while ($entry !== null && !($entry.$origKeyHash == $hash && ju_HashMap_areEqualKeys($key, $entry.$key))) {
                $entry_0 = $entry.$next3;
                $last = $entry;
                $entry = $entry_0;
            }
        }
    }
    if ($entry === null)
        return null;
    if ($last !== null)
        $last.$next3 = $entry.$next3;
    else
        $this.$elementData.data[$index] = $entry.$next3;
    $this.$modCount0 = $this.$modCount0 + 1 | 0;
    $this.$elementCount = $this.$elementCount - 1 | 0;
    return $entry;
},
ju_HashMap_size = $this => {
    return $this.$elementCount;
},
ju_HashMap_values = $this => {
    if ($this.$cachedValues === null)
        $this.$cachedValues = ju_HashMap$2__init_0($this);
    return $this.$cachedValues;
},
ju_HashMap_areEqualKeys = ($key1, $key2) => {
    return $key1 !== $key2 && !$key1.$equals($key2) ? 0 : 1;
};
function jur_UMultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter2 = 0;
}
let jur_UMultiLineEOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter2 = $counter;
},
jur_UMultiLineEOLSet__init_0 = var_0 => {
    let var_1 = new jur_UMultiLineEOLSet();
    jur_UMultiLineEOLSet__init_(var_1, var_0);
    return var_1;
},
jur_UMultiLineEOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $strDif;
    $strDif = !$matchResult.$hasAnchoringBounds() ? $testString.$length() - $strIndex | 0 : $matchResult.$getRightBound() - $strIndex | 0;
    if ($strDif <= 0) {
        $matchResult.$setConsumed($this.$consCounter2, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    if ($testString.$charAt($strIndex) != 10)
        return (-1);
    $matchResult.$setConsumed($this.$consCounter2, 1);
    return $this.$next2.$matches($strIndex + 1 | 0, $testString, $matchResult);
},
jur_UMultiLineEOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !$matchResult.$getConsumed($this.$consCounter2) ? 0 : 1;
    $matchResult.$setConsumed($this.$consCounter2, (-1));
    return $res;
},
jur_UMultiLineEOLSet_getName = $this => {
    return $rt_s(503);
};
function ovi_DirectedVertex() {
    let a = this; oc_Vertex.call(a);
    a.$inDegree = 0;
    a.$outDegree = 0;
    a.$neighbors0 = null;
}
let ovi_DirectedVertex__init_0 = ($this, $label) => {
    oc_Vertex__init_($this, $label);
    $this.$setInDegree(0);
    $this.$setOutDegree(0);
    $this.$neighbors0 = ju_HashMap__init_();
},
ovi_DirectedVertex__init_ = var_0 => {
    let var_1 = new ovi_DirectedVertex();
    ovi_DirectedVertex__init_0(var_1, var_0);
    return var_1;
},
ovi_DirectedVertex_addToNeighbors = ($this, $v, $a) => {
    if ($a.$getTail() === $this && $a.$getHead() === $v && $this.$getGraphId() == $v.$getGraphId()) {
        if (!$this.$neighbors0.$containsKey($v))
            $this.$neighbors0.$put($v, ju_ArrayList__init_());
        ($this.$neighbors0.$get1($v)).$add2($a);
        return;
    }
    $rt_throw(jl_IllegalArgumentException__init_());
},
ovi_DirectedVertex_removeFromNeighbors = ($this, $v, $a) => {
    if ($this.$neighbors0.$containsKey($v) && ($this.$neighbors0.$get1($v)).$contains0($a)) {
        ($this.$neighbors0.$get1($v)).$remove0($a);
        if (!($this.$neighbors0.$get1($v)).$size())
            $this.$neighbors0.$remove1($v);
        return 1;
    }
    return 0;
},
ovi_DirectedVertex_getInDegree = $this => {
    return $this.$inDegree;
},
ovi_DirectedVertex_setInDegree = ($this, $inDegree) => {
    $this.$inDegree = $inDegree;
},
ovi_DirectedVertex_getOutDegree = $this => {
    return $this.$outDegree;
},
ovi_DirectedVertex_setOutDegree = ($this, $outDegree) => {
    $this.$outDegree = $outDegree;
},
ovi_DirectedVertex_getDelta = $this => {
    return $this.$inDegree - $this.$outDegree | 0;
},
ovi_DirectedVertex_getNeighbors0 = $this => {
    return $this.$neighbors0;
},
ovi_DirectedVertex_getNeighbors = $this => {
    return $this.$getNeighbors0();
},
jur_AbstractCharClass$LazyJavaLetterOrDigit = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
    jur_AbstractCharClass$LazyJavaLetterOrDigit__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaLetterOrDigit$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function otciu_UnicodeHelper$Range() {
    let a = this; jl_Object.call(a);
    a.$start2 = 0;
    a.$end1 = 0;
    a.$data1 = null;
}
let otciu_UnicodeHelper$Range__init_ = ($this, $start, $end, $data) => {
    jl_Object__init_($this);
    $this.$start2 = $start;
    $this.$end1 = $end;
    $this.$data1 = $data;
},
otciu_UnicodeHelper$Range__init_0 = (var_0, var_1, var_2) => {
    let var_3 = new otciu_UnicodeHelper$Range();
    otciu_UnicodeHelper$Range__init_(var_3, var_0, var_1, var_2);
    return var_3;
},
otcit_DoubleAnalyzer = $rt_classWithoutFields(),
otcit_DoubleAnalyzer_MAX_MANTISSA = Long_ZERO,
otcit_DoubleAnalyzer_resultForLog10 = null,
otcit_DoubleAnalyzer_mantissa10Table = null,
otcit_DoubleAnalyzer_exp10Table = null,
otcit_DoubleAnalyzer_$callClinit = () => {
    otcit_DoubleAnalyzer_$callClinit = $rt_eraseClinit(otcit_DoubleAnalyzer);
    otcit_DoubleAnalyzer__clinit_();
},
otcit_DoubleAnalyzer_analyze = ($d, $result) => {
    let $bits, $mantissa, $exponent, var$6, $decExponent, var$8, var$9, $binExponentCorrection, $mantissaShift, $decMantissa, var$13, var$14, var$15, $decMantissaHi, $decMantissaLow, $lowerPos, $upperPos, $posCmp;
    otcit_DoubleAnalyzer_$callClinit();
    $bits = jl_Double_doubleToLongBits($d);
    $result.$sign = Long_eq(Long_and($bits, Long_create(0, 2147483648)), Long_ZERO) ? 0 : 1;
    $mantissa = Long_and($bits, Long_create(4294967295, 1048575));
    $exponent = Long_lo(Long_shr($bits, 52)) & 2047;
    if (Long_eq($mantissa, Long_ZERO) && !$exponent) {
        $result.$mantissa = Long_ZERO;
        $result.$exponent = 0;
        return;
    }
    if ($exponent)
        var$6 = Long_or($mantissa, Long_create(0, 1048576));
    else {
        var$6 = Long_shl($mantissa, 1);
        while (Long_eq(Long_and(var$6, Long_create(0, 1048576)), Long_ZERO)) {
            var$6 = Long_shl(var$6, 1);
            $exponent = $exponent + (-1) | 0;
        }
    }
    $decExponent = ju_Arrays_binarySearch0(otcit_DoubleAnalyzer_exp10Table, $exponent << 16 >> 16);
    if ($decExponent < 0)
        $decExponent =  -$decExponent | 0;
    var$8 = otcit_DoubleAnalyzer_exp10Table.data;
    var$9 = $decExponent + 1 | 0;
    $binExponentCorrection = $exponent - var$8[var$9] | 0;
    $mantissaShift = 12 + $binExponentCorrection | 0;
    $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight(var$6, otcit_DoubleAnalyzer_mantissa10Table.data[var$9], $mantissaShift);
    if (Long_le($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA)) {
        while (jl_Long_compareUnsigned($decMantissa, otcit_DoubleAnalyzer_MAX_MANTISSA) <= 0) {
            $decExponent = $decExponent + (-1) | 0;
            $decMantissa = Long_add(Long_mul($decMantissa, Long_fromInt(10)), Long_fromInt(9));
        }
        var$8 = otcit_DoubleAnalyzer_exp10Table.data;
        var$9 = $decExponent + 1 | 0;
        var$13 = $exponent - var$8[var$9] | 0;
        $mantissaShift = 12 + var$13 | 0;
        $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight(var$6, otcit_DoubleAnalyzer_mantissa10Table.data[var$9], $mantissaShift);
    }
    var$14 = Long_shl(var$6, 1);
    var$6 = Long_add(var$14, Long_fromInt(1));
    var$8 = otcit_DoubleAnalyzer_mantissa10Table.data;
    var$13 = $decExponent + 1 | 0;
    var$15 = var$8[var$13];
    var$9 = $mantissaShift - 1 | 0;
    $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight(var$6, var$15, var$9);
    $decMantissaLow = otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub(var$14, Long_fromInt(1)), otcit_DoubleAnalyzer_mantissa10Table.data[var$13], var$9);
    $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, $decMantissaLow);
    $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
    $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
    var$6 = $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
    if (jl_Long_compareUnsigned(var$6, Long_create(2808348672, 232830643)) >= 0)
        while (true) {
            $decExponent = $decExponent + 1 | 0;
            var$6 = jl_Long_divideUnsigned(var$6, Long_fromInt(10));
            if (jl_Long_compareUnsigned(var$6, Long_create(2808348672, 232830643)) < 0)
                break;
        }
    else if (jl_Long_compareUnsigned(var$6, Long_create(1569325056, 23283064)) < 0) {
        $decExponent = $decExponent + (-1) | 0;
        var$6 = Long_mul(var$6, Long_fromInt(10));
    }
    $result.$mantissa = var$6;
    $result.$exponent = $decExponent - 330 | 0;
},
otcit_DoubleAnalyzer_findLowerDistance = ($mantissa, $lower) => {
    let $pos, $pos_0, var$5, var$6;
    otcit_DoubleAnalyzer_$callClinit();
    $pos = Long_fromInt(1);
    while (true) {
        $pos_0 = Long_mul($pos, Long_fromInt(10));
        var$5 = jl_Long_divideUnsigned($mantissa, $pos_0);
        var$6 = jl_Long_divideUnsigned($lower, $pos_0);
        if (jl_Long_compareUnsigned(var$5, var$6) <= 0)
            break;
        $pos = $pos_0;
    }
    return $pos;
},
otcit_DoubleAnalyzer_findUpperDistance = ($mantissa, $upper) => {
    let $pos, $pos_0, var$5, var$6;
    otcit_DoubleAnalyzer_$callClinit();
    $pos = Long_fromInt(1);
    while (true) {
        $pos_0 = Long_mul($pos, Long_fromInt(10));
        var$5 = jl_Long_divideUnsigned($mantissa, $pos_0);
        var$6 = jl_Long_divideUnsigned($upper, $pos_0);
        if (jl_Long_compareUnsigned(var$5, var$6) >= 0)
            break;
        $pos = $pos_0;
    }
    return $pos;
},
otcit_DoubleAnalyzer_mulAndShiftRight = ($a, $b, $shift) => {
    let $a1, $a2, $a3, $a4, $b1, $b2, $b3, $b4, $cm, $c0, $c1, $c2, $c3, $c, var$18;
    otcit_DoubleAnalyzer_$callClinit();
    $a1 = Long_and($a, Long_fromInt(65535));
    $a2 = Long_and(Long_shru($a, 16), Long_fromInt(65535));
    $a3 = Long_and(Long_shru($a, 32), Long_fromInt(65535));
    $a4 = Long_and(Long_shru($a, 48), Long_fromInt(65535));
    $b1 = Long_and($b, Long_fromInt(65535));
    $b2 = Long_and(Long_shru($b, 16), Long_fromInt(65535));
    $b3 = Long_and(Long_shru($b, 32), Long_fromInt(65535));
    $b4 = Long_and(Long_shru($b, 48), Long_fromInt(65535));
    $cm = Long_add(Long_add(Long_mul($b3, $a1), Long_mul($b2, $a2)), Long_mul($b1, $a3));
    $c0 = Long_add(Long_add(Long_add(Long_mul($b4, $a1), Long_mul($b3, $a2)), Long_mul($b2, $a3)), Long_mul($b1, $a4));
    $c1 = Long_add(Long_add(Long_mul($b4, $a2), Long_mul($b3, $a3)), Long_mul($b2, $a4));
    $c2 = Long_add(Long_mul($b4, $a3), Long_mul($b3, $a4));
    $c3 = Long_mul($b4, $a4);
    $c = Long_add(Long_add(Long_shl($c3, 32 + $shift | 0), Long_shl($c2, 16 + $shift | 0)), Long_shl($c1, $shift));
    var$18 = Long_add($cm, Long_shl($c0, 16));
    var$18 = Long_add($c, Long_shru(var$18, 32 - $shift | 0));
    return var$18;
},
otcit_DoubleAnalyzer__clinit_ = () => {
    otcit_DoubleAnalyzer_MAX_MANTISSA = jl_Long_divideUnsigned(Long_fromInt(-1), Long_fromInt(10));
    otcit_DoubleAnalyzer_resultForLog10 = otcit_DoubleAnalyzer$Result__init_();
    otcit_DoubleAnalyzer_mantissa10Table = $rt_createLongArrayFromData([Long_create(3251292512, 2194092222), Long_create(1766094183, 3510547556), Long_create(553881887, 2808438045), Long_create(443105509, 2246750436), Long_create(3285949193, 3594800697), Long_create(910772436, 2875840558), Long_create(2446604867, 2300672446), Long_create(2196580869, 3681075914), Long_create(2616258154, 2944860731), Long_create(1234013064, 2355888585), Long_create(1974420903, 3769421736), Long_create(720543263, 3015537389), Long_create(1435428070, 2412429911),
    Long_create(578697993, 3859887858), Long_create(2180945313, 3087910286), Long_create(885762791, 2470328229), Long_create(3135207384, 3952525166), Long_create(1649172448, 3162020133), Long_create(3037324877, 2529616106), Long_create(3141732885, 4047385770), Long_create(2513386308, 3237908616), Long_create(1151715587, 2590326893), Long_create(983751480, 4144523029), Long_create(1645994643, 3315618423), Long_create(3034782633, 2652494738), Long_create(3996658754, 4243991581), Long_create(2338333544, 3395193265),
    Long_create(1870666835, 2716154612), Long_create(4073513845, 2172923689), Long_create(3940641775, 3476677903), Long_create(575533043, 2781342323), Long_create(2178413352, 2225073858), Long_create(2626467905, 3560118173), Long_create(3819161242, 2848094538), Long_create(478348616, 2278475631), Long_create(3342338164, 3645561009), Long_create(3532863990, 2916448807), Long_create(1108304273, 2333159046), Long_create(55299919, 3733054474), Long_create(903233395, 2986443579), Long_create(1581580175, 2389154863),
    Long_create(1671534821, 3822647781), Long_create(478234397, 3058118225), Long_create(382587518, 2446494580), Long_create(612140029, 3914391328), Long_create(2207698941, 3131513062), Long_create(48172235, 2505210450), Long_create(77075576, 4008336720), Long_create(61660460, 3206669376), Long_create(3485302205, 2565335500), Long_create(1281516232, 4104536801), Long_create(166219527, 3283629441), Long_create(3568949458, 2626903552), Long_create(2274345296, 4203045684), Long_create(2678469696, 3362436547), Long_create(424788838, 2689949238),
    Long_create(2057817989, 2151959390), Long_create(3292508783, 3443135024), Long_create(3493000485, 2754508019), Long_create(3653393847, 2203606415), Long_create(1550462860, 3525770265), Long_create(1240370288, 2820616212), Long_create(3569276608, 2256492969), Long_create(3133862195, 3610388751), Long_create(1648096297, 2888311001), Long_create(459483578, 2310648801), Long_create(3312154103, 3697038081), Long_create(1790729823, 2957630465), Long_create(1432583858, 2366104372), Long_create(3151127633, 3785766995),
    Long_create(2520902106, 3028613596), Long_create(1157728226, 2422890877), Long_create(2711358621, 3876625403), Long_create(3887073815, 3101300322), Long_create(1391672133, 2481040258), Long_create(1367681954, 3969664413), Long_create(2812132482, 3175731530), Long_create(2249705985, 2540585224), Long_create(1022549199, 4064936359), Long_create(1677032818, 3251949087), Long_create(3918606632, 2601559269), Long_create(3692790234, 4162494831), Long_create(2095238728, 3329995865), Long_create(1676190982, 2663996692),
    Long_create(3540899031, 4262394707), Long_create(1114732307, 3409915766), Long_create(32792386, 2727932613), Long_create(1744220827, 2182346090), Long_create(2790753324, 3491753744), Long_create(3091596118, 2793402995), Long_create(2473276894, 2234722396), Long_create(2239256113, 3575555834), Long_create(2650398349, 2860444667), Long_create(402331761, 2288355734), Long_create(2361717736, 3661369174), Long_create(2748367648, 2929095339), Long_create(3057687578, 2343276271), Long_create(3174313206, 3749242034),
    Long_create(3398444024, 2999393627), Long_create(1000768301, 2399514902), Long_create(2460222741, 3839223843), Long_create(3686165111, 3071379074), Long_create(3807925548, 2457103259), Long_create(3515700499, 3931365215), Long_create(2812560399, 3145092172), Long_create(532061401, 2516073738), Long_create(4287272078, 4025717980), Long_create(3429817663, 3220574384), Long_create(3602847589, 2576459507), Long_create(2328582306, 4122335212), Long_create(144878926, 3297868170), Long_create(115903141, 2638294536),
    Long_create(2762425404, 4221271257), Long_create(491953404, 3377017006), Long_create(3829536560, 2701613604), Long_create(3922622707, 2161290883), Long_create(1122235577, 3458065414), Long_create(1756781920, 2766452331), Long_create(546432077, 2213161865), Long_create(874291324, 3541058984), Long_create(1558426518, 2832847187), Long_create(3823721592, 2266277749), Long_create(3540974170, 3626044399), Long_create(3691772795, 2900835519), Long_create(3812411695, 2320668415), Long_create(1804891416, 3713069465),
    Long_create(1443913133, 2970455572), Long_create(3732110884, 2376364457), Long_create(2535403578, 3802183132), Long_create(310335944, 3041746506), Long_create(3684242592, 2433397204), Long_create(3317807769, 3893435527), Long_create(936259297, 3114748422), Long_create(3325987815, 2491798737), Long_create(1885606668, 3986877980), Long_create(1508485334, 3189502384), Long_create(2065781726, 2551601907), Long_create(4164244222, 4082563051), Long_create(2472401918, 3266050441), Long_create(1118928075, 2612840353),
    Long_create(931291461, 4180544565), Long_create(745033169, 3344435652), Long_create(3173006913, 2675548521), Long_create(3358824142, 4280877634), Long_create(3546052773, 3424702107), Long_create(1118855300, 2739761686), Long_create(36090780, 2191809349), Long_create(1775732167, 3506894958), Long_create(3138572652, 2805515966), Long_create(1651864662, 2244412773), Long_create(1783990001, 3591060437), Long_create(4004172378, 2872848349), Long_create(4062331362, 2298278679), Long_create(3922749802, 3677245887),
    Long_create(1420212923, 2941796710), Long_create(1136170338, 2353437368), Long_create(958879082, 3765499789), Long_create(1626096725, 3012399831), Long_create(441883920, 2409919865), Long_create(707014273, 3855871784), Long_create(1424604878, 3084697427), Long_create(3716664280, 2467757941), Long_create(4228675929, 3948412706), Long_create(2523947284, 3158730165), Long_create(2019157827, 2526984132), Long_create(4089645983, 4043174611), Long_create(2412723327, 3234539689), Long_create(2789172121, 2587631751),
    Long_create(2744688475, 4140210802), Long_create(477763862, 3312168642), Long_create(2959191467, 2649734913), Long_create(3875712888, 4239575861), Long_create(2241576851, 3391660689), Long_create(2652254940, 2713328551), Long_create(1262810493, 2170662841), Long_create(302509870, 3473060546), Long_create(3677981733, 2778448436), Long_create(2083391927, 2222758749), Long_create(756446706, 3556413999), Long_create(1464150824, 2845131199), Long_create(2030314118, 2276104959), Long_create(671522212, 3641767935),
    Long_create(537217769, 2913414348), Long_create(2147761134, 2330731478), Long_create(2577424355, 3729170365), Long_create(2061939484, 2983336292), Long_create(4226531965, 2386669033), Long_create(1608490388, 3818670454), Long_create(2145785770, 3054936363), Long_create(3434615534, 2443949090), Long_create(1200417559, 3910318545), Long_create(960334047, 3128254836), Long_create(4204241074, 2502603868), Long_create(1572824964, 4004166190), Long_create(1258259971, 3203332952), Long_create(3583588354, 2562666361),
    Long_create(4015754449, 4100266178), Long_create(635623181, 3280212943), Long_create(2226485463, 2624170354), Long_create(985396364, 4198672567), Long_create(3365297469, 3358938053), Long_create(115257597, 2687150443), Long_create(1810192996, 2149720354), Long_create(319328417, 3439552567), Long_create(2832443111, 2751642053), Long_create(3983941407, 2201313642), Long_create(2938332415, 3522101828), Long_create(4068652850, 2817681462), Long_create(1536935362, 2254145170), Long_create(2459096579, 3606632272),
    Long_create(249290345, 2885305818), Long_create(1917419194, 2308244654), Long_create(490890333, 3693191447), Long_create(2969692644, 2954553157), Long_create(657767197, 2363642526), Long_create(3629407892, 3781828041), Long_create(2044532855, 3025462433), Long_create(3353613202, 2420369946), Long_create(3647794205, 3872591914), Long_create(3777228823, 3098073531), Long_create(2162789599, 2478458825), Long_create(3460463359, 3965534120), Long_create(2768370687, 3172427296), Long_create(1355703090, 2537941837),
    Long_create(3028118404, 4060706939), Long_create(3281488183, 3248565551), Long_create(1766197087, 2598852441), Long_create(1107928421, 4158163906), Long_create(27349277, 3326531125), Long_create(21879422, 2661224900), Long_create(35007075, 4257959840), Long_create(28005660, 3406367872), Long_create(2599384905, 2725094297), Long_create(361521006, 2180075438), Long_create(4014407446, 3488120700), Long_create(3211525957, 2790496560), Long_create(2569220766, 2232397248), Long_create(3251759766, 3571835597),
    Long_create(883420894, 2857468478), Long_create(2424723634, 2285974782), Long_create(443583977, 3657559652), Long_create(2931847559, 2926047721), Long_create(1486484588, 2340838177), Long_create(3237368801, 3745341083), Long_create(12914663, 2996272867), Long_create(2587312108, 2397018293), Long_create(3280705914, 3835229269), Long_create(3483558190, 3068183415), Long_create(2786846552, 2454546732), Long_create(1022980646, 3927274772), Long_create(3395364895, 3141819817), Long_create(998304997, 2513455854),
    Long_create(3315274914, 4021529366), Long_create(1793226472, 3217223493), Long_create(3152568096, 2573778794), Long_create(2467128576, 4118046071), Long_create(1114709402, 3294436857), Long_create(3468747899, 2635549485), Long_create(1255029343, 4216879177), Long_create(3581003852, 3373503341), Long_create(2005809622, 2698802673), Long_create(3322634616, 2159042138), Long_create(162254630, 3454467422), Long_create(2706784082, 2763573937), Long_create(447440347, 2210859150), Long_create(715904555, 3537374640),
    Long_create(572723644, 2829899712), Long_create(3035159293, 2263919769), Long_create(2279274491, 3622271631), Long_create(964426134, 2897817305), Long_create(771540907, 2318253844), Long_create(2952452370, 3709206150), Long_create(2361961896, 2967364920), Long_create(1889569516, 2373891936), Long_create(1305324308, 3798227098), Long_create(2762246365, 3038581678), Long_create(3927784010, 2430865342), Long_create(2848480580, 3889384548), Long_create(3996771382, 3111507638), Long_create(620436728, 2489206111),
    Long_create(3569679143, 3982729777), Long_create(1137756396, 3186183822), Long_create(3487185494, 2548947057), Long_create(2143522954, 4078315292), Long_create(4291798741, 3262652233), Long_create(856458615, 2610121787), Long_create(2229327243, 4176194859), Long_create(2642455254, 3340955887), Long_create(395977285, 2672764710), Long_create(633563656, 4276423536), Long_create(3942824761, 3421138828), Long_create(577279431, 2736911063), Long_create(2179810463, 2189528850), Long_create(3487696741, 3503246160),
    Long_create(2790157393, 2802596928), Long_create(3950112833, 2242077542), Long_create(2884206696, 3587324068), Long_create(4025352275, 2869859254), Long_create(4079275279, 2295887403), Long_create(1372879692, 3673419846), Long_create(239310294, 2938735877), Long_create(2768428613, 2350988701), Long_create(2711498862, 3761581922), Long_create(451212171, 3009265538), Long_create(2078956655, 2407412430), Long_create(3326330649, 3851859888), Long_create(84084141, 3081487911), Long_create(3503241150, 2465190328),
    Long_create(451225085, 3944304526), Long_create(3796953905, 3155443620), Long_create(3037563124, 2524354896), Long_create(3142114080, 4038967834), Long_create(3372684723, 3231174267), Long_create(980160860, 2584939414), Long_create(3286244294, 4135903062), Long_create(911008517, 3308722450), Long_create(728806813, 2646977960), Long_create(1166090902, 4235164736), Long_create(73879262, 3388131789), Long_create(918096869, 2710505431), Long_create(4170451332, 2168404344), Long_create(4095741754, 3469446951),
    Long_create(2417599944, 2775557561), Long_create(1075086496, 2220446049), Long_create(3438125312, 3552713678), Long_create(173519872, 2842170943), Long_create(1856802816, 2273736754), Long_create(393904128, 3637978807), Long_create(2892103680, 2910383045), Long_create(2313682944, 2328306436), Long_create(1983905792, 3725290298), Long_create(3305111552, 2980232238), Long_create(67108864, 2384185791), Long_create(2684354560, 3814697265), Long_create(2147483648, 3051757812), Long_create(0, 2441406250), Long_create(0, 3906250000),
    Long_create(0, 3125000000), Long_create(0, 2500000000), Long_create(0, 4000000000), Long_create(0, 3200000000), Long_create(0, 2560000000), Long_create(0, 4096000000), Long_create(0, 3276800000), Long_create(0, 2621440000), Long_create(0, 4194304000), Long_create(0, 3355443200), Long_create(0, 2684354560), Long_create(0, 2147483648), Long_create(3435973836, 3435973836), Long_create(1889785610, 2748779069), Long_create(2370821947, 2199023255), Long_create(3793315115, 3518437208), Long_create(457671715, 2814749767),
    Long_create(2943117749, 2251799813), Long_create(3849994940, 3602879701), Long_create(2221002492, 2882303761), Long_create(917808535, 2305843009), Long_create(3186480574, 3689348814), Long_create(3408177918, 2951479051), Long_create(1867548875, 2361183241), Long_create(1270091283, 3777893186), Long_create(157079567, 3022314549), Long_create(984657113, 2417851639), Long_create(3293438299, 3868562622), Long_create(916763721, 3094850098), Long_create(2451397895, 2475880078), Long_create(3063243173, 3961408125),
    Long_create(2450594538, 3169126500), Long_create(1960475630, 2535301200), Long_create(3136761009, 4056481920), Long_create(2509408807, 3245185536), Long_create(1148533586, 2596148429), Long_create(3555640657, 4153837486), Long_create(1985519066, 3323069989), Long_create(2447408712, 2658455991), Long_create(2197867021, 4253529586), Long_create(899300158, 3402823669), Long_create(1578433585, 2722258935), Long_create(1262746868, 2177807148), Long_create(1161401530, 3484491437), Long_create(3506101601, 2787593149),
    Long_create(3663874740, 2230074519), Long_create(3285219207, 3568119231), Long_create(1769181906, 2854495385), Long_create(1415345525, 2283596308), Long_create(1405559381, 3653754093), Long_create(2842434423, 2923003274), Long_create(3132940998, 2338402619), Long_create(2435725219, 3741444191), Long_create(1089586716, 2993155353), Long_create(2589656291, 2394524282), Long_create(707476229, 3831238852), Long_create(3142961361, 3064991081), Long_create(1655375629, 2451992865), Long_create(2648601007, 3923188584),
    Long_create(2977874265, 3138550867), Long_create(664312493, 2510840694), Long_create(2780886908, 4017345110), Long_create(2224709526, 3213876088), Long_create(3497754539, 2571100870), Long_create(1301439967, 4113761393), Long_create(2759138892, 3291009114), Long_create(3066304573, 2632807291), Long_create(3188100398, 4212491666), Long_create(1691486859, 3369993333), Long_create(3071176406, 2695994666), Long_create(1597947665, 2156795733), Long_create(1697722806, 3450873173), Long_create(3076165163, 2760698538),
    Long_create(4178919049, 2208558830), Long_create(2391303182, 3533694129), Long_create(2772036005, 2826955303), Long_create(3935615722, 2261564242), Long_create(2861011319, 3618502788), Long_create(4006795973, 2894802230), Long_create(3205436779, 2315841784), Long_create(2551718468, 3705346855), Long_create(2041374775, 2964277484), Long_create(2492093279, 2371421987), Long_create(551375410, 3794275180), Long_create(441100328, 3035420144), Long_create(1211873721, 2428336115), Long_create(1938997954, 3885337784),
    Long_create(2410191822, 3108270227), Long_create(210166539, 2486616182), Long_create(1195259923, 3978585891), Long_create(97214479, 3182868713), Long_create(1795758501, 2546294970), Long_create(2873213602, 4074071952), Long_create(580583963, 3259257562), Long_create(3041447548, 2607406049), Long_create(2289335700, 4171849679), Long_create(2690462019, 3337479743), Long_create(3870356534, 2669983794), Long_create(3615590076, 4271974071), Long_create(2033478602, 3417579257), Long_create(4203763259, 2734063405),
    Long_create(3363010607, 2187250724), Long_create(2803836594, 3499601159), Long_create(3102062734, 2799680927), Long_create(763663269, 2239744742), Long_create(2080854690, 3583591587), Long_create(4241664129, 2866873269), Long_create(4252324763, 2293498615), Long_create(2508752324, 3669597785), Long_create(2007001859, 2935678228), Long_create(3323588406, 2348542582), Long_create(1881767613, 3757668132), Long_create(4082394468, 3006134505), Long_create(3265915574, 2404907604), Long_create(2648484541, 3847852167),
    Long_create(400800715, 3078281734), Long_create(1179634031, 2462625387), Long_create(2746407909, 3940200619), Long_create(3056119786, 3152160495), Long_create(2444895829, 2521728396), Long_create(2193846408, 4034765434), Long_create(2614070585, 3227812347), Long_create(373269550, 2582249878), Long_create(4033205117, 4131599804), Long_create(4085557553, 3305279843), Long_create(691465664, 2644223875), Long_create(1106345063, 4230758200), Long_create(885076050, 3384606560), Long_create(708060840, 2707685248),
    Long_create(2284435591, 2166148198), Long_create(2796103486, 3465837117), Long_create(518895870, 2772669694), Long_create(1274110155, 2218135755), Long_create(2038576249, 3549017208), Long_create(3348847917, 2839213766), Long_create(1820084875, 2271371013), Long_create(2053142340, 3634193621), Long_create(783520413, 2907354897), Long_create(3203796708, 2325883917), Long_create(1690100896, 3721414268), Long_create(3070067635, 2977131414), Long_create(3315047567, 2381705131), Long_create(3586089190, 3810728210),
    Long_create(2868871352, 3048582568), Long_create(4013084000, 2438866054), Long_create(3843954022, 3902185687), Long_create(1357176299, 3121748550), Long_create(1085741039, 2497398840), Long_create(1737185663, 3995838144), Long_create(2248741989, 3196670515), Long_create(1798993591, 2557336412), Long_create(3737383206, 4091738259), Long_create(3848900024, 3273390607), Long_create(1361133101, 2618712486), Long_create(459826043, 4189939978), Long_create(2085847752, 3351951982), Long_create(4245658579, 2681561585),
    Long_create(2498086431, 4290498537), Long_create(280482227, 3432398830), Long_create(224385781, 2745919064), Long_create(1038502084, 2196735251), Long_create(4238583712, 3514776401), Long_create(2531873511, 2811821121), Long_create(1166505349, 2249456897), Long_create(2725402018, 3599131035), Long_create(2180321615, 2879304828), Long_create(3462244210, 2303443862), Long_create(2103616899, 3685510180), Long_create(1682893519, 2948408144), Long_create(2205308275, 2358726515), Long_create(3528493240, 3773962424),
    Long_create(3681788051, 3019169939), Long_create(3804423900, 2415335951), Long_create(74124026, 3864537523), Long_create(1777286139, 3091630018), Long_create(3139815829, 2473304014), Long_create(2446724950, 3957286423), Long_create(3675366878, 3165829138), Long_create(363313125, 2532663311), Long_create(3158281377, 4052261297), Long_create(808638183, 3241809038), Long_create(2364897465, 2593447230), Long_create(3783835944, 4149515568), Long_create(450088378, 3319612455), Long_create(360070702, 2655689964),
    Long_create(2294100042, 4249103942), Long_create(117293115, 3399283154), Long_create(952827951, 2719426523), Long_create(2480249279, 2175541218), Long_create(3109405388, 3480865949), Long_create(3346517769, 2784692759), Long_create(3536207675, 2227754207), Long_create(2221958443, 3564406732), Long_create(59579836, 2851525386), Long_create(3483637705, 2281220308), Long_create(419859574, 3649952494), Long_create(1194881118, 2919961995), Long_create(955904894, 2335969596), Long_create(4106428209, 3737551353),
    Long_create(708162189, 2990041083), Long_create(2284516670, 2392032866), Long_create(1937239754, 3827252586), Long_create(690798344, 3061802069), Long_create(1411632134, 2449441655), Long_create(2258611415, 3919106648), Long_create(3524876050, 3135285318), Long_create(242920462, 2508228255), Long_create(388672740, 4013165208), Long_create(2028925110, 3210532166), Long_create(764146629, 2568425733), Long_create(363641147, 4109481173), Long_create(2008899836, 3287584938), Long_create(3325106787, 2630067950),
    Long_create(1025203564, 4208108721), Long_create(4256136688, 3366486976), Long_create(2545915891, 2693189581), Long_create(1177739254, 2154551665), Long_create(1884382806, 3447282664), Long_create(2366499704, 2757826131), Long_create(1034206304, 2206260905), Long_create(1654730086, 3530017448), Long_create(3041770987, 2824013958), Long_create(4151403708, 2259211166), Long_create(629291719, 3614737867), Long_create(3080413753, 2891790293), Long_create(4182317920, 2313432234), Long_create(4114728295, 3701491575),
    Long_create(3291782636, 2961193260), Long_create(2633426109, 2368954608), Long_create(3354488315, 3790327373), Long_create(106610275, 3032261899), Long_create(944281679, 2425809519), Long_create(3228837605, 3881295230), Long_create(2583070084, 3105036184), Long_create(2925449526, 2484028947), Long_create(1244745405, 3974446316), Long_create(136802865, 3179557053), Long_create(1827429210, 2543645642), Long_create(3782880196, 4069833027), Long_create(1308317238, 3255866422), Long_create(3623634168, 2604693137),
    Long_create(2361840832, 4167509020), Long_create(1889472666, 3334007216), Long_create(652584673, 2667205773), Long_create(185142018, 4267529237), Long_create(2725093992, 3414023389), Long_create(3039068653, 2731218711), Long_create(1572261463, 2184974969), Long_create(4233605259, 3495959950), Long_create(3386884207, 2796767960), Long_create(2709507366, 2237414368), Long_create(3476218326, 3579862989), Long_create(3639968120, 2863890391), Long_create(2052981037, 2291112313), Long_create(2425776200, 3665779701),
    Long_create(1081627501, 2932623761), Long_create(6308541, 2346099009), Long_create(1728080585, 3753758414), Long_create(2241457927, 3003006731), Long_create(934172882, 2402405385), Long_create(1494676612, 3843848616), Long_create(336747830, 3075078893), Long_create(1987385183, 2460063114), Long_create(602835915, 3936100983), Long_create(2200255650, 3148880786), Long_create(901211061, 2519104629), Long_create(3159924616, 4030567406), Long_create(1668946233, 3224453925), Long_create(1335156987, 2579563140),
    Long_create(2136251179, 4127301024), Long_create(2567994402, 3301840819), Long_create(2913388981, 2641472655), Long_create(366455074, 4226356249), Long_create(1152157518, 3381084999), Long_create(1780719474, 2704867999), Long_create(2283569038, 2163894399), Long_create(1076730083, 3462231039), Long_create(1720377526, 2769784831), Long_create(517308561, 2215827865), Long_create(827693699, 3545324584), Long_create(1521148418, 2836259667), Long_create(3793899112, 2269007733), Long_create(916277824, 3630412374),
    Long_create(1592015718, 2904329899), Long_create(2132606034, 2323463919), Long_create(835189277, 3717542271), Long_create(4104125258, 2974033816), Long_create(2424306747, 2379227053), Long_create(3019897337, 3806763285), Long_create(2415917869, 3045410628), Long_create(3650721214, 2436328502), Long_create(2405180105, 3898125604), Long_create(2783137543, 3118500483), Long_create(3944496953, 2494800386), Long_create(298240911, 3991680619), Long_create(1097586188, 3193344495), Long_create(878068950, 2554675596),
    Long_create(3981890698, 4087480953), Long_create(608532181, 3269984763), Long_create(2204812663, 2615987810), Long_create(3527700261, 4185580496), Long_create(1963166749, 3348464397), Long_create(4147513777, 2678771517), Long_create(3200048207, 4286034428), Long_create(4278025484, 3428827542), Long_create(1704433468, 2743062034), Long_create(2222540234, 2194449627), Long_create(120090538, 3511119404), Long_create(955065889, 2808895523), Long_create(2482039630, 2247116418), Long_create(3112269949, 3595386269),
    Long_create(3348809418, 2876309015), Long_create(2679047534, 2301047212), Long_create(850502218, 3681675540), Long_create(680401775, 2945340432), Long_create(3121301797, 2356272345), Long_create(699115580, 3770035753), Long_create(2277279382, 3016028602), Long_create(103836587, 2412822882), Long_create(1025131999, 3860516611), Long_create(4256079436, 3088413288), Long_create(827883168, 2470730631), Long_create(3901593088, 3953169009)]);
    otcit_DoubleAnalyzer_exp10Table = $rt_createShortArrayFromData([(-70), (-66), (-63), (-60), (-56), (-53), (-50), (-46), (-43), (-40), (-36), (-33), (-30), (-26), (-23), (-20), (-16), (-13), (-10), (-6), (-3), 0, 4, 7, 10, 14, 17, 20, 23, 27, 30, 33, 37, 40, 43, 47, 50, 53, 57, 60, 63, 67, 70, 73, 77, 80, 83, 87, 90, 93, 97, 100, 103, 107, 110, 113, 116, 120, 123, 126, 130, 133, 136, 140, 143, 146, 150, 153, 156, 160, 163, 166, 170, 173, 176, 180, 183, 186, 190, 193, 196, 200, 203, 206, 210, 213, 216, 219,
    223, 226, 229, 233, 236, 239, 243, 246, 249, 253, 256, 259, 263, 266, 269, 273, 276, 279, 283, 286, 289, 293, 296, 299, 303, 306, 309, 312, 316, 319, 322, 326, 329, 332, 336, 339, 342, 346, 349, 352, 356, 359, 362, 366, 369, 372, 376, 379, 382, 386, 389, 392, 396, 399, 402, 406, 409, 412, 415, 419, 422, 425, 429, 432, 435, 439, 442, 445, 449, 452, 455, 459, 462, 465, 469, 472, 475, 479, 482, 485, 489, 492, 495, 499, 502, 505, 508, 512, 515, 518, 522, 525, 528, 532, 535, 538, 542, 545, 548, 552, 555, 558,
    562, 565, 568, 572, 575, 578, 582, 585, 588, 592, 595, 598, 601, 605, 608, 611, 615, 618, 621, 625, 628, 631, 635, 638, 641, 645, 648, 651, 655, 658, 661, 665, 668, 671, 675, 678, 681, 685, 688, 691, 695, 698, 701, 704, 708, 711, 714, 718, 721, 724, 728, 731, 734, 738, 741, 744, 748, 751, 754, 758, 761, 764, 768, 771, 774, 778, 781, 784, 788, 791, 794, 797, 801, 804, 807, 811, 814, 817, 821, 824, 827, 831, 834, 837, 841, 844, 847, 851, 854, 857, 861, 864, 867, 871, 874, 877, 881, 884, 887, 891, 894, 897,
    900, 904, 907, 910, 914, 917, 920, 924, 927, 930, 934, 937, 940, 944, 947, 950, 954, 957, 960, 964, 967, 970, 974, 977, 980, 984, 987, 990, 993, 997, 1000, 1003, 1007, 1010, 1013, 1017, 1020, 1023, 1027, 1030, 1033, 1037, 1040, 1043, 1047, 1050, 1053, 1057, 1060, 1063, 1067, 1070, 1073, 1077, 1080, 1083, 1086, 1090, 1093, 1096, 1100, 1103, 1106, 1110, 1113, 1116, 1120, 1123, 1126, 1130, 1133, 1136, 1140, 1143, 1146, 1150, 1153, 1156, 1160, 1163, 1166, 1170, 1173, 1176, 1180, 1183, 1186, 1189, 1193, 1196,
    1199, 1203, 1206, 1209, 1213, 1216, 1219, 1223, 1226, 1229, 1233, 1236, 1239, 1243, 1246, 1249, 1253, 1256, 1259, 1263, 1266, 1269, 1273, 1276, 1279, 1282, 1286, 1289, 1292, 1296, 1299, 1302, 1306, 1309, 1312, 1316, 1319, 1322, 1326, 1329, 1332, 1336, 1339, 1342, 1346, 1349, 1352, 1356, 1359, 1362, 1366, 1369, 1372, 1376, 1379, 1382, 1385, 1389, 1392, 1395, 1399, 1402, 1405, 1409, 1412, 1415, 1419, 1422, 1425, 1429, 1432, 1435, 1439, 1442, 1445, 1449, 1452, 1455, 1459, 1462, 1465, 1469, 1472, 1475, 1478,
    1482, 1485, 1488, 1492, 1495, 1498, 1502, 1505, 1508, 1512, 1515, 1518, 1522, 1525, 1528, 1532, 1535, 1538, 1542, 1545, 1548, 1552, 1555, 1558, 1562, 1565, 1568, 1572, 1575, 1578, 1581, 1585, 1588, 1591, 1595, 1598, 1601, 1605, 1608, 1611, 1615, 1618, 1621, 1625, 1628, 1631, 1635, 1638, 1641, 1645, 1648, 1651, 1655, 1658, 1661, 1665, 1668, 1671, 1674, 1678, 1681, 1684, 1688, 1691, 1694, 1698, 1701, 1704, 1708, 1711, 1714, 1718, 1721, 1724, 1728, 1731, 1734, 1738, 1741, 1744, 1748, 1751, 1754, 1758, 1761,
    1764, 1767, 1771, 1774, 1777, 1781, 1784, 1787, 1791, 1794, 1797, 1801, 1804, 1807, 1811, 1814, 1817, 1821, 1824, 1827, 1831, 1834, 1837, 1841, 1844, 1847, 1851, 1854, 1857, 1861, 1864, 1867, 1870, 1874, 1877, 1880, 1884, 1887, 1890, 1894, 1897, 1900, 1904, 1907, 1910, 1914, 1917, 1920, 1924, 1927, 1930, 1934, 1937, 1940, 1944, 1947, 1950, 1954, 1957, 1960, 1963, 1967, 1970, 1973, 1977, 1980, 1983, 1987, 1990, 1993, 1997, 2000, 2003, 2007, 2010, 2013, 2017, 2020, 2023, 2027, 2030, 2033, 2037, 2040, 2043,
    2047, 2050, 2053, 2057, 2060, 2063, 2066, 2070, 2073, 2076, 2080, 2083, 2086, 2090, 2093, 2096, 2100, 2103, 2106, 2110, 2113, 2116, 2120]);
};
function jur_EOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter0 = 0;
}
let jur_EOLSet__init_ = ($this, $counter) => {
    jur_AbstractSet__init_($this);
    $this.$consCounter0 = $counter;
},
jur_EOLSet__init_0 = var_0 => {
    let var_1 = new jur_EOLSet();
    jur_EOLSet__init_(var_1, var_0);
    return var_1;
},
jur_EOLSet_matches = ($this, $strIndex, $testString, $matchResult) => {
    let $rightBound, var$5, var$6, $ch;
    $rightBound = !$matchResult.$hasAnchoringBounds() ? $testString.$length() : $matchResult.$getRightBound();
    if ($strIndex >= $rightBound) {
        $matchResult.$setConsumed($this.$consCounter0, 0);
        return $this.$next2.$matches($strIndex, $testString, $matchResult);
    }
    var$5 = $rightBound - $strIndex | 0;
    if (var$5 == 2 && $testString.$charAt($strIndex) == 13) {
        var$6 = $strIndex + 1 | 0;
        if ($testString.$charAt(var$6) == 10) {
            $matchResult.$setConsumed($this.$consCounter0, 0);
            return $this.$next2.$matches($strIndex, $testString, $matchResult);
        }
    }
    a: {
        if (var$5 == 1) {
            $ch = $testString.$charAt($strIndex);
            if ($ch == 10)
                break a;
            if ($ch == 13)
                break a;
            if ($ch == 133)
                break a;
            if (($ch | 1) == 8233)
                break a;
        }
        return (-1);
    }
    $matchResult.$setConsumed($this.$consCounter0, 0);
    return $this.$next2.$matches($strIndex, $testString, $matchResult);
},
jur_EOLSet_hasConsumed = ($this, $matchResult) => {
    let $res;
    $res = !$matchResult.$getConsumed($this.$consCounter0) ? 0 : 1;
    $matchResult.$setConsumed($this.$consCounter0, (-1));
    return $res;
},
jur_EOLSet_getName = $this => {
    return $rt_s(416);
},
jur_AbstractLineTerminator$2 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$2__init_ = $this => {
    jur_AbstractLineTerminator__init_($this);
},
jur_AbstractLineTerminator$2__init_0 = () => {
    let var_0 = new jur_AbstractLineTerminator$2();
    jur_AbstractLineTerminator$2__init_(var_0);
    return var_0;
},
jur_AbstractLineTerminator$2_isLineTerminator = ($this, $ch) => {
    return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
},
jur_AbstractLineTerminator$2_isAfterLineTerminator = ($this, $ch, $ch2) => {
    let var$3;
    a: {
        b: {
            if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                if ($ch != 13)
                    break b;
                if ($ch2 == 10)
                    break b;
            }
            var$3 = 1;
            break a;
        }
        var$3 = 0;
    }
    return var$3;
};
function otciu_CharMapping() {
    let a = this; jl_Object.call(a);
    a.$binarySearchTable0 = null;
    a.$fastTable = null;
}
let otciu_CharMapping__init_ = ($this, $binarySearchTable, $fastTable) => {
    jl_Object__init_($this);
    $this.$binarySearchTable0 = $binarySearchTable;
    $this.$fastTable = $fastTable;
},
otciu_CharMapping__init_0 = (var_0, var_1) => {
    let var_2 = new otciu_CharMapping();
    otciu_CharMapping__init_(var_2, var_0, var_1);
    return var_2;
},
jur_AbstractLineTerminator$1 = $rt_classWithoutFields(jur_AbstractLineTerminator),
jur_AbstractLineTerminator$1__init_ = $this => {
    jur_AbstractLineTerminator__init_($this);
},
jur_AbstractLineTerminator$1__init_0 = () => {
    let var_0 = new jur_AbstractLineTerminator$1();
    jur_AbstractLineTerminator$1__init_(var_0);
    return var_0;
},
jur_AbstractLineTerminator$1_isLineTerminator = ($this, $ch) => {
    return $ch != 10 ? 0 : 1;
},
jur_AbstractLineTerminator$1_isAfterLineTerminator = ($this, $ch, $ch2) => {
    return $ch != 10 ? 0 : 1;
},
opir_WindyRPP = $rt_classWithoutFields(opi_RuralPostmanProblem),
opir_WindyRPP__init_ = ($this, $g, $name) => {
    opi_RuralPostmanProblem__init_($this, $g, $name, om_SumMetric__init_());
    $this.$mGraph = $g;
},
opir_WindyRPP__init_0 = (var_0, var_1) => {
    let var_2 = new opir_WindyRPP();
    opir_WindyRPP__init_(var_2, var_0, var_1);
    return var_2;
},
opir_WindyRPP_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_WINDY;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_RURAL_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue = $this => {
    let $chCl;
    $chCl = jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1__init_0($this);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function jur_Lexer() {
    let a = this; jl_Object.call(a);
    a.$pattern0 = null;
    a.$flags0 = 0;
    a.$mode0 = 0;
    a.$savedMode = 0;
    a.$lookBack = 0;
    a.$ch = 0;
    a.$lookAhead0 = 0;
    a.$patternFullLength = 0;
    a.$curST = null;
    a.$lookAheadST = null;
    a.$index0 = 0;
    a.$prevNW = 0;
    a.$curToc = 0;
    a.$lookAheadToc = 0;
    a.$orig = null;
}
let jur_Lexer_decompTable = null,
jur_Lexer_singleDecompTable = null,
jur_Lexer_singleDecompTableSize = 0,
jur_Lexer__init_ = ($this, $pattern, $flags) => {
    jl_Object__init_($this);
    $this.$mode0 = 1;
    $this.$orig = $pattern;
    if (($flags & 16) > 0)
        $pattern = jur_Pattern_quote($pattern);
    else if (($flags & 128) > 0)
        $pattern = jur_Lexer_normalize($pattern);
    $this.$pattern0 = $rt_createCharArray($pattern.$length() + 2 | 0);
    jl_System_fastArraycopy($pattern.$toCharArray(), 0, $this.$pattern0, 0, $pattern.$length());
    $this.$pattern0.data[$this.$pattern0.data.length - 1 | 0] = 0;
    $this.$pattern0.data[$this.$pattern0.data.length - 2 | 0] = 0;
    $this.$patternFullLength = $this.$pattern0.data.length;
    $this.$flags0 = $flags;
    jur_Lexer_movePointer($this);
    jur_Lexer_movePointer($this);
},
jur_Lexer__init_0 = (var_0, var_1) => {
    let var_2 = new jur_Lexer();
    jur_Lexer__init_(var_2, var_0, var_1);
    return var_2;
},
jur_Lexer_peek = $this => {
    return $this.$ch;
},
jur_Lexer_setMode = ($this, $mode) => {
    if ($mode > 0 && $mode < 3)
        $this.$mode0 = $mode;
    if ($mode == 1)
        jur_Lexer_reread($this);
},
jur_Lexer_restoreFlags = ($this, $flags) => {
    $this.$flags0 = $flags;
    $this.$lookAhead0 = $this.$ch;
    $this.$lookAheadST = $this.$curST;
    $this.$index0 = $this.$curToc + 1 | 0;
    $this.$lookAheadToc = $this.$curToc;
    jur_Lexer_movePointer($this);
},
jur_Lexer_peekSpecial = $this => {
    return $this.$curST;
},
jur_Lexer_isSpecial = $this => {
    return $this.$curST === null ? 0 : 1;
},
jur_Lexer_isNextSpecial = $this => {
    return $this.$lookAheadST === null ? 0 : 1;
},
jur_Lexer_next = $this => {
    jur_Lexer_movePointer($this);
    return $this.$lookBack;
},
jur_Lexer_nextSpecial = $this => {
    let $res;
    $res = $this.$curST;
    jur_Lexer_movePointer($this);
    return $res;
},
jur_Lexer_lookAhead = $this => {
    return $this.$lookAhead0;
},
jur_Lexer_back = $this => {
    return $this.$lookBack;
},
jur_Lexer_normalize = $input => {
    return $input;
},
jur_Lexer_reread = $this => {
    $this.$lookAhead0 = $this.$ch;
    $this.$lookAheadST = $this.$curST;
    $this.$index0 = $this.$lookAheadToc;
    $this.$lookAheadToc = $this.$curToc;
    jur_Lexer_movePointer($this);
},
jur_Lexer_movePointer = $this => {
    let $reread, $nonCap, $behind, $mod, var$5, $cs, $negative, $$je;
    $this.$lookBack = $this.$ch;
    $this.$ch = $this.$lookAhead0;
    $this.$curST = $this.$lookAheadST;
    $this.$curToc = $this.$lookAheadToc;
    $this.$lookAheadToc = $this.$index0;
    while (true) {
        $reread = 0;
        $this.$lookAhead0 = $this.$index0 >= $this.$pattern0.data.length ? 0 : jur_Lexer_nextCodePoint($this);
        $this.$lookAheadST = null;
        if ($this.$mode0 == 4) {
            if ($this.$lookAhead0 != 92)
                return;
            $this.$lookAhead0 = $this.$index0 >= $this.$pattern0.data.length ? 0 : $this.$pattern0.data[jur_Lexer_nextIndex($this)];
            switch ($this.$lookAhead0) {
                case 69:
                    break;
                default:
                    $this.$lookAhead0 = 92;
                    $this.$index0 = $this.$prevNW;
                    return;
            }
            $this.$mode0 = $this.$savedMode;
            $this.$lookAhead0 = $this.$index0 > ($this.$pattern0.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
        }
        a: {
            if ($this.$lookAhead0 != 92) {
                if ($this.$mode0 == 1)
                    switch ($this.$lookAhead0) {
                        case 36:
                            $this.$lookAhead0 = (-536870876);
                            break a;
                        case 40:
                            if ($this.$pattern0.data[$this.$index0] != 63) {
                                $this.$lookAhead0 = (-2147483608);
                                break a;
                            }
                            jur_Lexer_nextIndex($this);
                            $nonCap = $this.$pattern0.data[$this.$index0];
                            $behind = 0;
                            while (true) {
                                b: {
                                    if ($behind) {
                                        $behind = 0;
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 61:
                                                $this.$lookAhead0 = (-134217688);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
                                        }
                                        $this.$lookAhead0 = (-67108824);
                                        jur_Lexer_nextIndex($this);
                                    } else {
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 60:
                                                jur_Lexer_nextIndex($this);
                                                $nonCap = $this.$pattern0.data[$this.$index0];
                                                $behind = 1;
                                                break b;
                                            case 61:
                                                $this.$lookAhead0 = (-536870872);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            case 62:
                                                $this.$lookAhead0 = (-33554392);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $this.$lookAhead0 = jur_Lexer_readFlags($this);
                                                if ($this.$lookAhead0 < 256) {
                                                    $this.$flags0 = $this.$lookAhead0;
                                                    $this.$lookAhead0 = $this.$lookAhead0 << 16;
                                                    $this.$lookAhead0 = (-1073741784) | $this.$lookAhead0;
                                                    break b;
                                                }
                                                $this.$lookAhead0 = $this.$lookAhead0 & 255;
                                                $this.$flags0 = $this.$lookAhead0;
                                                $this.$lookAhead0 = $this.$lookAhead0 << 16;
                                                $this.$lookAhead0 = (-16777176) | $this.$lookAhead0;
                                                break b;
                                        }
                                        $this.$lookAhead0 = (-268435416);
                                        jur_Lexer_nextIndex($this);
                                    }
                                }
                                if (!$behind)
                                    break;
                            }
                            break a;
                        case 41:
                            $this.$lookAhead0 = (-536870871);
                            break a;
                        case 42:
                        case 43:
                        case 63:
                            $mod = $this.$index0 >= $this.$pattern0.data.length ? 42 : $this.$pattern0.data[$this.$index0];
                            switch ($mod) {
                                case 43:
                                    $this.$lookAhead0 = $this.$lookAhead0 | (-2147483648);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                case 63:
                                    $this.$lookAhead0 = $this.$lookAhead0 | (-1073741824);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                default:
                            }
                            $this.$lookAhead0 = $this.$lookAhead0 | (-536870912);
                            break a;
                        case 46:
                            $this.$lookAhead0 = (-536870866);
                            break a;
                        case 91:
                            $this.$lookAhead0 = (-536870821);
                            $this.$setMode(2);
                            break a;
                        case 93:
                            if ($this.$mode0 != 2)
                                break a;
                            $this.$lookAhead0 = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead0 = (-536870818);
                            break a;
                        case 123:
                            $this.$lookAheadST = jur_Lexer_processQuantifier($this, $this.$lookAhead0);
                            break a;
                        case 124:
                            $this.$lookAhead0 = (-536870788);
                            break a;
                        default:
                    }
                else if ($this.$mode0 == 2)
                    switch ($this.$lookAhead0) {
                        case 38:
                            $this.$lookAhead0 = (-536870874);
                            break a;
                        case 45:
                            $this.$lookAhead0 = (-536870867);
                            break a;
                        case 91:
                            $this.$lookAhead0 = (-536870821);
                            break a;
                        case 93:
                            $this.$lookAhead0 = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead0 = (-536870818);
                            break a;
                        default:
                    }
            } else {
                var$5 = $this.$index0 >= ($this.$pattern0.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                c: {
                    $this.$lookAhead0 = var$5;
                    switch ($this.$lookAhead0) {
                        case -1:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 118:
                            break;
                        case 48:
                            $this.$lookAhead0 = jur_Lexer_readOctals($this);
                            break a;
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            if ($this.$mode0 != 1)
                                break a;
                            $this.$lookAhead0 = (-2147483648) | $this.$lookAhead0;
                            break a;
                        case 65:
                            $this.$lookAhead0 = (-2147483583);
                            break a;
                        case 66:
                            $this.$lookAhead0 = (-2147483582);
                            break a;
                        case 67:
                        case 69:
                        case 70:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 82:
                        case 84:
                        case 85:
                        case 86:
                        case 88:
                        case 89:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 111:
                        case 113:
                        case 121:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
                        case 68:
                        case 83:
                        case 87:
                        case 100:
                        case 115:
                        case 119:
                            $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_2($this.$pattern0, $this.$prevNW, 1), 0);
                            $this.$lookAhead0 = 0;
                            break a;
                        case 71:
                            $this.$lookAhead0 = (-2147483577);
                            break a;
                        case 80:
                        case 112:
                            break c;
                        case 81:
                            $this.$savedMode = $this.$mode0;
                            $this.$mode0 = 4;
                            $reread = 1;
                            break a;
                        case 90:
                            $this.$lookAhead0 = (-2147483558);
                            break a;
                        case 97:
                            $this.$lookAhead0 = 7;
                            break a;
                        case 98:
                            $this.$lookAhead0 = (-2147483550);
                            break a;
                        case 99:
                            if ($this.$index0 >= ($this.$pattern0.data.length - 2 | 0))
                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
                            $this.$lookAhead0 = $this.$pattern0.data[jur_Lexer_nextIndex($this)] & 31;
                            break a;
                        case 101:
                            $this.$lookAhead0 = 27;
                            break a;
                        case 102:
                            $this.$lookAhead0 = 12;
                            break a;
                        case 110:
                            $this.$lookAhead0 = 10;
                            break a;
                        case 114:
                            $this.$lookAhead0 = 13;
                            break a;
                        case 116:
                            $this.$lookAhead0 = 9;
                            break a;
                        case 117:
                            $this.$lookAhead0 = jur_Lexer_readHex($this, 4);
                            break a;
                        case 120:
                            $this.$lookAhead0 = jur_Lexer_readHex($this, 2);
                            break a;
                        case 122:
                            $this.$lookAhead0 = (-2147483526);
                            break a;
                        default:
                    }
                    break a;
                }
                $cs = jur_Lexer_parseCharClassName($this);
                $negative = 0;
                if ($this.$lookAhead0 == 80)
                    $negative = 1;
                try {
                    $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ju_MissingResourceException) {
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
                    } else {
                        throw $$e;
                    }
                }
                $this.$lookAhead0 = 0;
            }
        }
        if ($reread)
            continue;
        else
            break;
    }
},
jur_Lexer_parseCharClassName = $this => {
    let $sb, var$2, var$3, $ch, $res;
    $sb = jl_StringBuilder__init_0(10);
    if ($this.$index0 < ($this.$pattern0.data.length - 2 | 0)) {
        if ($this.$pattern0.data[$this.$index0] != 123) {
            var$2 = jl_String__init_2($this.$pattern0, jur_Lexer_nextIndex($this), 1);
            var$3 = jl_StringBuilder__init_();
            jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(504)), var$2);
            return jl_StringBuilder_toString(var$3);
        }
        jur_Lexer_nextIndex($this);
        $ch = 0;
        a: {
            while ($this.$index0 < ($this.$pattern0.data.length - 2 | 0)) {
                $ch = $this.$pattern0.data[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                $sb.$append0($ch);
            }
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
    }
    if (!$sb.$length())
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
    $res = $sb.$toString();
    if ($res.$length() == 1) {
        var$2 = jl_StringBuilder__init_();
        jl_StringBuilder_append(jl_StringBuilder_append(var$2, $rt_s(504)), $res);
        return jl_StringBuilder_toString(var$2);
    }
    b: {
        c: {
            if ($res.$length() > 3) {
                if ($res.$startsWith1($rt_s(504)))
                    break c;
                if ($res.$startsWith1($rt_s(505)))
                    break c;
            }
            break b;
        }
        $res = $res.$substring0(2);
    }
    return $res;
},
jur_Lexer_processQuantifier = ($this, $ch) => {
    let $sb, $min, $max, $mod, $$je;
    $sb = jl_StringBuilder__init_0(4);
    $min = (-1);
    $max = 2147483647;
    a: {
        while (true) {
            if ($this.$index0 >= $this.$pattern0.data.length)
                break a;
            $ch = $this.$pattern0.data[jur_Lexer_nextIndex($this)];
            if ($ch == 125)
                break a;
            if ($ch == 44 && $min < 0)
                try {
                    $min = jl_Integer_parseInt($sb.$toString(), 10);
                    $sb.$delete0(0, $sb.$length());
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break;
                    } else {
                        throw $$e;
                    }
                }
            $sb.$append0($ch & 65535);
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
    }
    if ($ch != 125)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
    if ($sb.$length() > 0)
        b: {
            try {
                $max = jl_Integer_parseInt($sb.$toString(), 10);
                if ($min >= 0)
                    break b;
                $min = $max;
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
        }
    else if ($min < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
    if (($min | $max | ($max - $min | 0)) < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
    $mod = $this.$index0 >= $this.$pattern0.data.length ? 42 : $this.$pattern0.data[$this.$index0];
    c: {
        switch ($mod) {
            case 43:
                $this.$lookAhead0 = (-2147483525);
                jur_Lexer_nextIndex($this);
                break c;
            case 63:
                $this.$lookAhead0 = (-1073741701);
                jur_Lexer_nextIndex($this);
                break c;
            default:
        }
        $this.$lookAhead0 = (-536870789);
    }
    return jur_Quantifier__init_0($min, $max);
},
jur_Lexer_toString = $this => {
    return $this.$orig;
},
jur_Lexer_isEmpty = $this => {
    return !$this.$ch && !$this.$lookAhead0 && $this.$index0 == $this.$patternFullLength && !$this.$isSpecial() ? 1 : 0;
},
jur_Lexer_isLetter = $ch => {
    return $ch < 0 ? 0 : 1;
},
jur_Lexer_isLetter0 = $this => {
    return !$this.$isEmpty() && !$this.$isSpecial() && jur_Lexer_isLetter($this.$ch) ? 1 : 0;
},
jur_Lexer_isHighSurrogate0 = $this => {
    return $this.$ch <= 56319 && $this.$ch >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate0 = $this => {
    return $this.$ch <= 57343 && $this.$ch >= 56320 ? 1 : 0;
},
jur_Lexer_isHighSurrogate = $ch => {
    return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
},
jur_Lexer_isLowSurrogate = $ch => {
    return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
},
jur_Lexer_readHex = ($this, $max) => {
    let $st, $length, $i, var$5, $$je;
    $st = jl_StringBuilder__init_0($max);
    $length = $this.$pattern0.data.length - 2 | 0;
    $i = 0;
    while (true) {
        var$5 = $rt_compare($i, $max);
        if (var$5 >= 0)
            break;
        if ($this.$index0 >= $length)
            break;
        $st.$append0($this.$pattern0.data[jur_Lexer_nextIndex($this)]);
        $i = $i + 1 | 0;
    }
    if (!var$5)
        a: {
            try {
                var$5 = jl_Integer_parseInt($st.$toString(), 16);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return var$5;
        }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
},
jur_Lexer_readOctals = $this => {
    let $max, $i, $length, $res, var$5;
    $max = 3;
    $i = 1;
    $length = $this.$pattern0.data.length - 2 | 0;
    $res = jl_Character_digit($this.$pattern0.data[$this.$index0], 8);
    switch ($res) {
        case -1:
            break;
        default:
            if ($res > 3)
                $max = 2;
            jur_Lexer_nextIndex($this);
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    if ($this.$index0 >= $length)
                        break a;
                    var$5 = jl_Character_digit($this.$pattern0.data[$this.$index0], 8);
                    if (var$5 < 0)
                        break;
                    $res = ($res * 8 | 0) + var$5 | 0;
                    jur_Lexer_nextIndex($this);
                    $i = $i + 1 | 0;
                }
            }
            return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
},
jur_Lexer_readFlags = $this => {
    let $pos, $res, $ch;
    $pos = 1;
    $res = $this.$flags0;
    a: while (true) {
        if ($this.$index0 >= $this.$pattern0.data.length)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
        b: {
            c: {
                $ch = $this.$pattern0.data[$this.$index0];
                switch ($ch) {
                    case 41:
                        jur_Lexer_nextIndex($this);
                        return $res | 256;
                    case 45:
                        if (!$pos)
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(33), $this.$toString(), $this.$index0));
                        $pos = 0;
                        break b;
                    case 58:
                        break a;
                    case 100:
                        break c;
                    case 105:
                        $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                        break b;
                    case 109:
                        $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                        break b;
                    case 115:
                        $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                        break b;
                    case 117:
                        $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                        break b;
                    case 120:
                        $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                        break b;
                    default:
                }
                break b;
            }
            $res = $pos ? $res | 1 : ($res ^ 1) & $res;
        }
        jur_Lexer_nextIndex($this);
    }
    jur_Lexer_nextIndex($this);
    return $res;
},
jur_Lexer_nextIndex = $this => {
    $this.$prevNW = $this.$index0;
    if ($this.$flags0 & 4)
        jur_Lexer_skipComments($this);
    else
        $this.$index0 = $this.$index0 + 1 | 0;
    return $this.$prevNW;
},
jur_Lexer_skipComments = $this => {
    let $length;
    $length = $this.$pattern0.data.length - 2 | 0;
    $this.$index0 = $this.$index0 + 1 | 0;
    a: while (true) {
        if ($this.$index0 < $length && jl_Character_isWhitespace0($this.$pattern0.data[$this.$index0])) {
            $this.$index0 = $this.$index0 + 1 | 0;
            continue;
        }
        if ($this.$index0 >= $length)
            break;
        if ($this.$pattern0.data[$this.$index0] != 35)
            break;
        $this.$index0 = $this.$index0 + 1 | 0;
        while (true) {
            if ($this.$index0 >= $length)
                continue a;
            if (jur_Lexer_isLineSeparator($this, $this.$pattern0.data[$this.$index0]))
                continue a;
            $this.$index0 = $this.$index0 + 1 | 0;
        }
    }
    return $this.$index0;
},
jur_Lexer_isLineSeparator = ($this, $ch) => {
    return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
},
jur_Lexer_getDecomposition = $ch => {
    return jur_Lexer_decompTable.$get3($ch);
},
jur_Lexer_getHangulDecomposition = $ch => {
    let $sIndex, $l, $v, $t, $decomp, var$7;
    $sIndex = $ch - 44032 | 0;
    if ($sIndex >= 0 && $sIndex < 11172) {
        $l = 4352 + ($sIndex / 588 | 0) | 0;
        $v = 4449 + (($sIndex % 588 | 0) / 28 | 0) | 0;
        $t = $sIndex % 28 | 0;
        if (!$t)
            $decomp = $rt_createIntArrayFromData([$l, $v]);
        else {
            var$7 = 4519 + $t | 0;
            $decomp = $rt_createIntArrayFromData([$l, $v, var$7]);
        }
        return $decomp;
    }
    return null;
},
jur_Lexer_hasSingleCodepointDecomposition = $ch => {
    let $hasSingleDecomp;
    $hasSingleDecomp = jur_Lexer_singleDecompTable.$get2($ch);
    return $hasSingleDecomp == jur_Lexer_singleDecompTableSize ? 0 : 1;
},
jur_Lexer_hasDecompositionNonNullCanClass = $ch => {
    return ($ch != 832 ? 0 : 1) | ($ch != 833 ? 0 : 1) | ($ch != 835 ? 0 : 1) | ($ch != 836 ? 0 : 1);
},
jur_Lexer_nextCodePoint = $this => {
    let $high, $lowExpectedIndex, $low;
    $high = $this.$pattern0.data[jur_Lexer_nextIndex($this)];
    if (jl_Character_isHighSurrogate($high)) {
        $lowExpectedIndex = $this.$prevNW + 1 | 0;
        if ($lowExpectedIndex < $this.$pattern0.data.length) {
            $low = $this.$pattern0.data[$lowExpectedIndex];
            if (jl_Character_isLowSurrogate($low)) {
                jur_Lexer_nextIndex($this);
                return jl_Character_toCodePoint($high, $low);
            }
        }
    }
    return $high;
},
jur_Lexer_getIndex = $this => {
    return $this.$curToc;
},
jur_AbstractCharClass$LazySpecialsBlock = $rt_classWithoutFields(jur_AbstractCharClass$LazyCharClass),
jur_AbstractCharClass$LazySpecialsBlock__init_ = $this => {
    jur_AbstractCharClass$LazyCharClass__init_($this);
},
jur_AbstractCharClass$LazySpecialsBlock__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
    jur_AbstractCharClass$LazySpecialsBlock__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazySpecialsBlock_computeValue = $this => {
    return ((jur_CharClass__init_()).$add0(65279, 65279)).$add0(65520, 65533);
},
jur_AbstractCharClass$LazyNonSpace = $rt_classWithoutFields(jur_AbstractCharClass$LazySpace),
jur_AbstractCharClass$LazyNonSpace__init_ = $this => {
    jur_AbstractCharClass$LazySpace__init_($this);
},
jur_AbstractCharClass$LazyNonSpace__init_0 = () => {
    let var_0 = new jur_AbstractCharClass$LazyNonSpace();
    jur_AbstractCharClass$LazyNonSpace__init_(var_0);
    return var_0;
},
jur_AbstractCharClass$LazyNonSpace_computeValue = $this => {
    let $chCl;
    $chCl = (jur_AbstractCharClass$LazySpace_computeValue($this)).$setNegative(1);
    $chCl.$mayContainSupplCodepoints0 = 1;
    return $chCl;
};
function otci_CharFlow() {
    let a = this; jl_Object.call(a);
    a.$characters = null;
    a.$pointer = 0;
}
let otci_CharFlow__init_ = ($this, $characters) => {
    jl_Object__init_($this);
    $this.$characters = $characters;
},
otci_CharFlow__init_0 = var_0 => {
    let var_1 = new otci_CharFlow();
    otci_CharFlow__init_(var_1, var_0);
    return var_1;
};
function jur_RangeSet() {
    let a = this; jur_LeafSet.call(a);
    a.$chars0 = null;
    a.$alt2 = 0;
}
let jur_RangeSet__init_ = ($this, $cc) => {
    jur_LeafSet__init_($this);
    $this.$chars0 = $cc.$getInstance();
    $this.$alt2 = $cc.$alt;
},
jur_RangeSet__init_0 = var_0 => {
    let var_1 = new jur_RangeSet();
    jur_RangeSet__init_(var_1, var_0);
    return var_1;
},
jur_RangeSet_accepts = ($this, $strIndex, $testString) => {
    return !$this.$chars0.$contains($testString.$charAt($strIndex)) ? (-1) : 1;
},
jur_RangeSet_getName = $this => {
    let var$1, var$2, var$3;
    var$1 = !$this.$alt2 ? $rt_s(29) : $rt_s(30);
    var$2 = $this.$chars0.$toString();
    var$3 = jl_StringBuilder__init_();
    jl_StringBuilder_append(jl_StringBuilder_append(jl_StringBuilder_append(var$3, $rt_s(31)), var$1), var$2);
    return jl_StringBuilder_toString(var$3);
},
jur_RangeSet_first = ($this, $set) => {
    if ($set instanceof jur_CharSet)
        return jur_AbstractCharClass_intersects0($this.$chars0, $set.$getChar());
    if ($set instanceof jur_RangeSet)
        return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars0);
    if ($set instanceof jur_SupplRangeSet)
        return jur_AbstractCharClass_intersects($this.$chars0, $set.$getChars());
    if (!($set instanceof jur_SupplCharSet))
        return 1;
    return 0;
},
jur_RangeSet_getChars = $this => {
    return $this.$chars0;
};
function jur_UnicodeCategory() {
    jur_AbstractCharClass.call(this);
    this.$category = 0;
}
let jur_UnicodeCategory__init_ = ($this, $category) => {
    jur_AbstractCharClass__init_($this);
    $this.$category = $category;
},
jur_UnicodeCategory__init_0 = var_0 => {
    let var_1 = new jur_UnicodeCategory();
    jur_UnicodeCategory__init_(var_1, var_0);
    return var_1;
},
jur_UnicodeCategory_contains = ($this, $ch) => {
    return $this.$alt ^ ($this.$category != jl_Character_getType0($ch & 65535) ? 0 : 1);
},
jur_UnicodeCategoryScope = $rt_classWithoutFields(jur_UnicodeCategory),
jur_UnicodeCategoryScope__init_ = ($this, $category) => {
    jur_UnicodeCategory__init_($this, $category);
},
jur_UnicodeCategoryScope__init_0 = var_0 => {
    let var_1 = new jur_UnicodeCategoryScope();
    jur_UnicodeCategoryScope__init_(var_1, var_0);
    return var_1;
},
jur_UnicodeCategoryScope_contains = ($this, $ch) => {
    return $this.$alt ^ (!($this.$category >> jl_Character_getType0($ch & 65535) & 1) ? 0 : 1);
},
opic_DirectedCPP = $rt_classWithoutFields(opi_ChinesePostmanProblem),
opic_DirectedCPP__init_ = ($this, $g, $name) => {
    opi_ChinesePostmanProblem__init_($this, $g, $name, om_SumMetric__init_());
    $this.$mGraph = $g;
},
opic_DirectedCPP__init_0 = (var_0, var_1) => {
    let var_2 = new opic_DirectedCPP();
    opic_DirectedCPP__init_(var_2, var_0, var_1);
    return var_2;
},
opic_DirectedCPP_getProblemAttributes = $this => {
    let var$1, var$2, var$3, var$4;
    var$1 = new opi_ProblemAttributes;
    oc_Graph$Type_$callClinit();
    var$2 = oc_Graph$Type_DIRECTED;
    opi_ProblemAttributes$Type_$callClinit();
    var$3 = opi_ProblemAttributes$Type_CHINESE_POSTMAN;
    opi_ProblemAttributes$NumVehicles_$callClinit();
    var$4 = opi_ProblemAttributes$NumVehicles_SINGLE_VEHICLE;
    opi_ProblemAttributes$NumDepots_$callClinit();
    opi_ProblemAttributes__init_(var$1, var$2, var$3, var$4, opi_ProblemAttributes$NumDepots_SINGLE_DEPOT, null);
    return var$1;
};
function jur_CharClass() {
    let a = this; jur_AbstractCharClass.call(a);
    a.$ci = 0;
    a.$uci = 0;
    a.$hasUCI0 = 0;
    a.$invertedSurrogates = 0;
    a.$inverted = 0;
    a.$hideBits = 0;
    a.$bits = null;
    a.$nonBitSet = null;
}
let jur_CharClass__init_2 = $this => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_1();
},
jur_CharClass__init_ = () => {
    let var_0 = new jur_CharClass();
    jur_CharClass__init_2(var_0);
    return var_0;
},
jur_CharClass__init_0 = ($this, $ci, $uci) => {
    jur_AbstractCharClass__init_($this);
    $this.$bits = ju_BitSet__init_1();
    $this.$ci = $ci;
    $this.$uci = $uci;
},
jur_CharClass__init_4 = (var_0, var_1) => {
    let var_2 = new jur_CharClass();
    jur_CharClass__init_0(var_2, var_0, var_1);
    return var_2;
},
jur_CharClass__init_1 = ($this, $negative, $ci, $uci) => {
    jur_CharClass__init_0($this, $ci, $uci);
    $this.$setNegative($negative);
},
jur_CharClass__init_3 = (var_0, var_1, var_2) => {
    let var_3 = new jur_CharClass();
    jur_CharClass__init_1(var_3, var_0, var_1, var_2);
    return var_3;
},
jur_CharClass_add = ($this, $ch) => {
    a: {
        if ($this.$ci) {
            b: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break b;
                    if ($ch > 90)
                        break b;
                }
                if ($this.$inverted) {
                    $this.$bits.$clear0(jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                $this.$bits.$set1(jur_Pattern_getSupplement($ch & 65535));
                break a;
            }
            if ($this.$uci && $ch > 128) {
                $this.$hasUCI0 = 1;
                $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase0($ch));
            }
        }
    }
    if (!(!jur_Lexer_isHighSurrogate($ch) && !jur_Lexer_isLowSurrogate($ch))) {
        if ($this.$invertedSurrogates)
            $this.$lowHighSurrogates.$clear0($ch - 55296 | 0);
        else
            $this.$lowHighSurrogates.$set1($ch - 55296 | 0);
    }
    if ($this.$inverted)
        $this.$bits.$clear0($ch);
    else
        $this.$bits.$set1($ch);
    if (!$this.$mayContainSupplCodepoints0 && jl_Character_isSupplementaryCodePoint($ch))
        $this.$mayContainSupplCodepoints0 = 1;
    return $this;
},
jur_CharClass_add1 = ($this, $cc) => {
    let $curAlt, $nb;
    if (!$this.$mayContainSupplCodepoints0 && $cc.$mayContainSupplCodepoints0)
        $this.$mayContainSupplCodepoints0 = 1;
    if ($this.$invertedSurrogates) {
        if (!$cc.$altSurrogates)
            $this.$lowHighSurrogates.$andNot($cc.$getLowHighSurrogates());
        else
            $this.$lowHighSurrogates.$and($cc.$getLowHighSurrogates());
    } else if (!$cc.$altSurrogates)
        $this.$lowHighSurrogates.$or($cc.$getLowHighSurrogates());
    else {
        $this.$lowHighSurrogates.$xor($cc.$getLowHighSurrogates());
        $this.$lowHighSurrogates.$and($cc.$getLowHighSurrogates());
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        $this.$invertedSurrogates = 1;
    }
    if (!$this.$hideBits && $cc.$getBits() !== null) {
        if ($this.$inverted) {
            if (!$cc.$isNegative())
                $this.$bits.$andNot($cc.$getBits());
            else
                $this.$bits.$and($cc.$getBits());
        } else if (!$cc.$isNegative())
            $this.$bits.$or($cc.$getBits());
        else {
            $this.$bits.$xor($cc.$getBits());
            $this.$bits.$and($cc.$getBits());
            $this.$alt = $this.$alt ? 0 : 1;
            $this.$inverted = 1;
        }
    } else {
        $curAlt = $this.$alt;
        if ($this.$nonBitSet !== null) {
            $nb = $this.$nonBitSet;
            if (!$curAlt)
                $this.$nonBitSet = jur_CharClass$5__init_0($this, $curAlt, $nb, $cc);
            else
                $this.$nonBitSet = jur_CharClass$4__init_0($this, $curAlt, $nb, $cc);
        } else {
            if ($curAlt && !$this.$inverted && $this.$bits.$isEmpty())
                $this.$nonBitSet = jur_CharClass$1__init_0($this, $cc);
            else if (!$curAlt)
                $this.$nonBitSet = jur_CharClass$3__init_0($this, $curAlt, $cc);
            else
                $this.$nonBitSet = jur_CharClass$2__init_0($this, $curAlt, $cc);
            $this.$hideBits = 1;
        }
    }
    return $this;
},
jur_CharClass_add0 = ($this, $i, $end) => {
    if ($i > $end)
        $rt_throw(jl_IllegalArgumentException__init_());
    a: {
        b: {
            if (!$this.$ci) {
                if ($end < 55296)
                    break b;
                if ($i > 57343)
                    break b;
            }
            while (true) {
                if ($i >= ($end + 1 | 0))
                    break a;
                $this.$add($i);
                $i = $i + 1 | 0;
            }
        }
        if ($this.$inverted)
            $this.$bits.$clear1($i, $end + 1 | 0);
        else
            $this.$bits.$set($i, $end + 1 | 0);
    }
    return $this;
},
jur_CharClass_union = ($this, $clazz) => {
    let $curAlt, $nb;
    if (!$this.$mayContainSupplCodepoints0 && $clazz.$mayContainSupplCodepoints0)
        $this.$mayContainSupplCodepoints0 = 1;
    if ($clazz.$hasUCI())
        $this.$hasUCI0 = 1;
    if (!($this.$altSurrogates ^ $clazz.$altSurrogates)) {
        if (!$this.$altSurrogates)
            $this.$lowHighSurrogates.$or($clazz.$getLowHighSurrogates());
        else
            $this.$lowHighSurrogates.$and($clazz.$getLowHighSurrogates());
    } else if ($this.$altSurrogates)
        $this.$lowHighSurrogates.$andNot($clazz.$getLowHighSurrogates());
    else {
        $this.$lowHighSurrogates.$xor($clazz.$getLowHighSurrogates());
        $this.$lowHighSurrogates.$and($clazz.$getLowHighSurrogates());
        $this.$altSurrogates = 1;
    }
    if (!$this.$hideBits && $clazz.$getBits() !== null) {
        if (!($this.$alt ^ $clazz.$isNegative())) {
            if (!$this.$alt)
                $this.$bits.$or($clazz.$getBits());
            else
                $this.$bits.$and($clazz.$getBits());
        } else if ($this.$alt)
            $this.$bits.$andNot($clazz.$getBits());
        else {
            $this.$bits.$xor($clazz.$getBits());
            $this.$bits.$and($clazz.$getBits());
            $this.$alt = 1;
        }
    } else {
        $curAlt = $this.$alt;
        if ($this.$nonBitSet !== null) {
            $nb = $this.$nonBitSet;
            if (!$curAlt)
                $this.$nonBitSet = jur_CharClass$11__init_0($this, $curAlt, $nb, $clazz);
            else
                $this.$nonBitSet = jur_CharClass$10__init_0($this, $curAlt, $nb, $clazz);
        } else {
            if (!$this.$inverted && $this.$bits.$isEmpty()) {
                if (!$curAlt)
                    $this.$nonBitSet = jur_CharClass$7__init_0($this, $clazz);
                else
                    $this.$nonBitSet = jur_CharClass$6__init_0($this, $clazz);
            } else if (!$curAlt)
                $this.$nonBitSet = jur_CharClass$9__init_0($this, $clazz, $curAlt);
            else
                $this.$nonBitSet = jur_CharClass$8__init_0($this, $clazz, $curAlt);
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_intersection = ($this, $clazz) => {
    let $curAlt, $nb;
    if (!$this.$mayContainSupplCodepoints0 && $clazz.$mayContainSupplCodepoints0)
        $this.$mayContainSupplCodepoints0 = 1;
    if ($clazz.$hasUCI())
        $this.$hasUCI0 = 1;
    if (!($this.$altSurrogates ^ $clazz.$altSurrogates)) {
        if (!$this.$altSurrogates)
            $this.$lowHighSurrogates.$and($clazz.$getLowHighSurrogates());
        else
            $this.$lowHighSurrogates.$or($clazz.$getLowHighSurrogates());
    } else if (!$this.$altSurrogates)
        $this.$lowHighSurrogates.$andNot($clazz.$getLowHighSurrogates());
    else {
        $this.$lowHighSurrogates.$xor($clazz.$getLowHighSurrogates());
        $this.$lowHighSurrogates.$and($clazz.$getLowHighSurrogates());
        $this.$altSurrogates = 0;
    }
    if (!$this.$hideBits && $clazz.$getBits() !== null) {
        if (!($this.$alt ^ $clazz.$isNegative())) {
            if (!$this.$alt)
                $this.$bits.$and($clazz.$getBits());
            else
                $this.$bits.$or($clazz.$getBits());
        } else if (!$this.$alt)
            $this.$bits.$andNot($clazz.$getBits());
        else {
            $this.$bits.$xor($clazz.$getBits());
            $this.$bits.$and($clazz.$getBits());
            $this.$alt = 0;
        }
    } else {
        $curAlt = $this.$alt;
        if ($this.$nonBitSet !== null) {
            $nb = $this.$nonBitSet;
            if (!$curAlt)
                $this.$nonBitSet = jur_CharClass$17__init_0($this, $curAlt, $nb, $clazz);
            else
                $this.$nonBitSet = jur_CharClass$16__init_0($this, $curAlt, $nb, $clazz);
        } else {
            if (!$this.$inverted && $this.$bits.$isEmpty()) {
                if (!$curAlt)
                    $this.$nonBitSet = jur_CharClass$13__init_0($this, $clazz);
                else
                    $this.$nonBitSet = jur_CharClass$12__init_0($this, $clazz);
            } else if (!$curAlt)
                $this.$nonBitSet = jur_CharClass$15__init_0($this, $clazz, $curAlt);
            else
                $this.$nonBitSet = jur_CharClass$14__init_0($this, $clazz, $curAlt);
            $this.$hideBits = 1;
        }
    }
},
jur_CharClass_contains = ($this, $ch) => {
    if ($this.$nonBitSet !== null)
        return $this.$alt ^ $this.$nonBitSet.$contains($ch);
    return $this.$alt ^ $this.$bits.$get0($ch);
},
jur_CharClass_getBits = $this => {
    if (!$this.$hideBits)
        return $this.$bits;
    return null;
},
jur_CharClass_getLowHighSurrogates = $this => {
    return $this.$lowHighSurrogates;
},
jur_CharClass_getInstance = $this => {
    let $bs, $res;
    if ($this.$nonBitSet !== null)
        return $this;
    $bs = $this.$getBits();
    $res = jur_CharClass$18__init_0($this, $bs);
    return $res.$setNegative($this.$isNegative());
},
jur_CharClass_toString = $this => {
    let $temp, $i;
    $temp = jl_StringBuilder__init_();
    $i = $this.$bits.$nextSetBit(0);
    while ($i >= 0) {
        $temp.$append3(jl_Character_toChars($i));
        $temp.$append0(124);
        $i = $this.$bits.$nextSetBit($i + 1 | 0);
    }
    if ($temp.$length() > 0)
        $temp.$deleteCharAt($temp.$length() - 1 | 0);
    return $temp.$toString();
},
jur_CharClass_hasUCI = $this => {
    return $this.$hasUCI0;
},
otcit_DoubleSynthesizer = $rt_classWithoutFields(),
otcit_DoubleSynthesizer_mantissa10Table = null,
otcit_DoubleSynthesizer_exp10Table = null,
otcit_DoubleSynthesizer_$callClinit = () => {
    otcit_DoubleSynthesizer_$callClinit = $rt_eraseClinit(otcit_DoubleSynthesizer);
    otcit_DoubleSynthesizer__clinit_();
},
otcit_DoubleSynthesizer_synthesizeDouble = ($mantissa, $exp, $negative) => {
    let $indexInTable, $binMantissa, $binExp, $binMantissaShift, var$8, var$9, $mantissaLowerBits, $mantissaLowerPos, $error, $correction, $binMantissaWithoutError, $low, $hi, var$17, var$18, $cmp, $iee754;
    otcit_DoubleSynthesizer_$callClinit();
    $indexInTable = 330 + $exp | 0;
    if (Long_ne($mantissa, Long_ZERO) && $indexInTable >= 0) {
        if ($indexInTable >= otcit_DoubleSynthesizer_mantissa10Table.data.length)
            return !$negative ? Infinity : (-Infinity);
        $binMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleSynthesizer_mantissa10Table.data[$indexInTable], 0);
        $binExp = otcit_DoubleSynthesizer_exp10Table.data[$indexInTable];
        $binMantissaShift = (64 - jl_Long_numberOfLeadingZeros($binMantissa) | 0) - 58 | 0;
        var$8 = $binMantissaShift >= 0 ? Long_shru($binMantissa, $binMantissaShift) : Long_shl($binMantissa,  -$binMantissaShift | 0);
        var$9 = $binExp + $binMantissaShift | 0;
        if (var$9 >= 2047)
            return !$negative ? Infinity : (-Infinity);
        $mantissaLowerBits = 5;
        $mantissaLowerPos = 32;
        $error = Long_lo(Long_and(var$8, Long_fromInt(31)));
        $correction = 16;
        if (jl_Math_abs($error - 16 | 0) <= 1) {
            $binMantissaWithoutError = Long_and(var$8, Long_fromInt(-32));
            $low = otcit_DoubleSynthesizer_calcDecMantissa($binMantissaWithoutError, $mantissaLowerPos, $indexInTable, var$9);
            $hi = otcit_DoubleSynthesizer_calcDecMantissa(Long_add($binMantissaWithoutError, Long_fromInt(32)), $mantissaLowerPos, $indexInTable, var$9);
            var$17 = Long_sub($mantissa, $low);
            var$18 = Long_sub($hi, $mantissa);
            $cmp = jl_Long_compareUnsigned(var$17, var$18);
            if ($cmp < 0)
                $correction =  -$error | 0;
            else if ($cmp > 0)
                $correction = $mantissaLowerPos - $error | 0;
        }
        var$8 = Long_add(var$8, Long_fromInt($correction));
        if (Long_ne(Long_and(var$8, Long_create(0, 4227858432)), Long_ZERO)) {
            var$8 = Long_shru(var$8, 1);
            var$9 = var$9 + 1 | 0;
        }
        if (var$9 <= 0) {
            var$8 = Long_shr(var$8, jl_Math_min(( -var$9 | 0) + 1 | 0, 64));
            var$9 = 0;
        }
        var$8 = Long_and(Long_shru(var$8, $mantissaLowerBits), Long_create(4294967295, 1048575));
        $iee754 = Long_or(var$8, Long_shl(Long_fromInt(var$9), 52));
        if ($negative)
            $iee754 = Long_xor($iee754, Long_create(0, 2147483648));
        return $rt_longBitsToDouble($iee754);
    }
    return $rt_longBitsToDouble((!$negative ? Long_ZERO : Long_create(0, 2147483648)));
},
otcit_DoubleSynthesizer_calcDecMantissa = ($mantissa, $lowerBit, $indexInTable, $binExp) => {
    let $half, $shift, $decMantissa, var$8, $decMantissaHi, $decMantissaLow, $lowerPos, $upperPos, $posCmp;
    otcit_DoubleSynthesizer_$callClinit();
    $half = $lowerBit >>> 1 | 0;
    otcit_DoubleAnalyzer_$callClinit();
    $shift = 7 - (otcit_DoubleAnalyzer_exp10Table.data[$indexInTable] - $binExp | 0) | 0;
    $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
    var$8 = Long_fromInt($half);
    $decMantissaHi = otcit_DoubleAnalyzer_mulAndShiftRight(Long_add($mantissa, var$8), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
    $decMantissaLow = otcit_DoubleAnalyzer_mulAndShiftRight(Long_sub($mantissa, var$8), otcit_DoubleAnalyzer_mantissa10Table.data[$indexInTable], $shift);
    $lowerPos = otcit_DoubleAnalyzer_findLowerDistance($decMantissa, $decMantissaLow);
    $upperPos = otcit_DoubleAnalyzer_findUpperDistance($decMantissa, $decMantissaHi);
    $posCmp = jl_Long_compareUnsigned($lowerPos, $upperPos);
    var$8 = $posCmp > 0 ? Long_mul(jl_Long_divideUnsigned($decMantissa, $lowerPos), $lowerPos) : $posCmp < 0 ? Long_add(Long_mul(jl_Long_divideUnsigned($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(jl_Long_divideUnsigned(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
    return var$8;
},
otcit_DoubleSynthesizer__clinit_ = () => {
    otcit_DoubleSynthesizer_mantissa10Table = $rt_createLongArrayFromData([Long_create(136053384, 4203730336), Long_create(85033365, 2627331460), Long_create(106291706, 3284164325), Long_create(1206606457, 4105205406), Long_create(3975354508, 2565753378), Long_create(2821709486, 3207191723), Long_create(2453395034, 4008989654), Long_create(459630072, 2505618534), Long_create(2722021238, 3132023167), Long_create(2328784724, 3915028959), Long_create(3066103188, 2446893099), Long_create(2758887162, 3058616374),
    Long_create(1301125304, 3823270468), Long_create(2960686963, 2389544042), Long_create(1553375056, 2986930053), Long_create(3015460644, 3733662566), Long_create(810921078, 2333539104), Long_create(1013651348, 2916923880), Long_create(1267064185, 3646154850), Long_create(1865656940, 2278846781), Long_create(3405812998, 2848558476), Long_create(4257266248, 3560698095), Long_create(4271404141, 2225436309), Long_create(2118029704, 2781795387), Long_create(1573795306, 3477244234), Long_create(2057363890, 2173277646),
    Long_create(424221215, 2716597058), Long_create(2677760167, 3395746322), Long_create(1199716561, 4244682903), Long_create(2360435586, 2652926814), Long_create(803060835, 3316158518), Long_create(3151309692, 4145198147), Long_create(1432697645, 2590748842), Long_create(3938355705, 3238436052), Long_create(627977335, 4048045066), Long_create(1466227658, 2530028166), Long_create(3980268221, 3162535207), Long_create(3901593452, 3953169009), Long_create(827883171, 2470730631), Long_create(4256079436, 3088413288),
    Long_create(1025131999, 3860516611), Long_create(103836588, 2412822882), Long_create(2277279383, 3016028602), Long_create(699115580, 3770035753), Long_create(3121301798, 2356272345), Long_create(680401775, 2945340432), Long_create(850502219, 3681675540), Long_create(2679047535, 2301047212), Long_create(3348809418, 2876309015), Long_create(3112269949, 3595386269), Long_create(2482039630, 2247116418), Long_create(955065890, 2808895523), Long_create(120090538, 3511119404), Long_create(2222540234, 2194449627),
    Long_create(1704433469, 2743062034), Long_create(4278025484, 3428827542), Long_create(3200048207, 4286034428), Long_create(4147513777, 2678771517), Long_create(1963166750, 3348464397), Long_create(3527700261, 4185580496), Long_create(2204812663, 2615987810), Long_create(608532181, 3269984763), Long_create(3981890698, 4087480953), Long_create(878068951, 2554675596), Long_create(1097586188, 3193344495), Long_create(298240911, 3991680619), Long_create(3944496953, 2494800386), Long_create(2783137544, 3118500483),
    Long_create(2405180106, 3898125604), Long_create(3650721214, 2436328502), Long_create(2415917870, 3045410628), Long_create(3019897337, 3806763285), Long_create(2424306748, 2379227053), Long_create(4104125259, 2974033816), Long_create(835189277, 3717542271), Long_create(2132606034, 2323463919), Long_create(1592015719, 2904329899), Long_create(916277825, 3630412374), Long_create(3793899112, 2269007733), Long_create(1521148418, 2836259667), Long_create(827693699, 3545324584), Long_create(517308562, 2215827865),
    Long_create(1720377526, 2769784831), Long_create(1076730084, 3462231039), Long_create(2283569038, 2163894399), Long_create(1780719474, 2704867999), Long_create(1152157519, 3381084999), Long_create(366455074, 4226356249), Long_create(2913388981, 2641472655), Long_create(2567994403, 3301840819), Long_create(2136251179, 4127301024), Long_create(1335156987, 2579563140), Long_create(1668946234, 3224453925), Long_create(3159924616, 4030567406), Long_create(901211061, 2519104629), Long_create(2200255651, 3148880786),
    Long_create(602835915, 3936100983), Long_create(1987385183, 2460063114), Long_create(336747831, 3075078893), Long_create(1494676613, 3843848616), Long_create(934172883, 2402405385), Long_create(2241457928, 3003006731), Long_create(1728080585, 3753758414), Long_create(6308542, 2346099009), Long_create(1081627501, 2932623761), Long_create(2425776201, 3665779701), Long_create(2052981037, 2291112313), Long_create(3639968121, 2863890391), Long_create(3476218327, 3579862989), Long_create(2709507366, 2237414368),
    Long_create(3386884208, 2796767960), Long_create(4233605260, 3495959950), Long_create(1572261463, 2184974969), Long_create(3039068653, 2731218711), Long_create(2725093993, 3414023389), Long_create(185142019, 4267529237), Long_create(652584674, 2667205773), Long_create(1889472666, 3334007216), Long_create(2361840833, 4167509020), Long_create(3623634168, 2604693137), Long_create(1308317239, 3255866422), Long_create(3782880196, 4069833027), Long_create(1827429211, 2543645642), Long_create(136802865, 3179557053),
    Long_create(1244745406, 3974446316), Long_create(2925449527, 2484028947), Long_create(2583070084, 3105036184), Long_create(3228837605, 3881295230), Long_create(944281679, 2425809519), Long_create(106610275, 3032261899), Long_create(3354488316, 3790327373), Long_create(2633426109, 2368954608), Long_create(3291782637, 2961193260), Long_create(4114728296, 3701491575), Long_create(4182317921, 2313432234), Long_create(3080413753, 2891790293), Long_create(629291719, 3614737867), Long_create(4151403709, 2259211166),
    Long_create(3041770988, 2824013958), Long_create(1654730087, 3530017448), Long_create(1034206304, 2206260905), Long_create(2366499704, 2757826131), Long_create(1884382806, 3447282664), Long_create(1177739254, 2154551665), Long_create(2545915892, 2693189581), Long_create(4256136688, 3366486976), Long_create(1025203564, 4208108721), Long_create(3325106788, 2630067950), Long_create(2008899837, 3287584938), Long_create(363641148, 4109481173), Long_create(764146629, 2568425733), Long_create(2028925111, 3210532166),
    Long_create(388672741, 4013165208), Long_create(242920463, 2508228255), Long_create(3524876051, 3135285318), Long_create(2258611415, 3919106648), Long_create(1411632134, 2449441655), Long_create(690798344, 3061802069), Long_create(1937239754, 3827252586), Long_create(2284516670, 2392032866), Long_create(708162190, 2990041083), Long_create(4106428209, 3737551353), Long_create(955904895, 2335969596), Long_create(1194881119, 2919961995), Long_create(419859574, 3649952494), Long_create(3483637706, 2281220308),
    Long_create(59579836, 2851525386), Long_create(2221958443, 3564406732), Long_create(3536207675, 2227754207), Long_create(3346517770, 2784692759), Long_create(3109405388, 3480865949), Long_create(2480249280, 2175541218), Long_create(952827952, 2719426523), Long_create(117293116, 3399283154), Long_create(2294100043, 4249103942), Long_create(360070703, 2655689964), Long_create(450088378, 3319612455), Long_create(3783835945, 4149515568), Long_create(2364897466, 2593447230), Long_create(808638184, 3241809038),
    Long_create(3158281378, 4052261297), Long_create(363313125, 2532663311), Long_create(3675366878, 3165829138), Long_create(2446724950, 3957286423), Long_create(3139815830, 2473304014), Long_create(1777286139, 3091630018), Long_create(74124026, 3864537523), Long_create(3804423900, 2415335951), Long_create(3681788051, 3019169939), Long_create(3528493240, 3773962424), Long_create(2205308275, 2358726515), Long_create(1682893520, 2948408144), Long_create(2103616900, 3685510180), Long_create(3462244210, 2303443862),
    Long_create(2180321615, 2879304828), Long_create(2725402019, 3599131035), Long_create(1166505350, 2249456897), Long_create(2531873511, 2811821121), Long_create(4238583713, 3514776401), Long_create(1038502085, 2196735251), Long_create(224385782, 2745919064), Long_create(280482227, 3432398830), Long_create(2498086432, 4290498537), Long_create(4245658580, 2681561585), Long_create(2085847753, 3351951982), Long_create(459826043, 4189939978), Long_create(1361133101, 2618712486), Long_create(3848900024, 3273390607),
    Long_create(3737383206, 4091738259), Long_create(1798993592, 2557336412), Long_create(2248741990, 3196670515), Long_create(1737185663, 3995838144), Long_create(1085741040, 2497398840), Long_create(1357176300, 3121748550), Long_create(3843954022, 3902185687), Long_create(4013084000, 2438866054), Long_create(2868871352, 3048582568), Long_create(3586089190, 3810728210), Long_create(3315047568, 2381705131), Long_create(3070067636, 2977131414), Long_create(1690100897, 3721414268), Long_create(3203796708, 2325883917),
    Long_create(783520414, 2907354897), Long_create(2053142341, 3634193621), Long_create(1820084875, 2271371013), Long_create(3348847918, 2839213766), Long_create(2038576249, 3549017208), Long_create(1274110156, 2218135755), Long_create(518895871, 2772669694), Long_create(2796103486, 3465837117), Long_create(2284435591, 2166148198), Long_create(708060841, 2707685248), Long_create(885076051, 3384606560), Long_create(1106345064, 4230758200), Long_create(691465665, 2644223875), Long_create(4085557553, 3305279843),
    Long_create(4033205117, 4131599804), Long_create(373269550, 2582249878), Long_create(2614070586, 3227812347), Long_create(2193846408, 4034765434), Long_create(2444895829, 2521728396), Long_create(3056119787, 3152160495), Long_create(2746407909, 3940200619), Long_create(1179634031, 2462625387), Long_create(400800715, 3078281734), Long_create(2648484542, 3847852167), Long_create(3265915575, 2404907604), Long_create(4082394468, 3006134505), Long_create(1881767613, 3757668132), Long_create(3323588406, 2348542582),
    Long_create(2007001860, 2935678228), Long_create(2508752325, 3669597785), Long_create(4252324763, 2293498615), Long_create(4241664130, 2866873269), Long_create(2080854690, 3583591587), Long_create(763663269, 2239744742), Long_create(3102062735, 2799680927), Long_create(2803836594, 3499601159), Long_create(3363010608, 2187250724), Long_create(4203763259, 2734063405), Long_create(2033478602, 3417579257), Long_create(3615590077, 4271974071), Long_create(3870356534, 2669983794), Long_create(2690462020, 3337479743),
    Long_create(2289335700, 4171849679), Long_create(3041447549, 2607406049), Long_create(580583964, 3259257562), Long_create(2873213603, 4074071952), Long_create(1795758502, 2546294970), Long_create(97214479, 3182868713), Long_create(1195259923, 3978585891), Long_create(210166540, 2486616182), Long_create(2410191823, 3108270227), Long_create(1938997955, 3885337784), Long_create(1211873722, 2428336115), Long_create(441100328, 3035420144), Long_create(551375410, 3794275180), Long_create(2492093279, 2371421987),
    Long_create(2041374775, 2964277484), Long_create(2551718469, 3705346855), Long_create(3205436779, 2315841784), Long_create(4006795974, 2894802230), Long_create(2861011319, 3618502788), Long_create(3935615723, 2261564242), Long_create(2772036005, 2826955303), Long_create(2391303183, 3533694129), Long_create(4178919049, 2208558830), Long_create(3076165163, 2760698538), Long_create(1697722806, 3450873173), Long_create(1597947666, 2156795733), Long_create(3071176406, 2695994666), Long_create(1691486860, 3369993333),
    Long_create(3188100399, 4212491666), Long_create(3066304573, 2632807291), Long_create(2759138893, 3291009114), Long_create(1301439968, 4113761393), Long_create(3497754540, 2571100870), Long_create(2224709527, 3213876088), Long_create(2780886909, 4017345110), Long_create(664312494, 2510840694), Long_create(2977874265, 3138550867), Long_create(2648601008, 3923188584), Long_create(1655375630, 2451992865), Long_create(3142961361, 3064991081), Long_create(707476230, 3831238852), Long_create(2589656291, 2394524282),
    Long_create(1089586716, 2993155353), Long_create(2435725219, 3741444191), Long_create(3132940998, 2338402619), Long_create(2842434424, 2923003274), Long_create(1405559382, 3653754093), Long_create(1415345525, 2283596308), Long_create(1769181907, 2854495385), Long_create(3285219208, 3568119231), Long_create(3663874741, 2230074519), Long_create(3506101602, 2787593149), Long_create(1161401530, 3484491437), Long_create(1262746869, 2177807148), Long_create(1578433586, 2722258935), Long_create(899300158, 3402823669),
    Long_create(2197867022, 4253529586), Long_create(2447408712, 2658455991), Long_create(1985519067, 3323069989), Long_create(3555640657, 4153837486), Long_create(1148533587, 2596148429), Long_create(2509408807, 3245185536), Long_create(3136761009, 4056481920), Long_create(1960475631, 2535301200), Long_create(2450594539, 3169126500), Long_create(3063243173, 3961408125), Long_create(2451397895, 2475880078), Long_create(916763721, 3094850098), Long_create(3293438299, 3868562622), Long_create(984657113, 2417851639),
    Long_create(157079567, 3022314549), Long_create(1270091283, 3777893186), Long_create(1867548876, 2361183241), Long_create(3408177919, 2951479051), Long_create(3186480575, 3689348814), Long_create(917808535, 2305843009), Long_create(2221002493, 2882303761), Long_create(3849994940, 3602879701), Long_create(2943117750, 2251799813), Long_create(457671715, 2814749767), Long_create(3793315116, 3518437208), Long_create(2370821947, 2199023255), Long_create(1889785610, 2748779069), Long_create(3435973837, 3435973836),
    Long_create(0, 2147483648), Long_create(0, 2684354560), Long_create(0, 3355443200), Long_create(0, 4194304000), Long_create(0, 2621440000), Long_create(0, 3276800000), Long_create(0, 4096000000), Long_create(0, 2560000000), Long_create(0, 3200000000), Long_create(0, 4000000000), Long_create(0, 2500000000), Long_create(0, 3125000000), Long_create(0, 3906250000), Long_create(0, 2441406250), Long_create(2147483648, 3051757812), Long_create(2684354560, 3814697265), Long_create(67108864, 2384185791), Long_create(3305111552, 2980232238),
    Long_create(1983905792, 3725290298), Long_create(2313682944, 2328306436), Long_create(2892103680, 2910383045), Long_create(393904128, 3637978807), Long_create(1856802816, 2273736754), Long_create(173519872, 2842170943), Long_create(3438125312, 3552713678), Long_create(1075086496, 2220446049), Long_create(2417599944, 2775557561), Long_create(4095741754, 3469446951), Long_create(4170451332, 2168404344), Long_create(918096869, 2710505431), Long_create(73879263, 3388131789), Long_create(1166090902, 4235164736),
    Long_create(728806814, 2646977960), Long_create(911008517, 3308722450), Long_create(3286244295, 4135903062), Long_create(980160860, 2584939414), Long_create(3372684723, 3231174267), Long_create(3142114080, 4038967834), Long_create(3037563124, 2524354896), Long_create(3796953905, 3155443620), Long_create(451225085, 3944304526), Long_create(3503241150, 2465190328), Long_create(84084142, 3081487911), Long_create(3326330649, 3851859888), Long_create(2078956656, 2407412430), Long_create(451212172, 3009265538),
    Long_create(2711498863, 3761581922), Long_create(2768428613, 2350988701), Long_create(239310295, 2938735877), Long_create(1372879692, 3673419846), Long_create(4079275280, 2295887403), Long_create(4025352276, 2869859254), Long_create(2884206696, 3587324068), Long_create(3950112833, 2242077542), Long_create(2790157394, 2802596928), Long_create(3487696742, 3503246160), Long_create(2179810464, 2189528850), Long_create(577279432, 2736911063), Long_create(3942824762, 3421138828), Long_create(633563656, 4276423536),
    Long_create(395977285, 2672764710), Long_create(2642455254, 3340955887), Long_create(2229327244, 4176194859), Long_create(856458615, 2610121787), Long_create(4291798741, 3262652233), Long_create(2143522955, 4078315292), Long_create(3487185495, 2548947057), Long_create(1137756396, 3186183822), Long_create(3569679143, 3982729777), Long_create(620436729, 2489206111), Long_create(3996771383, 3111507638), Long_create(2848480580, 3889384548), Long_create(3927784011, 2430865342), Long_create(2762246365, 3038581678),
    Long_create(1305324309, 3798227098), Long_create(1889569517, 2373891936), Long_create(2361961896, 2967364920), Long_create(2952452370, 3709206150), Long_create(771540907, 2318253844), Long_create(964426134, 2897817305), Long_create(2279274492, 3622271631), Long_create(3035159293, 2263919769), Long_create(572723645, 2829899712), Long_create(715904556, 3537374640), Long_create(447440347, 2210859150), Long_create(2706784082, 2763573937), Long_create(162254631, 3454467422), Long_create(3322634616, 2159042138),
    Long_create(2005809622, 2698802673), Long_create(3581003852, 3373503341), Long_create(1255029343, 4216879177), Long_create(3468747899, 2635549485), Long_create(1114709402, 3294436857), Long_create(2467128577, 4118046071), Long_create(3152568096, 2573778794), Long_create(1793226473, 3217223493), Long_create(3315274915, 4021529366), Long_create(998304998, 2513455854), Long_create(3395364895, 3141819817), Long_create(1022980647, 3927274772), Long_create(2786846552, 2454546732), Long_create(3483558190, 3068183415),
    Long_create(3280705914, 3835229269), Long_create(2587312108, 2397018293), Long_create(12914663, 2996272867), Long_create(3237368801, 3745341083), Long_create(1486484589, 2340838177), Long_create(2931847560, 2926047721), Long_create(443583978, 3657559652), Long_create(2424723634, 2285974782), Long_create(883420895, 2857468478), Long_create(3251759766, 3571835597), Long_create(2569220766, 2232397248), Long_create(3211525958, 2790496560), Long_create(4014407447, 3488120700), Long_create(361521006, 2180075438),
    Long_create(2599384906, 2725094297), Long_create(28005660, 3406367872), Long_create(35007075, 4257959840), Long_create(21879422, 2661224900), Long_create(27349278, 3326531125), Long_create(1107928421, 4158163906), Long_create(1766197087, 2598852441), Long_create(3281488183, 3248565551), Long_create(3028118405, 4060706939), Long_create(1355703091, 2537941837), Long_create(2768370688, 3172427296), Long_create(3460463360, 3965534120), Long_create(2162789600, 2478458825), Long_create(3777228824, 3098073531),
    Long_create(3647794206, 3872591914), Long_create(3353613203, 2420369946), Long_create(2044532855, 3025462433), Long_create(3629407893, 3781828041), Long_create(657767197, 2363642526), Long_create(2969692644, 2954553157), Long_create(490890333, 3693191447), Long_create(1917419194, 2308244654), Long_create(249290345, 2885305818), Long_create(2459096579, 3606632272), Long_create(1536935362, 2254145170), Long_create(4068652851, 2817681462), Long_create(2938332415, 3522101828), Long_create(3983941407, 2201313642),
    Long_create(2832443111, 2751642053), Long_create(319328417, 3439552567), Long_create(1810192997, 2149720354), Long_create(115257598, 2687150443), Long_create(3365297469, 3358938053), Long_create(985396365, 4198672567), Long_create(2226485464, 2624170354), Long_create(635623182, 3280212943), Long_create(4015754449, 4100266178), Long_create(3583588355, 2562666361), Long_create(1258259972, 3203332952), Long_create(1572824965, 4004166190), Long_create(4204241075, 2502603868), Long_create(960334048, 3128254836),
    Long_create(1200417559, 3910318545), Long_create(3434615535, 2443949090), Long_create(2145785770, 3054936363), Long_create(1608490389, 3818670454), Long_create(4226531965, 2386669033), Long_create(2061939484, 2983336292), Long_create(2577424355, 3729170365), Long_create(2147761134, 2330731478), Long_create(537217770, 2913414348), Long_create(671522212, 3641767935), Long_create(2030314119, 2276104959), Long_create(1464150824, 2845131199), Long_create(756446706, 3556413999), Long_create(2083391927, 2222758749),
    Long_create(3677981733, 2778448436), Long_create(302509871, 3473060546), Long_create(1262810493, 2170662841), Long_create(2652254940, 2713328551), Long_create(2241576851, 3391660689), Long_create(3875712888, 4239575861), Long_create(2959191467, 2649734913), Long_create(477763862, 3312168642), Long_create(2744688476, 4140210802), Long_create(2789172121, 2587631751), Long_create(2412723328, 3234539689), Long_create(4089645983, 4043174611), Long_create(2019157828, 2526984132), Long_create(2523947285, 3158730165),
    Long_create(4228675930, 3948412706), Long_create(3716664280, 2467757941), Long_create(1424604878, 3084697427), Long_create(707014274, 3855871784), Long_create(441883921, 2409919865), Long_create(1626096725, 3012399831), Long_create(958879083, 3765499789), Long_create(1136170339, 2353437368), Long_create(1420212923, 2941796710), Long_create(3922749802, 3677245887), Long_create(4062331362, 2298278679), Long_create(4004172379, 2872848349), Long_create(1783990002, 3591060437), Long_create(1651864663, 2244412773),
    Long_create(3138572653, 2805515966), Long_create(1775732168, 3506894958), Long_create(36090781, 2191809349), Long_create(1118855300, 2739761686), Long_create(3546052773, 3424702107), Long_create(3358824142, 4280877634), Long_create(3173006913, 2675548521), Long_create(745033169, 3344435652), Long_create(931291462, 4180544565), Long_create(1118928076, 2612840353), Long_create(2472401918, 3266050441), Long_create(4164244222, 4082563051), Long_create(2065781727, 2551601907), Long_create(1508485334, 3189502384),
    Long_create(1885606668, 3986877980), Long_create(3325987816, 2491798737), Long_create(936259297, 3114748422), Long_create(3317807770, 3893435527), Long_create(3684242592, 2433397204), Long_create(310335944, 3041746506), Long_create(2535403578, 3802183132), Long_create(3732110884, 2376364457), Long_create(1443913133, 2970455572), Long_create(1804891417, 3713069465), Long_create(3812411696, 2320668415), Long_create(3691772795, 2900835519), Long_create(3540974170, 3626044399), Long_create(3823721592, 2266277749),
    Long_create(1558426518, 2832847187), Long_create(874291324, 3541058984), Long_create(546432078, 2213161865), Long_create(1756781921, 2766452331), Long_create(1122235577, 3458065414), Long_create(3922622708, 2161290883), Long_create(3829536561, 2701613604), Long_create(491953405, 3377017006), Long_create(2762425404, 4221271257), Long_create(115903142, 2638294536), Long_create(144878927, 3297868170), Long_create(2328582307, 4122335212), Long_create(3602847590, 2576459507), Long_create(3429817663, 3220574384),
    Long_create(4287272079, 4025717980), Long_create(532061401, 2516073738), Long_create(2812560400, 3145092172), Long_create(3515700500, 3931365215), Long_create(3807925548, 2457103259), Long_create(3686165111, 3071379074), Long_create(2460222741, 3839223843), Long_create(1000768301, 2399514902), Long_create(3398444024, 2999393627), Long_create(3174313207, 3749242034), Long_create(3057687578, 2343276271), Long_create(2748367649, 2929095339), Long_create(2361717737, 3661369174), Long_create(402331761, 2288355734),
    Long_create(2650398350, 2860444667), Long_create(2239256113, 3575555834), Long_create(2473276895, 2234722396), Long_create(3091596119, 2793402995), Long_create(2790753324, 3491753744), Long_create(1744220828, 2182346090), Long_create(32792387, 2727932613), Long_create(1114732307, 3409915766), Long_create(3540899032, 4262394707), Long_create(1676190983, 2663996692), Long_create(2095238729, 3329995865), Long_create(3692790235, 4162494831), Long_create(3918606633, 2601559269), Long_create(1677032819, 3251949087),
    Long_create(1022549200, 4064936359), Long_create(2249705986, 2540585224), Long_create(2812132482, 3175731530), Long_create(1367681955, 3969664413), Long_create(1391672134, 2481040258), Long_create(3887073815, 3101300322), Long_create(2711358621, 3876625403), Long_create(1157728226, 2422890877), Long_create(2520902107, 3028613596), Long_create(3151127633, 3785766995), Long_create(1432583859, 2366104372), Long_create(1790729824, 2957630465), Long_create(3312154103, 3697038081), Long_create(459483579, 2310648801),
    Long_create(1648096297, 2888311001), Long_create(3133862196, 3610388751), Long_create(3569276608, 2256492969), Long_create(1240370288, 2820616212), Long_create(1550462860, 3525770265), Long_create(3653393848, 2203606415), Long_create(3493000486, 2754508019), Long_create(3292508783, 3443135024), Long_create(2057817989, 2151959390), Long_create(424788839, 2689949238), Long_create(2678469697, 3362436547), Long_create(2274345297, 4203045684), Long_create(3568949458, 2626903552), Long_create(166219527, 3283629441),
    Long_create(1281516233, 4104536801), Long_create(3485302206, 2565335500), Long_create(61660461, 3206669376), Long_create(77075576, 4008336720), Long_create(48172235, 2505210450), Long_create(2207698942, 3131513062), Long_create(612140029, 3914391328), Long_create(382587518, 2446494580), Long_create(478234398, 3058118225), Long_create(1671534821, 3822647781), Long_create(1581580175, 2389154863), Long_create(903233395, 2986443579), Long_create(55299920, 3733054474), Long_create(1108304274, 2333159046)]);
    otcit_DoubleSynthesizer_exp10Table = $rt_createShortArrayFromData([(-76), (-72), (-69), (-66), (-62), (-59), (-56), (-52), (-49), (-46), (-42), (-39), (-36), (-32), (-29), (-26), (-22), (-19), (-16), (-12), (-9), (-6), (-2), 1, 4, 8, 11, 14, 17, 21, 24, 27, 31, 34, 37, 41, 44, 47, 51, 54, 57, 61, 64, 67, 71, 74, 77, 81, 84, 87, 91, 94, 97, 101, 104, 107, 110, 114, 117, 120, 124, 127, 130, 134, 137, 140, 144, 147, 150, 154, 157, 160, 164, 167, 170, 174, 177, 180, 184, 187, 190, 194, 197, 200, 204, 207, 210,
    213, 217, 220, 223, 227, 230, 233, 237, 240, 243, 247, 250, 253, 257, 260, 263, 267, 270, 273, 277, 280, 283, 287, 290, 293, 297, 300, 303, 306, 310, 313, 316, 320, 323, 326, 330, 333, 336, 340, 343, 346, 350, 353, 356, 360, 363, 366, 370, 373, 376, 380, 383, 386, 390, 393, 396, 400, 403, 406, 409, 413, 416, 419, 423, 426, 429, 433, 436, 439, 443, 446, 449, 453, 456, 459, 463, 466, 469, 473, 476, 479, 483, 486, 489, 493, 496, 499, 502, 506, 509, 512, 516, 519, 522, 526, 529, 532, 536, 539, 542, 546, 549,
    552, 556, 559, 562, 566, 569, 572, 576, 579, 582, 586, 589, 592, 595, 599, 602, 605, 609, 612, 615, 619, 622, 625, 629, 632, 635, 639, 642, 645, 649, 652, 655, 659, 662, 665, 669, 672, 675, 679, 682, 685, 689, 692, 695, 698, 702, 705, 708, 712, 715, 718, 722, 725, 728, 732, 735, 738, 742, 745, 748, 752, 755, 758, 762, 765, 768, 772, 775, 778, 782, 785, 788, 791, 795, 798, 801, 805, 808, 811, 815, 818, 821, 825, 828, 831, 835, 838, 841, 845, 848, 851, 855, 858, 861, 865, 868, 871, 875, 878, 881, 885, 888,
    891, 894, 898, 901, 904, 908, 911, 914, 918, 921, 924, 928, 931, 934, 938, 941, 944, 948, 951, 954, 958, 961, 964, 968, 971, 974, 978, 981, 984, 987, 991, 994, 997, 1001, 1004, 1007, 1011, 1014, 1017, 1021, 1024, 1027, 1031, 1034, 1037, 1041, 1044, 1047, 1051, 1054, 1057, 1061, 1064, 1067, 1071, 1074, 1077, 1081, 1084, 1087, 1090, 1094, 1097, 1100, 1104, 1107, 1110, 1114, 1117, 1120, 1124, 1127, 1130, 1134, 1137, 1140, 1144, 1147, 1150, 1154, 1157, 1160, 1164, 1167, 1170, 1174, 1177, 1180, 1183, 1187, 1190,
    1193, 1197, 1200, 1203, 1207, 1210, 1213, 1217, 1220, 1223, 1227, 1230, 1233, 1237, 1240, 1243, 1247, 1250, 1253, 1257, 1260, 1263, 1267, 1270, 1273, 1276, 1280, 1283, 1286, 1290, 1293, 1296, 1300, 1303, 1306, 1310, 1313, 1316, 1320, 1323, 1326, 1330, 1333, 1336, 1340, 1343, 1346, 1350, 1353, 1356, 1360, 1363, 1366, 1370, 1373, 1376, 1379, 1383, 1386, 1389, 1393, 1396, 1399, 1403, 1406, 1409, 1413, 1416, 1419, 1423, 1426, 1429, 1433, 1436, 1439, 1443, 1446, 1449, 1453, 1456, 1459, 1463, 1466, 1469, 1472,
    1476, 1479, 1482, 1486, 1489, 1492, 1496, 1499, 1502, 1506, 1509, 1512, 1516, 1519, 1522, 1526, 1529, 1532, 1536, 1539, 1542, 1546, 1549, 1552, 1556, 1559, 1562, 1566, 1569, 1572, 1575, 1579, 1582, 1585, 1589, 1592, 1595, 1599, 1602, 1605, 1609, 1612, 1615, 1619, 1622, 1625, 1629, 1632, 1635, 1639, 1642, 1645, 1649, 1652, 1655, 1659, 1662, 1665, 1668, 1672, 1675, 1678, 1682, 1685, 1688, 1692, 1695, 1698, 1702, 1705, 1708, 1712, 1715, 1718, 1722, 1725, 1728, 1732, 1735, 1738, 1742, 1745, 1748, 1752, 1755,
    1758, 1761, 1765, 1768, 1771, 1775, 1778, 1781, 1785, 1788, 1791, 1795, 1798, 1801, 1805, 1808, 1811, 1815, 1818, 1821, 1825, 1828, 1831, 1835, 1838, 1841, 1845, 1848, 1851, 1855, 1858, 1861, 1864, 1868, 1871, 1874, 1878, 1881, 1884, 1888, 1891, 1894, 1898, 1901, 1904, 1908, 1911, 1914, 1918, 1921, 1924, 1928, 1931, 1934, 1938, 1941, 1944, 1948, 1951, 1954, 1957, 1961, 1964, 1967, 1971, 1974, 1977, 1981, 1984, 1987, 1991, 1994, 1997, 2001, 2004, 2007, 2011, 2014, 2017, 2021, 2024, 2027, 2031, 2034, 2037,
    2041, 2044, 2047, 2051, 2054, 2057, 2060, 2064, 2067, 2070, 2074, 2077, 2080, 2084, 2087, 2090, 2094, 2097, 2100, 2104, 2107, 2110, 2114]);
},
otcit_FloatAnalyzer$Result = $rt_classWithoutFields(),
otcit_FloatAnalyzer$Result__init_ = $this => {
    jl_Object__init_($this);
},
otcit_FloatAnalyzer$Result__init_0 = () => {
    let var_0 = new otcit_FloatAnalyzer$Result();
    otcit_FloatAnalyzer$Result__init_(var_0);
    return var_0;
};
function oe_NegativeCycleException() {
    let a = this; jl_Exception.call(a);
    a.$violatingIndex = 0;
    a.$path = null;
    a.$edgePath = null;
}
let oe_NegativeCycleException__init_0 = ($this, $indexInCycle, $violatingPath, $violatingEdgePath, $message) => {
    jl_Exception__init_0($this, $message);
    $this.$violatingIndex = $indexInCycle;
    $this.$path = $violatingPath;
    $this.$edgePath = $violatingEdgePath;
},
oe_NegativeCycleException__init_ = (var_0, var_1, var_2, var_3) => {
    let var_4 = new oe_NegativeCycleException();
    oe_NegativeCycleException__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
},
oe_NegativeCycleException_getViolatingEdgePath = $this => {
    return $this.$edgePath;
},
jur_UCIDecomposedCharSet = $rt_classWithoutFields(jur_DecomposedCharSet),
jur_UCIDecomposedCharSet__init_ = ($this, $decomp, $decomposedCharLength) => {
    jur_DecomposedCharSet__init_($this, $decomp, $decomposedCharLength);
},
jur_UCIDecomposedCharSet__init_0 = (var_0, var_1) => {
    let var_2 = new jur_UCIDecomposedCharSet();
    jur_UCIDecomposedCharSet__init_(var_2, var_0, var_1);
    return var_2;
},
jl_String$_clinit_$lambda$_115_0 = $rt_classWithoutFields(),
jl_String$_clinit_$lambda$_115_0__init_ = var$0 => {
    jl_Object__init_(var$0);
},
jl_String$_clinit_$lambda$_115_0__init_0 = () => {
    let var_0 = new jl_String$_clinit_$lambda$_115_0();
    jl_String$_clinit_$lambda$_115_0__init_(var_0);
    return var_0;
},
ju_HashMap$EntryIterator = $rt_classWithoutFields(ju_HashMap$AbstractMapIterator),
ju_HashMap$EntryIterator__init_ = ($this, $map) => {
    ju_HashMap$AbstractMapIterator__init_($this, $map);
},
ju_HashMap$EntryIterator__init_0 = var_0 => {
    let var_1 = new ju_HashMap$EntryIterator();
    ju_HashMap$EntryIterator__init_(var_1, var_0);
    return var_1;
},
ju_HashMap$EntryIterator_next = $this => {
    ju_HashMap$AbstractMapIterator_makeNext($this);
    return $this.$currentEntry;
},
ju_HashMap$EntryIterator_next0 = $this => {
    return $this.$next1();
},
ju_Collections = $rt_classWithoutFields(),
ju_Collections_EMPTY_SET = null,
ju_Collections_EMPTY_MAP = null,
ju_Collections_EMPTY_LIST = null,
ju_Collections_EMPTY_ITERATOR = null,
ju_Collections_EMPTY_LIST_ITERATOR = null,
ju_Collections_reverseOrder = null,
ju_Collections_$callClinit = () => {
    ju_Collections_$callClinit = $rt_eraseClinit(ju_Collections);
    ju_Collections__clinit_();
},
ju_Collections_sort = ($list, $c) => {
    let $array, $i, var$5;
    ju_Collections_$callClinit();
    if ($c === null)
        $c = ju_Comparator$NaturalOrder_instance();
    $array = $rt_createArray(jl_Object, $list.$size());
    $list.$toArray($array);
    ju_Arrays_sort0($array, $c);
    $i = 0;
    while (true) {
        var$5 = $array.data;
        if ($i >= var$5.length)
            break;
        $list.$set0($i, var$5[$i]);
        $i = $i + 1 | 0;
    }
},
ju_Collections_reverse0 = $list => {
    let $randomAccess;
    ju_Collections_$callClinit();
    if ($rt_isInstance($list, ju_RandomAccess))
        ju_Collections_reverse($list, 0, $list.$size());
    else {
        $randomAccess = ju_ArrayList__init_3($list);
        ju_Collections_reverse($randomAccess, 0, $randomAccess.$size());
        $list.$clear();
        $list.$addAll($randomAccess);
    }
},
ju_Collections_reverse = ($list, $i, $to) => {
    let $half, $j, $tmp_0;
    ju_Collections_$callClinit();
    $half = ($i + $to | 0) / 2 | 0;
    $j = $to - 1 | 0;
    while ($i < $half) {
        $tmp_0 = $list.$get($i);
        $list.$set0($i, $list.$get($j));
        $list.$set0($j, $tmp_0);
        $i = $i + 1 | 0;
        $j = $j + (-1) | 0;
    }
},
ju_Collections__clinit_ = () => {
    ju_Collections_EMPTY_SET = ju_Collections$1__init_0();
    ju_Collections_EMPTY_MAP = ju_Collections$2__init_0();
    ju_Collections_EMPTY_LIST = ju_Collections$3__init_0();
    ju_Collections_EMPTY_ITERATOR = ju_Collections$4__init_0();
    ju_Collections_EMPTY_LIST_ITERATOR = ju_Collections$5__init_0();
    ju_Collections_reverseOrder = ju_Collections$_clinit_$lambda$_59_0__init_0();
},
ogi_UndirectedGraph = $rt_classWithoutFields(oc_MutableGraph),
ogi_UndirectedGraph_LOGGER = null,
ogi_UndirectedGraph_$callClinit = () => {
    ogi_UndirectedGraph_$callClinit = $rt_eraseClinit(ogi_UndirectedGraph);
    ogi_UndirectedGraph__clinit_();
},
ogi_UndirectedGraph__init_0 = $this => {
    ogi_UndirectedGraph_$callClinit();
    oc_MutableGraph__init_($this);
},
ogi_UndirectedGraph__init_ = () => {
    let var_0 = new ogi_UndirectedGraph();
    ogi_UndirectedGraph__init_0(var_0);
    return var_0;
},
ogi_UndirectedGraph__init_1 = ($this, $n) => {
    ogi_UndirectedGraph_$callClinit();
    oc_MutableGraph__init_0($this, $n);
},
ogi_UndirectedGraph__init_2 = var_0 => {
    let var_1 = new ogi_UndirectedGraph();
    ogi_UndirectedGraph__init_1(var_1, var_0);
    return var_1;
},
ogi_UndirectedGraph_addVertex = ($this, $v) => {
    oc_MutableGraph_addVertex($this, $v);
},
ogi_UndirectedGraph_addEdge0 = ($this, $e) => {
    let $endpoints, $toUpdate, var$4;
    $endpoints = $e.$getEndpoints();
    ($endpoints.$getFirst()).$addToNeighbors2($endpoints.$getSecond(), $e);
    ($endpoints.$getSecond()).$addToNeighbors2($endpoints.$getFirst(), $e);
    ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
    ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$add2(jl_Integer_valueOf($e.$getId()));
    $toUpdate = $endpoints.$getFirst();
    $toUpdate.$setDegree($toUpdate.$getDegree() + 1 | 0);
    var$4 = ($e.$getEndpoints()).$getSecond();
    var$4.$setDegree(var$4.$getDegree() + 1 | 0);
    oc_MutableGraph_addEdge($this, $e);
},
ogi_UndirectedGraph_removeEdge = ($this, $e) => {
    let $endpoints, $toUpdate, var$4;
    if (!($this.$getEdges0()).$contains0($e)) {
        ogi_UndirectedGraph_LOGGER.$error($rt_s(350));
        $rt_throw(jl_IllegalArgumentException__init_());
    }
    $endpoints = $e.$getEndpoints();
    ($endpoints.$getFirst()).$removeFromNeighbors1($endpoints.$getSecond(), $e);
    ($endpoints.$getSecond()).$removeFromNeighbors1($endpoints.$getFirst(), $e);
    ($this.$incidenceMap.$get($e.$getFirstEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
    ($this.$incidenceMap.$get($e.$getSecondEndpointId())).$remove0(jl_Integer_valueOf($e.$getId()));
    $toUpdate = $endpoints.$getFirst();
    $toUpdate.$setDegree($toUpdate.$getDegree() - 1 | 0);
    var$4 = ($e.$getEndpoints()).$getSecond();
    var$4.$setDegree(var$4.$getDegree() - 1 | 0);
    oc_MutableGraph_removeEdge($this, $e);
},
ogi_UndirectedGraph_getDeepCopy0 = $this => {
    let $ans, $indexedEdges, $indexedVertices, $n, $i, $temp, $temp2, $forSorting, $m, $e, $e2, $$je;
    a: {
        try {
            $ans = ogi_UndirectedGraph__init_();
            $indexedEdges = $this.$getInternalEdgeMap();
            $indexedVertices = $this.$getInternalVertexMap();
            $n = ($this.$getVertices0()).$size();
            $i = 1;
            while ($i <= $n) {
                $temp = ovi_UndirectedVertex__init_($rt_s(351));
                $temp2 = $indexedVertices.$get($i);
                $temp.$setCoordinates($temp2.$getX(), $temp2.$getY());
                $ans.$addVertex0($temp, $i);
                $i = $i + 1 | 0;
            }
            $forSorting = gt_TIntArrayList__init_0($indexedEdges.$keys());
            $forSorting.$sort1();
            $m = $forSorting.$size();
            $i = 0;
            while ($i < $m) {
                $e = $indexedEdges.$get($forSorting.$get2($i));
                $e2 = oli_Edge__init_($rt_s(351), ogu_Pair__init_(($ans.$getInternalVertexMap()).$get((($e.$getEndpoints()).$getFirst()).$getId()), ($ans.$getInternalVertexMap()).$get((($e.$getEndpoints()).$getSecond()).$getId())), $e.$getCost());
                $e2.$setRequired($e.$isRequired());
                $e2.$setMatchId($e.$getId());
                $e2.$setZone($e.$getZone());
                $e2.$setType0($e.$getType());
                $e2.$setMaxSpeed($e.$getMaxSpeed());
                $ans.$addEdge7($e2, $e.$getId());
                $i = $i + 1 | 0;
            }
            $ans.$setDepotId($this.$getDepotId());
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_Exception) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return $ans;
    }
    $e.$printStackTrace0();
    return null;
},
ogi_UndirectedGraph_constructEdge0 = ($this, $i, $j, $desc, $cost) => {
    if (($this.$getInternalVertexMap()).$containsKey0($i) && ($this.$getInternalVertexMap()).$containsKey0($j) && $i >= 0 && $j >= 0)
        return oli_Edge__init_($desc, ogu_Pair__init_(($this.$getInternalVertexMap()).$get($i), ($this.$getInternalVertexMap()).$get($j)), $cost);
    ogi_UndirectedGraph_LOGGER.$error($rt_s(348));
    $rt_throw(oe_InvalidEndpointsException__init_());
},
ogi_UndirectedGraph_constructVertex0 = ($this, $desc) => {
    return ovi_UndirectedVertex__init_($desc);
},
ogi_UndirectedGraph_addVertex0 = ($this, var$1) => {
    $this.$addVertex2(var$1);
},
ogi_UndirectedGraph_addEdge = ($this, var$1) => {
    $this.$addEdge0(var$1);
},
ogi_UndirectedGraph_getDeepCopy = $this => {
    return $this.$getDeepCopy2();
},
ogi_UndirectedGraph_constructEdge = ($this, var$1, var$2, var$3, var$4) => {
    return $this.$constructEdge4(var$1, var$2, var$3, var$4);
},
ogi_UndirectedGraph_constructVertex = ($this, var$1) => {
    return $this.$constructVertex3(var$1);
},
ogi_UndirectedGraph__clinit_ = () => {
    ogi_UndirectedGraph_LOGGER = ou_SimpleLogger_getLogger($rt_cls(ogi_UndirectedGraph));
};
$rt_packages([-1, "oarlib", 0, "core", 0, "route", 2, "impl", 0, "problem", 4, "impl", 0, "vertex", 6, "impl", 0, "teavm", 0, "link", 9, "impl", 0, "exceptions", 0, "graph", 12, "impl", 12, "util", 0, "solver", 15, "impl", -1, "java", 17, "util", 18, "regex", 17, "lang", -1, "org", 21, "teavm", 22, "classlib", 23, "impl", 24, "unicode"
]);
$rt_metadata([jl_Object, "Object", 20, 0, [], 0, 3, 0, 0, ["$getClass0", $rt_wrapFunction0(jl_Object_getClass), "$hashCode0", $rt_wrapFunction0(jl_Object_hashCode), "$equals", $rt_wrapFunction1(jl_Object_equals), "$toString", $rt_wrapFunction0(jl_Object_toString), "$identity", $rt_wrapFunction0(jl_Object_identity)],
jur_AbstractCharClass$LazyCharClass, 0, jl_Object, [], 1, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyCharClass__init_), "$getValue", $rt_wrapFunction1(jur_AbstractCharClass$LazyCharClass_getValue)],
jur_AbstractCharClass$LazyBlank, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyBlank_computeValue)],
jur_AbstractCharClass$LazyCntrl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCntrl_computeValue)],
jl_Throwable, 0, jl_Object, [], 0, 3, 0, 0, ["$fillInStackTrace", $rt_wrapFunction0(jl_Throwable_fillInStackTrace), "$getMessage", $rt_wrapFunction0(jl_Throwable_getMessage), "$getLocalizedMessage", $rt_wrapFunction0(jl_Throwable_getLocalizedMessage), "$getCause", $rt_wrapFunction0(jl_Throwable_getCause), "$printStackTrace0", $rt_wrapFunction0(jl_Throwable_printStackTrace), "$printStackTrace", $rt_wrapFunction1(jl_Throwable_printStackTrace0)],
jl_Exception, 0, jl_Throwable, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_Exception__init_), "$_init_0", $rt_wrapFunction1(jl_Exception__init_0)],
jl_RuntimeException, 0, jl_Exception, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_RuntimeException__init_), "$_init_0", $rt_wrapFunction1(jl_RuntimeException__init_0)],
jl_IndexOutOfBoundsException, "IndexOutOfBoundsException", 20, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_IndexOutOfBoundsException__init_0), "$_init_0", $rt_wrapFunction1(jl_IndexOutOfBoundsException__init_1)],
jur_SpecialToken, 0, jl_Object, [], 1, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_SpecialToken__init_)],
jur_AbstractCharClass, 0, jur_SpecialToken, [], 1, 0, 0, jur_AbstractCharClass_$callClinit, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass__init_), "$getBits", $rt_wrapFunction0(jur_AbstractCharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getLowHighSurrogates), "$hasLowHighSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_hasLowHighSurrogates), "$mayContainSupplCodepoints", $rt_wrapFunction0(jur_AbstractCharClass_mayContainSupplCodepoints), "$getInstance", $rt_wrapFunction0(jur_AbstractCharClass_getInstance),
"$getSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getSurrogates), "$getWithoutSurrogates", $rt_wrapFunction0(jur_AbstractCharClass_getWithoutSurrogates), "$hasUCI", $rt_wrapFunction0(jur_AbstractCharClass_hasUCI), "$setNegative", $rt_wrapFunction1(jur_AbstractCharClass_setNegative), "$isNegative", $rt_wrapFunction0(jur_AbstractCharClass_isNegative)],
jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_54", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaWhitespace$1_contains)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue)],
ji_Serializable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Number, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_Number__init_)],
jl_Comparable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Integer, "Integer", 20, jl_Number, [jl_Comparable], 0, 3, 0, jl_Integer_$callClinit, ["$_init_1", $rt_wrapFunction1(jl_Integer__init_), "$intValue", $rt_wrapFunction0(jl_Integer_intValue), "$toString", $rt_wrapFunction0(jl_Integer_toString1), "$hashCode0", $rt_wrapFunction0(jl_Integer_hashCode), "$equals", $rt_wrapFunction1(jl_Integer_equals), "$compareTo", $rt_wrapFunction1(jl_Integer_compareTo), "$compareTo0", $rt_wrapFunction1(jl_Integer_compareTo0)],
jl_AbstractStringBuilder$Constants, 0, jl_Object, [], 0, 0, 0, jl_AbstractStringBuilder$Constants_$callClinit, 0,
jur_AbstractSet, 0, jl_Object, [], 1, 0, 0, jur_AbstractSet_$callClinit, ["$_init_", $rt_wrapFunction0(jur_AbstractSet__init_), "$_init_8", $rt_wrapFunction1(jur_AbstractSet__init_0), "$find", $rt_wrapFunction3(jur_AbstractSet_find), "$findBack", $rt_wrapFunction4(jur_AbstractSet_findBack), "$setType", $rt_wrapFunction1(jur_AbstractSet_setType), "$getType0", $rt_wrapFunction0(jur_AbstractSet_getType), "$getQualifiedName", $rt_wrapFunction0(jur_AbstractSet_getQualifiedName), "$toString", $rt_wrapFunction0(jur_AbstractSet_toString),
"$getNext", $rt_wrapFunction0(jur_AbstractSet_getNext), "$setNext", $rt_wrapFunction1(jur_AbstractSet_setNext), "$first", $rt_wrapFunction1(jur_AbstractSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_AbstractSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_AbstractSet_processSecondPass)],
jur_JointSet, "JointSet", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_JointSet__init_), "$_init_28", $rt_wrapFunction2(jur_JointSet__init_0), "$matches", $rt_wrapFunction3(jur_JointSet_matches), "$setNext", $rt_wrapFunction1(jur_JointSet_setNext), "$getName", $rt_wrapFunction0(jur_JointSet_getName), "$first", $rt_wrapFunction1(jur_JointSet_first), "$hasConsumed", $rt_wrapFunction1(jur_JointSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_JointSet_processSecondPass)],
jur_SingleSet, "SingleSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_6", $rt_wrapFunction2(jur_SingleSet__init_), "$matches", $rt_wrapFunction3(jur_SingleSet_matches), "$find", $rt_wrapFunction3(jur_SingleSet_find), "$findBack", $rt_wrapFunction4(jur_SingleSet_findBack), "$first", $rt_wrapFunction1(jur_SingleSet_first), "$processBackRefReplacement", $rt_wrapFunction0(jur_SingleSet_processBackRefReplacement), "$processSecondPass", $rt_wrapFunction0(jur_SingleSet_processSecondPass)],
jl_Long, 0, jl_Number, [jl_Comparable], 0, 3, 0, jl_Long_$callClinit, 0,
ju_Map, 0, jl_Object, [], 3, 3, 0, 0, 0,
jur_SequenceSet$IntHash, 0, jl_Object, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_SequenceSet$IntHash__init_0), "$put0", $rt_wrapFunction2(jur_SequenceSet$IntHash_put), "$get2", $rt_wrapFunction1(jur_SequenceSet$IntHash_get)],
jur_AbstractCharClass$LazyAlpha, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlpha_computeValue)],
ju_Iterator, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_PriorityQueue$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, ["$_init_30", $rt_wrapFunction1(ju_PriorityQueue$1__init_), "$hasNext", $rt_wrapFunction0(ju_PriorityQueue$1_hasNext), "$next", $rt_wrapFunction0(ju_PriorityQueue$1_next), "$remove2", $rt_wrapFunction0(ju_PriorityQueue$1_remove)],
jur_AbstractCharClass$LazyDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyDigit_computeValue)],
jur_AbstractCharClass$LazyNonDigit, 0, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonDigit_computeValue)],
jur_BackReferencedSingleSet, "BackReferencedSingleSet", 19, jur_SingleSet, [], 0, 0, 0, 0, ["$_init_5", $rt_wrapFunction1(jur_BackReferencedSingleSet__init_), "$find", $rt_wrapFunction3(jur_BackReferencedSingleSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferencedSingleSet_findBack), "$processBackRefReplacement", $rt_wrapFunction0(jur_BackReferencedSingleSet_processBackRefReplacement)],
jur_CIBackReferenceSet, "CIBackReferenceSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_15", $rt_wrapFunction2(jur_CIBackReferenceSet__init_), "$matches", $rt_wrapFunction3(jur_CIBackReferenceSet_matches), "$setNext", $rt_wrapFunction1(jur_CIBackReferenceSet_setNext), "$getString", $rt_wrapFunction1(jur_CIBackReferenceSet_getString), "$getName", $rt_wrapFunction0(jur_CIBackReferenceSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CIBackReferenceSet_hasConsumed)],
jur_AbstractCharClass$LazyWord, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyWord_computeValue)],
jur_AbstractCharClass$LazyNonWord, 0, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonWord_computeValue)],
jur_AbstractCharClass$1, "AbstractCharClass$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_2", $rt_wrapFunction2(jur_AbstractCharClass$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$1_contains)],
jur_AbstractCharClass$2, "AbstractCharClass$2", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_3", $rt_wrapFunction3(jur_AbstractCharClass$2__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$2_contains)],
jur_AbstractCharClass$LazyJavaLowerCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLowerCase_computeValue)],
jur_LeafSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$_init_8", $rt_wrapFunction1(jur_LeafSet__init_0), "$_init_", $rt_wrapFunction0(jur_LeafSet__init_), "$matches", $rt_wrapFunction3(jur_LeafSet_matches), "$charCount", $rt_wrapFunction0(jur_LeafSet_charCount), "$hasConsumed", $rt_wrapFunction1(jur_LeafSet_hasConsumed)],
jur_CISequenceSet, "CISequenceSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_72", $rt_wrapFunction1(jur_CISequenceSet__init_), "$accepts", $rt_wrapFunction2(jur_CISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_CISequenceSet_getName)],
otciu_CLDRHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
jur_QuantifierSet, 0, jur_AbstractSet, [], 1, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_QuantifierSet__init_), "$getInnerSet", $rt_wrapFunction0(jur_QuantifierSet_getInnerSet), "$first", $rt_wrapFunction1(jur_QuantifierSet_first), "$hasConsumed", $rt_wrapFunction1(jur_QuantifierSet_hasConsumed), "$processSecondPass", $rt_wrapFunction0(jur_QuantifierSet_processSecondPass)],
jur_LeafQuantifierSet, "LeafQuantifierSet", 19, jur_QuantifierSet, [], 0, 0, 0, 0, ["$_init_10", $rt_wrapFunction3(jur_LeafQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_LeafQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_LeafQuantifierSet_getName)],
jur_CompositeQuantifierSet, "CompositeQuantifierSet", 19, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$_init_11", $rt_wrapFunction4(jur_CompositeQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_CompositeQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeQuantifierSet_getName)],
jur_PossessiveCompositeQuantifierSet, "PossessiveCompositeQuantifierSet", 19, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$_init_11", $rt_wrapFunction4(jur_PossessiveCompositeQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_PossessiveCompositeQuantifierSet_matches)],
jl_CharSequence, 0, jl_Object, [], 3, 3, 0, 0, 0,
ogu_Utils, "Utils", 14, jl_Object, [], 0, 3, [0,0,0], ogu_Utils_$callClinit, 0,
jl_StringIndexOutOfBoundsException, "StringIndexOutOfBoundsException", 20, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_StringIndexOutOfBoundsException__init_0)],
ju_MissingResourceException, "MissingResourceException", 18, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_19", $rt_wrapFunction3(ju_MissingResourceException__init_)],
jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_82", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains)],
jur_CharClass$18, "CharClass$18", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_88", $rt_wrapFunction2(jur_CharClass$18__init_), "$contains", $rt_wrapFunction1(jur_CharClass$18_contains), "$toString", $rt_wrapFunction0(jur_CharClass$18_toString)],
jur_GroupQuantifierSet, "GroupQuantifierSet", 19, jur_QuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_GroupQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_GroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_GroupQuantifierSet_getName)],
jur_PossessiveGroupQuantifierSet, "PossessiveGroupQuantifierSet", 19, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_PossessiveGroupQuantifierSet_matches)]]);
$rt_metadata([oc_Link, "Link", 1, jl_Object, [], 1, 3, [0,0,0], oc_Link_$callClinit, ["$_init_13", $rt_wrapFunction3(oc_Link__init_), "$_init_12", $rt_wrapFunction4(oc_Link__init_0), "$getLabel", $rt_wrapFunction0(oc_Link_getLabel), "$setLabel", $rt_wrapFunction1(oc_Link_setLabel), "$getEndpoints", $rt_wrapFunction0(oc_Link_getEndpoints), "$setEndpoints", $rt_wrapFunction1(oc_Link_setEndpoints), "$getCost", $rt_wrapFunction0(oc_Link_getCost), "$setCost", $rt_wrapFunction1(oc_Link_setCost), "$getId", $rt_wrapFunction0(oc_Link_getId),
"$setId", $rt_wrapFunction1(oc_Link_setId), "$getFirstEndpointId", $rt_wrapFunction0(oc_Link_getFirstEndpointId), "$getSecondEndpointId", $rt_wrapFunction0(oc_Link_getSecondEndpointId), "$isDirected", $rt_wrapFunction0(oc_Link_isDirected), "$setDirected", $rt_wrapFunction1(oc_Link_setDirected), "$getMatchId", $rt_wrapFunction0(oc_Link_getMatchId), "$setMatchId", $rt_wrapFunction1(oc_Link_setMatchId), "$getCapacity", $rt_wrapFunction0(oc_Link_getCapacity), "$setCapacity", $rt_wrapFunction1(oc_Link_setCapacity),
"$isCapacitySet", $rt_wrapFunction0(oc_Link_isCapacitySet), "$isRequired", $rt_wrapFunction0(oc_Link_isRequired), "$setRequired", $rt_wrapFunction1(oc_Link_setRequired), "$setGraphId", $rt_wrapFunction1(oc_Link_setGraphId), "$toString", $rt_wrapFunction0(oc_Link_toString), "$getMaxSpeed", $rt_wrapFunction0(oc_Link_getMaxSpeed), "$setMaxSpeed", $rt_wrapFunction1(oc_Link_setMaxSpeed), "$getZone", $rt_wrapFunction0(oc_Link_getZone), "$setZone", $rt_wrapFunction1(oc_Link_setZone), "$getType", $rt_wrapFunction0(oc_Link_getType),
"$setType0", $rt_wrapFunction1(oc_Link_setType)],
oli_MixedEdge, "MixedEdge", 10, oc_Link, [], 0, 3, 0, 0, ["$_init_12", $rt_wrapFunction4(oli_MixedEdge__init_0), "$getHead0", $rt_wrapFunction0(oli_MixedEdge_getHead), "$getTail0", $rt_wrapFunction0(oli_MixedEdge_getTail), "$isWindy", $rt_wrapFunction0(oli_MixedEdge_isWindy)],
jl_Cloneable, 0, jl_Object, [], 3, 3, 0, 0, 0,
gt_THash, 0, jl_Object, [jl_Cloneable], 1, 3, 0, gt_THash_$callClinit, ["$_init_", $rt_wrapFunction0(gt_THash__init_), "$_init_14", $rt_wrapFunction2(gt_THash__init_0), "$isEmpty", $rt_wrapFunction0(gt_THash_isEmpty), "$size", $rt_wrapFunction0(gt_THash_size), "$compact", $rt_wrapFunction0(gt_THash_compact), "$removeAt", $rt_wrapFunction1(gt_THash_removeAt), "$setUp", $rt_wrapFunction1(gt_THash_setUp), "$postInsertHook", $rt_wrapFunction1(gt_THash_postInsertHook), "$calculateGrownCapacity", $rt_wrapFunction0(gt_THash_calculateGrownCapacity)],
gt_TPrimitiveHash, 0, gt_THash, [], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(gt_TPrimitiveHash__init_), "$setUp", $rt_wrapFunction1(gt_TPrimitiveHash_setUp)],
gt_TIntHashingStrategy, 0, jl_Object, [ji_Serializable], 3, 3, 0, 0, 0,
gt_TIntHash, 0, gt_TPrimitiveHash, [gt_TIntHashingStrategy], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(gt_TIntHash__init_), "$setUp", $rt_wrapFunction1(gt_TIntHash_setUp), "$index", $rt_wrapFunction1(gt_TIntHash_index), "$computeHashCode", $rt_wrapFunction1(gt_TIntHash_computeHashCode)],
jur_UCIBackReferenceSet, "UCIBackReferenceSet", 19, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$_init_15", $rt_wrapFunction2(jur_UCIBackReferenceSet__init_), "$matches", $rt_wrapFunction3(jur_UCIBackReferenceSet_matches), "$getName", $rt_wrapFunction0(jur_UCIBackReferenceSet_getName)],
jur_CharClass$13, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_85", $rt_wrapFunction2(jur_CharClass$13__init_), "$contains", $rt_wrapFunction1(jur_CharClass$13_contains)],
jur_CharClass$12, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_85", $rt_wrapFunction2(jur_CharClass$12__init_), "$contains", $rt_wrapFunction1(jur_CharClass$12_contains)],
jur_CharClass$11, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_84", $rt_wrapFunction4(jur_CharClass$11__init_), "$contains", $rt_wrapFunction1(jur_CharClass$11_contains)],
jur_AbstractCharClass$LazyCategory, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_20", $rt_wrapFunction2(jur_AbstractCharClass$LazyCategory__init_0), "$_init_21", $rt_wrapFunction3(jur_AbstractCharClass$LazyCategory__init_1), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategory_computeValue)],
otci_Base46, 0, jl_Object, [], 4, 3, 0, 0, 0,
jur_CharClass$10, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_84", $rt_wrapFunction4(jur_CharClass$10__init_), "$contains", $rt_wrapFunction1(jur_CharClass$10_contains)],
jur_CharClass$17, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_84", $rt_wrapFunction4(jur_CharClass$17__init_), "$contains", $rt_wrapFunction1(jur_CharClass$17_contains)],
jur_UCISequenceSet, "UCISequenceSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_72", $rt_wrapFunction1(jur_UCISequenceSet__init_), "$accepts", $rt_wrapFunction2(jur_UCISequenceSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISequenceSet_getName)],
jur_CharClass$16, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_84", $rt_wrapFunction4(jur_CharClass$16__init_), "$contains", $rt_wrapFunction1(jur_CharClass$16_contains)],
jur_DotAllQuantifierSet, "DotAllQuantifierSet", 19, jur_QuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_DotAllQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_DotAllQuantifierSet_matches), "$find", $rt_wrapFunction3(jur_DotAllQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotAllQuantifierSet_getName)],
jur_CharClass$15, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_87", $rt_wrapFunction3(jur_CharClass$15__init_), "$contains", $rt_wrapFunction1(jur_CharClass$15_contains)],
jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_68", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDefined$1_contains)],
jur_CharClass$14, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_87", $rt_wrapFunction3(jur_CharClass$14__init_), "$contains", $rt_wrapFunction1(jur_CharClass$14_contains)],
jur_FSet, "FSet", 19, jur_AbstractSet, [], 0, 0, 0, jur_FSet_$callClinit, ["$_init_1", $rt_wrapFunction1(jur_FSet__init_), "$matches", $rt_wrapFunction3(jur_FSet_matches), "$getGroupIndex", $rt_wrapFunction0(jur_FSet_getGroupIndex), "$getName", $rt_wrapFunction0(jur_FSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet_hasConsumed)],
jur_BehindFSet, "BehindFSet", 19, jur_FSet, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_BehindFSet__init_), "$matches", $rt_wrapFunction3(jur_BehindFSet_matches), "$getName", $rt_wrapFunction0(jur_BehindFSet_getName)],
jl_AbstractStringBuilder, 0, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jl_AbstractStringBuilder__init_0), "$_init_1", $rt_wrapFunction1(jl_AbstractStringBuilder__init_), "$append6", $rt_wrapFunction1(jl_AbstractStringBuilder_append6), "$append7", $rt_wrapFunction1(jl_AbstractStringBuilder_append2), "$insert0", $rt_wrapFunction2(jl_AbstractStringBuilder_insert3), "$append8", $rt_wrapFunction1(jl_AbstractStringBuilder_append3), "$append1", $rt_wrapFunction2(jl_AbstractStringBuilder_append7),
"$insert1", $rt_wrapFunction3(jl_AbstractStringBuilder_insert5), "$append9", $rt_wrapFunction1(jl_AbstractStringBuilder_append5), "$insert2", $rt_wrapFunction2(jl_AbstractStringBuilder_insert2), "$append10", $rt_wrapFunction1(jl_AbstractStringBuilder_append1), "$insert3", $rt_wrapFunction2(jl_AbstractStringBuilder_insert0), "$insert", $rt_wrapFunction2(jl_AbstractStringBuilder_insert4), "$append12", $rt_wrapFunction1(jl_AbstractStringBuilder_append4), "$insert4", $rt_wrapFunction2(jl_AbstractStringBuilder_insert1),
"$ensureCapacity", $rt_wrapFunction1(jl_AbstractStringBuilder_ensureCapacity), "$toString", $rt_wrapFunction0(jl_AbstractStringBuilder_toString), "$length", $rt_wrapFunction0(jl_AbstractStringBuilder_length), "$charAt", $rt_wrapFunction1(jl_AbstractStringBuilder_charAt), "$append5", $rt_wrapFunction3(jl_AbstractStringBuilder_append0), "$insert5", $rt_wrapFunction4(jl_AbstractStringBuilder_insert), "$append11", $rt_wrapFunction1(jl_AbstractStringBuilder_append), "$deleteCharAt0", $rt_wrapFunction1(jl_AbstractStringBuilder_deleteCharAt),
"$delete", $rt_wrapFunction2(jl_AbstractStringBuilder_delete)],
jl_Appendable, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_StringBuilder, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$_init_1", $rt_wrapFunction1(jl_StringBuilder__init_2), "$_init_", $rt_wrapFunction0(jl_StringBuilder__init_1), "$append", $rt_wrapFunction1(jl_StringBuilder_append), "$append4", $rt_wrapFunction1(jl_StringBuilder_append2), "$append2", $rt_wrapFunction1(jl_StringBuilder_append1), "$append14", $rt_wrapFunction1(jl_StringBuilder_append5), "$append0", $rt_wrapFunction1(jl_StringBuilder_append0), "$append13", $rt_wrapFunction3(jl_StringBuilder_append4),
"$append3", $rt_wrapFunction1(jl_StringBuilder_append7), "$append16", $rt_wrapFunction1(jl_StringBuilder_append3), "$insert10", $rt_wrapFunction2(jl_StringBuilder_insert5), "$insert6", $rt_wrapFunction4(jl_StringBuilder_insert3), "$insert8", $rt_wrapFunction2(jl_StringBuilder_insert6), "$insert7", $rt_wrapFunction2(jl_StringBuilder_insert1), "$insert9", $rt_wrapFunction2(jl_StringBuilder_insert2), "$delete0", $rt_wrapFunction2(jl_StringBuilder_delete), "$deleteCharAt", $rt_wrapFunction1(jl_StringBuilder_deleteCharAt),
"$insert11", $rt_wrapFunction2(jl_StringBuilder_insert8), "$insert5", $rt_wrapFunction4(jl_StringBuilder_insert7), "$append5", $rt_wrapFunction3(jl_StringBuilder_append6), "$length", $rt_wrapFunction0(jl_StringBuilder_length), "$toString", $rt_wrapFunction0(jl_StringBuilder_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuilder_ensureCapacity), "$insert4", $rt_wrapFunction2(jl_StringBuilder_insert9), "$insert", $rt_wrapFunction2(jl_StringBuilder_insert0), "$insert3", $rt_wrapFunction2(jl_StringBuilder_insert),
"$insert2", $rt_wrapFunction2(jl_StringBuilder_insert4), "$insert0", $rt_wrapFunction2(jl_StringBuilder_insert10)],
jur_AbstractCharClass$LazyAlnum, 0, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyAlnum_computeValue)],
ju_ConcurrentModificationException, "ConcurrentModificationException", 18, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_ConcurrentModificationException__init_0)],
jur_CompositeRangeSet, "CompositeRangeSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_79", $rt_wrapFunction2(jur_CompositeRangeSet__init_0), "$matches", $rt_wrapFunction3(jur_CompositeRangeSet_matches), "$setNext", $rt_wrapFunction1(jur_CompositeRangeSet_setNext), "$getName", $rt_wrapFunction0(jur_CompositeRangeSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_CompositeRangeSet_hasConsumed), "$first", $rt_wrapFunction1(jur_CompositeRangeSet_first)],
jur_RandomGenerator, 0, jl_Object, [], 3, 3, 0, 0, 0,
jur_LowHighSurrogateRangeSet, "LowHighSurrogateRangeSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_49", $rt_wrapFunction1(jur_LowHighSurrogateRangeSet__init_), "$setNext", $rt_wrapFunction1(jur_LowHighSurrogateRangeSet_setNext), "$matches", $rt_wrapFunction3(jur_LowHighSurrogateRangeSet_matches), "$getName", $rt_wrapFunction0(jur_LowHighSurrogateRangeSet_getName)],
oe_NoCapacitySetException, "NoCapacitySetException", 11, jl_Exception, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(oe_NoCapacitySetException__init_)],
jur_ReluctantGroupQuantifierSet, "ReluctantGroupQuantifierSet", 19, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_ReluctantGroupQuantifierSet_matches)],
jur_FinalSet, "FinalSet", 19, jur_FSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_FinalSet__init_), "$matches", $rt_wrapFunction3(jur_FinalSet_matches), "$getName", $rt_wrapFunction0(jur_FinalSet_getName)],
oc_Problem, "Problem", 1, jl_Object, [], 1, 3, [0,0,0], oc_Problem_$callClinit, ["$_init_17", $rt_wrapFunction3(oc_Problem__init_), "$getGraph", $rt_wrapFunction0(oc_Problem_getGraph), "$getSol", $rt_wrapFunction0(oc_Problem_getSol), "$setSol", $rt_wrapFunction1(oc_Problem_setSol)],
ju_Comparator, 0, jl_Object, [], 3, 3, 0, 0, 0,
ot_TeaVMWrapper$main$lambda$_1_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ot_TeaVMWrapper$main$lambda$_1_0__init_), "$compare1", $rt_wrapFunction2(ot_TeaVMWrapper$main$lambda$_1_0_compare0), "$compare0", $rt_wrapFunction2(ot_TeaVMWrapper$main$lambda$_1_0_compare)],
jl_ClassCastException, "ClassCastException", 20, jl_RuntimeException, [], 0, 3, 0, 0, 0,
ot_OARLibParser$VertexData, "OARLibParser$VertexData", 8, jl_Object, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ot_OARLibParser$VertexData__init_), "$toString", $rt_wrapFunction0(ot_OARLibParser$VertexData_toString)],
jur_PosPlusGroupQuantifierSet, "PosPlusGroupQuantifierSet", 19, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_PosPlusGroupQuantifierSet_matches)],
jur_EmptySet, "EmptySet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_8", $rt_wrapFunction1(jur_EmptySet__init_0), "$accepts", $rt_wrapFunction2(jur_EmptySet_accepts), "$find", $rt_wrapFunction3(jur_EmptySet_find), "$findBack", $rt_wrapFunction4(jur_EmptySet_findBack), "$getName", $rt_wrapFunction0(jur_EmptySet_getName), "$hasConsumed", $rt_wrapFunction1(jur_EmptySet_hasConsumed)],
opi_ChinesePostmanProblem, "ChinesePostmanProblem", 5, oc_Problem, [], 1, 3, [0,0,0], opi_ChinesePostmanProblem_$callClinit, ["$_init_17", $rt_wrapFunction3(opi_ChinesePostmanProblem__init_)],
opic_WindyCPP, 0, opi_ChinesePostmanProblem, [], 0, 3, 0, 0, ["$_init_67", $rt_wrapFunction2(opic_WindyCPP__init_), "$getProblemAttributes", $rt_wrapFunction0(opic_WindyCPP_getProblemAttributes)],
oc_Vertex, "Vertex", 1, jl_Object, [], 1, 3, [0,0,0], oc_Vertex_$callClinit, ["$_init_0", $rt_wrapFunction1(oc_Vertex__init_), "$getLabel", $rt_wrapFunction0(oc_Vertex_getLabel), "$setLabel", $rt_wrapFunction1(oc_Vertex_setLabel), "$getId", $rt_wrapFunction0(oc_Vertex_getId), "$setId", $rt_wrapFunction1(oc_Vertex_setId), "$getDemand", $rt_wrapFunction0(oc_Vertex_getDemand), "$setDemand", $rt_wrapFunction1(oc_Vertex_setDemand), "$isDemandSet", $rt_wrapFunction0(oc_Vertex_isDemandSet), "$setGuid", $rt_wrapFunction1(oc_Vertex_setGuid),
"$getMatchId", $rt_wrapFunction0(oc_Vertex_getMatchId), "$setMatchId", $rt_wrapFunction1(oc_Vertex_setMatchId), "$getGraphId", $rt_wrapFunction0(oc_Vertex_getGraphId), "$setGraphId", $rt_wrapFunction1(oc_Vertex_setGraphId), "$isFinalized", $rt_wrapFunction0(oc_Vertex_isFinalized), "$setFinalized", $rt_wrapFunction1(oc_Vertex_setFinalized), "$setCost", $rt_wrapFunction1(oc_Vertex_setCost), "$setSize", $rt_wrapFunction1(oc_Vertex_setSize), "$getX", $rt_wrapFunction0(oc_Vertex_getX), "$setCoordinates", $rt_wrapFunction2(oc_Vertex_setCoordinates),
"$getY", $rt_wrapFunction0(oc_Vertex_getY)],
ovi_UndirectedVertex, "UndirectedVertex", 7, oc_Vertex, [], 0, 3, 0, 0, ["$_init_0", $rt_wrapFunction1(ovi_UndirectedVertex__init_0), "$addToNeighbors2", $rt_wrapFunction2(ovi_UndirectedVertex_addToNeighbors), "$removeFromNeighbors1", $rt_wrapFunction2(ovi_UndirectedVertex_removeFromNeighbors), "$getDegree", $rt_wrapFunction0(ovi_UndirectedVertex_getDegree), "$setDegree", $rt_wrapFunction1(ovi_UndirectedVertex_setDegree), "$getNeighbors0", $rt_wrapFunction0(ovi_UndirectedVertex_getNeighbors0), "$getNeighbors",
$rt_wrapFunction0(ovi_UndirectedVertex_getNeighbors)],
jl_StringBuffer, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_StringBuffer__init_), "$append17", $rt_wrapFunction1(jl_StringBuffer_append1), "$append15", $rt_wrapFunction3(jl_StringBuffer_append2), "$append18", $rt_wrapFunction1(jl_StringBuffer_append0), "$insert12", $rt_wrapFunction4(jl_StringBuffer_insert), "$insert13", $rt_wrapFunction2(jl_StringBuffer_insert2), "$insert5", $rt_wrapFunction4(jl_StringBuffer_insert1), "$append5", $rt_wrapFunction3(jl_StringBuffer_append),
"$charAt", $rt_wrapFunction1(jl_StringBuffer_charAt), "$length", $rt_wrapFunction0(jl_StringBuffer_length), "$toString", $rt_wrapFunction0(jl_StringBuffer_toString), "$ensureCapacity", $rt_wrapFunction1(jl_StringBuffer_ensureCapacity), "$insert3", $rt_wrapFunction2(jl_StringBuffer_insert0)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_62", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains)],
jur_AbstractCharClass$PredefinedCharacterClasses, 0, jl_Object, [], 4, 0, 0, jur_AbstractCharClass$PredefinedCharacterClasses_$callClinit, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$PredefinedCharacterClasses__init_), "$getObject", $rt_wrapFunction1(jur_AbstractCharClass$PredefinedCharacterClasses_getObject)],
oc_Solver, 0, jl_Object, [], 1, 3, 0, oc_Solver_$callClinit, ["$_init_22", $rt_wrapFunction1(oc_Solver__init_), "$trySolve", $rt_wrapFunction0(oc_Solver_trySolve)],
oc_SingleVehicleSolver, "SingleVehicleSolver", 1, oc_Solver, [], 1, 3, [0,0,0], oc_SingleVehicleSolver_$callClinit, ["$_init_22", $rt_wrapFunction1(oc_SingleVehicleSolver__init_), "$printCurrentSol", $rt_wrapFunction0(oc_SingleVehicleSolver_printCurrentSol)]]);
$rt_metadata([osi_WRPPSolver_Benavent_H1, 0, oc_SingleVehicleSolver, [], 0, 3, 0, 0, ["$_init_22", $rt_wrapFunction1(osi_WRPPSolver_Benavent_H1__init_0), "$_init_23", $rt_wrapFunction2(osi_WRPPSolver_Benavent_H1__init_), "$solve", $rt_wrapFunction0(osi_WRPPSolver_Benavent_H1_solve), "$getProblemAttributes", $rt_wrapFunction0(osi_WRPPSolver_Benavent_H1_getProblemAttributes), "$getSolverName", $rt_wrapFunction0(osi_WRPPSolver_Benavent_H1_getSolverName), "$checkGraphRequirements", $rt_wrapFunction0(osi_WRPPSolver_Benavent_H1_checkGraphRequirements)],
ogu_BlossomV, 0, jl_Object, [], 0, 3, 0, 0, 0,
jur_AbstractCharClass$LazyJavaLetter, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetter_computeValue)],
ji_Flushable, 0, jl_Object, [], 3, 3, 0, 0, 0,
om_Metric, 0, jl_Object, [], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(om_Metric__init_)],
om_SumMetric, 0, om_Metric, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(om_SumMetric__init_0)],
jur_DecomposedCharSet, "DecomposedCharSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_27", $rt_wrapFunction2(jur_DecomposedCharSet__init_), "$setNext", $rt_wrapFunction1(jur_DecomposedCharSet_setNext), "$matches", $rt_wrapFunction3(jur_DecomposedCharSet_matches), "$getName", $rt_wrapFunction0(jur_DecomposedCharSet_getName), "$codePointAt", $rt_wrapFunction3(jur_DecomposedCharSet_codePointAt), "$first", $rt_wrapFunction1(jur_DecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_DecomposedCharSet_hasConsumed)],
jur_CIDecomposedCharSet, "CIDecomposedCharSet", 19, jur_DecomposedCharSet, [], 0, 0, 0, 0, ["$_init_27", $rt_wrapFunction2(jur_CIDecomposedCharSet__init_)],
gt_PrimeFinder, 0, jl_Object, [], 4, 3, 0, gt_PrimeFinder_$callClinit, 0,
gt_TIntIntHashMap, 0, gt_TIntHash, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(gt_TIntIntHashMap__init_), "$setUp", $rt_wrapFunction1(gt_TIntIntHashMap_setUp), "$get2", $rt_wrapFunction1(gt_TIntIntHashMap_get)],
ot_OARLibParser$LinkData, "OARLibParser$LinkData", 8, jl_Object, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ot_OARLibParser$LinkData__init_), "$toString", $rt_wrapFunction0(ot_OARLibParser$LinkData_toString)],
ogu_BlossomV$EdgeInfo, "BlossomV$EdgeInfo", 14, jl_Object, [], 0, 0, 0, 0, ["$_init_25", $rt_wrapFunction3(ogu_BlossomV$EdgeInfo__init_)],
jur_AheadFSet, "AheadFSet", 19, jur_FSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AheadFSet__init_), "$matches", $rt_wrapFunction3(jur_AheadFSet_matches), "$getName", $rt_wrapFunction0(jur_AheadFSet_getName)],
jur_AbstractCharClass$LazyASCII, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyASCII_computeValue)],
jl_ArrayIndexOutOfBoundsException, "ArrayIndexOutOfBoundsException", 20, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0, ["$_init_1", $rt_wrapFunction1(jl_ArrayIndexOutOfBoundsException__init_)],
jur_NonCapJointSet, "NonCapJointSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_28", $rt_wrapFunction2(jur_NonCapJointSet__init_), "$matches", $rt_wrapFunction3(jur_NonCapJointSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapJointSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapJointSet_hasConsumed)],
jur_AtomicJointSet, "AtomicJointSet", 19, jur_NonCapJointSet, [], 0, 0, 0, 0, ["$_init_28", $rt_wrapFunction2(jur_AtomicJointSet__init_), "$matches", $rt_wrapFunction3(jur_AtomicJointSet_matches), "$setNext", $rt_wrapFunction1(jur_AtomicJointSet_setNext), "$getName", $rt_wrapFunction0(jur_AtomicJointSet_getName)],
jur_PositiveLookAhead, "PositiveLookAhead", 19, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$_init_28", $rt_wrapFunction2(jur_PositiveLookAhead__init_), "$matches", $rt_wrapFunction3(jur_PositiveLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookAhead_getName)],
jur_NegativeLookAhead, "NegativeLookAhead", 19, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$_init_28", $rt_wrapFunction2(jur_NegativeLookAhead__init_), "$matches", $rt_wrapFunction3(jur_NegativeLookAhead_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookAhead_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookAhead_getName)],
ju_AbstractList$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, ["$_init_42", $rt_wrapFunction1(ju_AbstractList$1__init_), "$hasNext", $rt_wrapFunction0(ju_AbstractList$1_hasNext), "$next", $rt_wrapFunction0(ju_AbstractList$1_next)],
jl_Enum, 0, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, 0, ["$_init_29", $rt_wrapFunction2(jl_Enum__init_), "$ordinal", $rt_wrapFunction0(jl_Enum_ordinal)],
oc_Graph$Type, 0, jl_Enum, [], 12, 3, 0, oc_Graph$Type_$callClinit, 0,
ju_AbstractMap, 0, jl_Object, [ju_Map], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_AbstractMap__init_)],
ju_TemplateCollections$AbstractImmutableMap, 0, ju_AbstractMap, [], 1, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_TemplateCollections$AbstractImmutableMap__init_)],
gt_Equality, 0, jl_Object, [], 3, 3, 0, 0, 0,
jur_Quantifier, "Quantifier", 19, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, 0, ["$_init_15", $rt_wrapFunction2(jur_Quantifier__init_), "$min", $rt_wrapFunction0(jur_Quantifier_min), "$max", $rt_wrapFunction0(jur_Quantifier_max), "$toString", $rt_wrapFunction0(jur_Quantifier_toString)],
oc_MultiEdge$EDGETYPE, 0, jl_Enum, [], 12, 3, 0, oc_MultiEdge$EDGETYPE_$callClinit, 0,
jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_50", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUpperCase$1_contains)],
jlr_Array, 0, jl_Object, [], 4, 3, 0, 0, 0,
ju_ListIterator, 0, jl_Object, [ju_Iterator], 3, 3, 0, 0, 0,
jl_Iterable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_Collection, 0, jl_Object, [jl_Iterable], 3, 3, 0, 0, 0,
ju_AbstractCollection, 0, jl_Object, [ju_Collection], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_AbstractCollection__init_), "$isEmpty", $rt_wrapFunction0(ju_AbstractCollection_isEmpty), "$contains0", $rt_wrapFunction1(ju_AbstractCollection_contains), "$toArray", $rt_wrapFunction1(ju_AbstractCollection_toArray), "$remove0", $rt_wrapFunction1(ju_AbstractCollection_remove), "$addAll", $rt_wrapFunction1(ju_AbstractCollection_addAll), "$toString", $rt_wrapFunction0(ju_AbstractCollection_toString)],
ju_Queue, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_AbstractQueue, 0, ju_AbstractCollection, [ju_Queue], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_AbstractQueue__init_), "$add2", $rt_wrapFunction1(ju_AbstractQueue_add)],
ju_PriorityQueue, 0, ju_AbstractQueue, [ji_Serializable], 0, 3, 0, 0, ["$_init_56", $rt_wrapFunction2(ju_PriorityQueue__init_), "$offer", $rt_wrapFunction1(ju_PriorityQueue_offer), "$poll", $rt_wrapFunction0(ju_PriorityQueue_poll), "$size", $rt_wrapFunction0(ju_PriorityQueue_size), "$iterator", $rt_wrapFunction0(ju_PriorityQueue_iterator)],
otcit_DoubleAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(otcit_DoubleAnalyzer$Result__init_0)],
ju_Random, 0, jl_Object, [jur_RandomGenerator, ji_Serializable], 0, 3, 0, 0, ["$_init_57", $rt_wrapFunction1(ju_Random__init_), "$nextInt", $rt_wrapFunction1(ju_Random_nextInt), "$nextDouble", $rt_wrapFunction0(ju_Random_nextDouble)],
otpp_ResourceAccessor, 0, jl_Object, [], 4, 0, 0, 0, 0,
jur_AbstractCharClass$LazyJavaDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDigit_computeValue)],
gt_HashFunctions, 0, jl_Object, [], 4, 3, 0, 0, 0,
jur_PossessiveQuantifierSet, "PossessiveQuantifierSet", 19, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$_init_10", $rt_wrapFunction3(jur_PossessiveQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_PossessiveQuantifierSet_matches)],
otci_IntegerUtil, 0, jl_Object, [], 4, 3, 0, 0, 0,
ju_Locale, 0, jl_Object, [jl_Cloneable, ji_Serializable], 4, 3, 0, ju_Locale_$callClinit, ["$_init_33", $rt_wrapFunction2(ju_Locale__init_1), "$_init_19", $rt_wrapFunction3(ju_Locale__init_0), "$toLanguageTag", $rt_wrapFunction0(ju_Locale_toLanguageTag)],
jur_AltQuantifierSet, "AltQuantifierSet", 19, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$_init_10", $rt_wrapFunction3(jur_AltQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_AltQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltQuantifierSet_setNext)],
jur_PossessiveAltQuantifierSet, "PossessiveAltQuantifierSet", 19, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$_init_10", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_PossessiveAltQuantifierSet_matches)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_80", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains)],
otcir_FieldInfo, 0, jl_Object, [], 0, 3, 0, 0, 0,
osi_WRPPSolver_Win, "WRPPSolver_Win", 16, oc_SingleVehicleSolver, [], 0, 3, [0,0,0], osi_WRPPSolver_Win_$callClinit, ["$_init_22", $rt_wrapFunction1(osi_WRPPSolver_Win__init_), "$solve", $rt_wrapFunction0(osi_WRPPSolver_Win_solve), "$getProblemAttributes", $rt_wrapFunction0(osi_WRPPSolver_Win_getProblemAttributes), "$getSolverName", $rt_wrapFunction0(osi_WRPPSolver_Win_getSolverName), "$checkGraphRequirements", $rt_wrapFunction0(osi_WRPPSolver_Win_checkGraphRequirements)],
gt_TIntArrayList, 0, jl_Object, [ji_Serializable, jl_Cloneable], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(gt_TIntArrayList__init_3), "$_init_1", $rt_wrapFunction1(gt_TIntArrayList__init_1), "$_init_45", $rt_wrapFunction1(gt_TIntArrayList__init_2), "$ensureCapacity", $rt_wrapFunction1(gt_TIntArrayList_ensureCapacity), "$size", $rt_wrapFunction0(gt_TIntArrayList_size), "$isEmpty", $rt_wrapFunction0(gt_TIntArrayList_isEmpty), "$add6", $rt_wrapFunction1(gt_TIntArrayList_add1), "$add3", $rt_wrapFunction1(gt_TIntArrayList_add),
"$add4", $rt_wrapFunction3(gt_TIntArrayList_add0), "$get2", $rt_wrapFunction1(gt_TIntArrayList_get), "$toNativeArray1", $rt_wrapFunction0(gt_TIntArrayList_toNativeArray0), "$toNativeArray", $rt_wrapFunction2(gt_TIntArrayList_toNativeArray), "$toNativeArray0", $rt_wrapFunction3(gt_TIntArrayList_toNativeArray1), "$sort1", $rt_wrapFunction0(gt_TIntArrayList_sort)]]);
$rt_metadata([jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_26", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLetter$1_contains)],
jur_ReluctantQuantifierSet, "ReluctantQuantifierSet", 19, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$_init_10", $rt_wrapFunction3(jur_ReluctantQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_ReluctantQuantifierSet_matches)],
otji_JS, 0, jl_Object, [], 4, 3, 0, 0, 0,
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_83", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains)],
otciu_UnicodeHelper, 0, jl_Object, [], 4, 3, 0, 0, 0,
ju_Objects, 0, jl_Object, [], 4, 3, 0, 0, 0,
ogu_Utils$DijkstrasComparator, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ogu_Utils$DijkstrasComparator__init_0), "$compare2", $rt_wrapFunction2(ogu_Utils$DijkstrasComparator_compare0), "$compare1", $rt_wrapFunction2(ogu_Utils$DijkstrasComparator_compare)],
jur_AbstractCharClass$LazyGraph, 0, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyGraph_computeValue)],
jur_AbstractCharClass$LazyPrint, 0, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPrint_computeValue)],
jur_AbstractCharClass$LazyJavaSpaceChar, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaSpaceChar_computeValue)],
ju_Map$Entry, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_MapEntry, 0, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0, ["$_init_24", $rt_wrapFunction2(ju_MapEntry__init_), "$equals", $rt_wrapFunction1(ju_MapEntry_equals), "$getKey", $rt_wrapFunction0(ju_MapEntry_getKey), "$getValue0", $rt_wrapFunction0(ju_MapEntry_getValue), "$hashCode0", $rt_wrapFunction0(ju_MapEntry_hashCode), "$toString", $rt_wrapFunction0(ju_MapEntry_toString)],
ju_HashMap$HashEntry, "HashMap$HashEntry", 18, ju_MapEntry, [], 0, 0, 0, 0, ["$_init_81", $rt_wrapFunction2(ju_HashMap$HashEntry__init_)],
jur_PositiveLookBehind, "PositiveLookBehind", 19, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$_init_28", $rt_wrapFunction2(jur_PositiveLookBehind__init_), "$matches", $rt_wrapFunction3(jur_PositiveLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_PositiveLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_PositiveLookBehind_getName)],
ju_Comparator$NaturalOrder, 0, jl_Object, [ju_Comparator], 0, 3, 0, ju_Comparator$NaturalOrder_$callClinit, ["$_init_", $rt_wrapFunction0(ju_Comparator$NaturalOrder__init_), "$compare1", $rt_wrapFunction2(ju_Comparator$NaturalOrder_compare)],
jur_SequenceSet, "SequenceSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_72", $rt_wrapFunction1(jur_SequenceSet__init_), "$accepts", $rt_wrapFunction2(jur_SequenceSet_accepts), "$find", $rt_wrapFunction3(jur_SequenceSet_find), "$findBack", $rt_wrapFunction4(jur_SequenceSet_findBack), "$getName", $rt_wrapFunction0(jur_SequenceSet_getName), "$first", $rt_wrapFunction1(jur_SequenceSet_first), "$indexOf1", $rt_wrapFunction3(jur_SequenceSet_indexOf), "$lastIndexOf", $rt_wrapFunction3(jur_SequenceSet_lastIndexOf),
"$startsWith", $rt_wrapFunction2(jur_SequenceSet_startsWith)],
oli_Arc, "Arc", 10, oc_Link, [], 0, 3, 0, 0, ["$_init_13", $rt_wrapFunction3(oli_Arc__init_0), "$getHead", $rt_wrapFunction0(oli_Arc_getHead), "$getTail", $rt_wrapFunction0(oli_Arc_getTail), "$isWindy", $rt_wrapFunction0(oli_Arc_isWindy)],
jur_EOISet, "EOISet", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_EOISet__init_), "$matches", $rt_wrapFunction3(jur_EOISet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOISet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOISet_getName)],
oe_GraphInfeasibleException, "GraphInfeasibleException", 11, jl_Exception, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(oe_GraphInfeasibleException__init_)],
jl_ArrayStoreException, "ArrayStoreException", 20, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_ArrayStoreException__init_0)],
ju_SequencedCollection, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
jur_AltGroupQuantifierSet, "AltGroupQuantifierSet", 19, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_AltGroupQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_AltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_AltGroupQuantifierSet_setNext)],
jur_AbstractCharClass$LazyUpper, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyUpper_computeValue)],
jur_MatchResult, 0, jl_Object, [], 3, 3, 0, 0, 0,
jur_MatchResultImpl, 0, jl_Object, [jur_MatchResult], 0, 0, 0, 0, ["$_init_48", function(var_1, var_2, var_3, var_4, var_5, var_6) { jur_MatchResultImpl__init_(this, var_1, var_2, var_3, var_4, var_5, var_6); }, "$setConsumed", $rt_wrapFunction2(jur_MatchResultImpl_setConsumed), "$getConsumed", $rt_wrapFunction1(jur_MatchResultImpl_getConsumed), "$end0", $rt_wrapFunction0(jur_MatchResultImpl_end), "$end", $rt_wrapFunction1(jur_MatchResultImpl_end0), "$setStart", $rt_wrapFunction2(jur_MatchResultImpl_setStart),
"$setEnd", $rt_wrapFunction2(jur_MatchResultImpl_setEnd), "$getStart", $rt_wrapFunction1(jur_MatchResultImpl_getStart), "$getEnd", $rt_wrapFunction1(jur_MatchResultImpl_getEnd), "$getGroupNoCheck", $rt_wrapFunction1(jur_MatchResultImpl_getGroupNoCheck), "$start0", $rt_wrapFunction0(jur_MatchResultImpl_start), "$start", $rt_wrapFunction1(jur_MatchResultImpl_start0), "$finalizeMatch", $rt_wrapFunction0(jur_MatchResultImpl_finalizeMatch), "$getEnterCounter", $rt_wrapFunction1(jur_MatchResultImpl_getEnterCounter),
"$setEnterCounter", $rt_wrapFunction2(jur_MatchResultImpl_setEnterCounter), "$setValid", $rt_wrapFunction0(jur_MatchResultImpl_setValid), "$isValid", $rt_wrapFunction0(jur_MatchResultImpl_isValid), "$reset", $rt_wrapFunction3(jur_MatchResultImpl_reset0), "$reset0", $rt_wrapFunction0(jur_MatchResultImpl_reset), "$setStartIndex", $rt_wrapFunction1(jur_MatchResultImpl_setStartIndex), "$getLeftBound", $rt_wrapFunction0(jur_MatchResultImpl_getLeftBound), "$getRightBound", $rt_wrapFunction0(jur_MatchResultImpl_getRightBound),
"$setMode", $rt_wrapFunction1(jur_MatchResultImpl_setMode), "$mode", $rt_wrapFunction0(jur_MatchResultImpl_mode), "$useAnchoringBounds", $rt_wrapFunction1(jur_MatchResultImpl_useAnchoringBounds), "$hasAnchoringBounds", $rt_wrapFunction0(jur_MatchResultImpl_hasAnchoringBounds), "$hasTransparentBounds", $rt_wrapFunction0(jur_MatchResultImpl_hasTransparentBounds), "$getPreviousMatchEnd", $rt_wrapFunction0(jur_MatchResultImpl_getPreviousMatchEnd)],
ju_HashMap$AbstractMapIterator, 0, jl_Object, [], 0, 0, 0, 0, ["$_init_37", $rt_wrapFunction1(ju_HashMap$AbstractMapIterator__init_), "$hasNext", $rt_wrapFunction0(ju_HashMap$AbstractMapIterator_hasNext), "$checkConcurrentMod", $rt_wrapFunction0(ju_HashMap$AbstractMapIterator_checkConcurrentMod), "$makeNext", $rt_wrapFunction0(ju_HashMap$AbstractMapIterator_makeNext)],
ju_HashMap$KeyIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, ["$_init_37", $rt_wrapFunction1(ju_HashMap$KeyIterator__init_), "$next", $rt_wrapFunction0(ju_HashMap$KeyIterator_next)],
osi_MCPPSolver_Frederickson, "MCPPSolver_Frederickson", 16, oc_SingleVehicleSolver, [], 0, 3, [0,0,0], osi_MCPPSolver_Frederickson_$callClinit, ["$_init_22", $rt_wrapFunction1(osi_MCPPSolver_Frederickson__init_), "$solve", $rt_wrapFunction0(osi_MCPPSolver_Frederickson_solve), "$getProblemAttributes", $rt_wrapFunction0(osi_MCPPSolver_Frederickson_getProblemAttributes), "$getSolverName", $rt_wrapFunction0(osi_MCPPSolver_Frederickson_getSolverName), "$checkGraphRequirements", $rt_wrapFunction0(osi_MCPPSolver_Frederickson_checkGraphRequirements)],
jur_UCIRangeSet, "UCIRangeSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_49", $rt_wrapFunction1(jur_UCIRangeSet__init_), "$accepts", $rt_wrapFunction2(jur_UCIRangeSet_accepts), "$getName", $rt_wrapFunction0(jur_UCIRangeSet_getName)],
jl_AutoCloseable, 0, jl_Object, [], 3, 3, 0, 0, 0,
ji_Closeable, 0, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0, 0,
ji_OutputStream, 0, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ji_OutputStream__init_)],
ji_FilterOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0, ["$_init_38", $rt_wrapFunction1(ji_FilterOutputStream__init_)],
ji_PrintStream, 0, ji_FilterOutputStream, [jl_Appendable], 0, 3, 0, 0, ["$_init_39", $rt_wrapFunction3(ji_PrintStream__init_)],
otcic_JsConsolePrintStream, 0, ji_PrintStream, [], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(otcic_JsConsolePrintStream__init_), "$println1", $rt_wrapFunction1(otcic_JsConsolePrintStream_println1), "$println", $rt_wrapFunction0(otcic_JsConsolePrintStream_println0), "$println0", $rt_wrapFunction1(otcic_JsConsolePrintStream_println)],
otcic_JSStdoutPrintStream, 0, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(otcic_JSStdoutPrintStream__init_), "$print", $rt_wrapFunction1(otcic_JSStdoutPrintStream_print)],
oc_MultiEdge, "MultiEdge", 1, jl_Object, [], 0, 3, [0,0,0], oc_MultiEdge_$callClinit, ["$_init_40", $rt_wrapFunction1(oc_MultiEdge__init_0), "$getCopy0", $rt_wrapFunction0(oc_MultiEdge_getCopy), "$getNumCopies", $rt_wrapFunction0(oc_MultiEdge_getNumCopies), "$directForward", $rt_wrapFunction0(oc_MultiEdge_directForward), "$directBackward", $rt_wrapFunction0(oc_MultiEdge_directBackward), "$addCopy", $rt_wrapFunction0(oc_MultiEdge_addCopy), "$addReverseCopy", $rt_wrapFunction0(oc_MultiEdge_addReverseCopy), "$tryRemoveCopy",
$rt_wrapFunction0(oc_MultiEdge_tryRemoveCopy), "$getFirst0", $rt_wrapFunction0(oc_MultiEdge_getFirst), "$getType3", $rt_wrapFunction0(oc_MultiEdge_getType), "$isDirectedForward", $rt_wrapFunction0(oc_MultiEdge_isDirectedForward), "$isDirectedBackward", $rt_wrapFunction0(oc_MultiEdge_isDirectedBackward)],
otji_JSWrapper, 0, jl_Object, [], 4, 3, 0, 0, 0,
jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_44", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains)],
ju_Set, 0, jl_Object, [ju_Collection], 3, 3, 0, 0, 0,
ju_AbstractSet, 0, ju_AbstractCollection, [ju_Set], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_AbstractSet__init_), "$equals", $rt_wrapFunction1(ju_AbstractSet_equals), "$hashCode0", $rt_wrapFunction0(ju_AbstractSet_hashCode)],
ju_HashSet, "HashSet", 18, ju_AbstractSet, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_HashSet__init_1), "$_init_37", $rt_wrapFunction1(ju_HashSet__init_0), "$add2", $rt_wrapFunction1(ju_HashSet_add), "$clear", $rt_wrapFunction0(ju_HashSet_clear), "$contains0", $rt_wrapFunction1(ju_HashSet_contains), "$iterator", $rt_wrapFunction0(ju_HashSet_iterator), "$remove0", $rt_wrapFunction1(ju_HashSet_remove), "$size", $rt_wrapFunction0(ju_HashSet_size)],
otp_Platform, 0, jl_Object, [], 4, 3, 0, 0, 0,
jnc_Charset, 0, jl_Object, [jl_Comparable], 1, 3, 0, 0, 0,
oli_AsymmetricLink, 0, jl_Object, [], 3, 3, 0, 0, 0,
oli_WindyEdge, "WindyEdge", 10, oc_Link, [oli_AsymmetricLink], 0, 3, 0, 0, ["$_init_60", $rt_wrapFunction4(oli_WindyEdge__init_), "$_init_61", function(var_1, var_2, var_3, var_4, var_5) { oli_WindyEdge__init_1(this, var_1, var_2, var_3, var_4, var_5); }, "$getReverseCost", $rt_wrapFunction0(oli_WindyEdge_getReverseCost), "$setReverseCost", $rt_wrapFunction1(oli_WindyEdge_setReverseCost), "$setReverseServiceCost", $rt_wrapFunction1(oli_WindyEdge_setReverseServiceCost), "$isReverseRequired", $rt_wrapFunction0(oli_WindyEdge_isReverseRequired),
"$setReverseRequired", $rt_wrapFunction1(oli_WindyEdge_setReverseRequired), "$isWindy", $rt_wrapFunction0(oli_WindyEdge_isWindy)],
opic_MixedCPP, 0, opi_ChinesePostmanProblem, [], 0, 3, 0, 0, ["$_init_65", $rt_wrapFunction2(opic_MixedCPP__init_), "$getProblemAttributes", $rt_wrapFunction0(opic_MixedCPP_getProblemAttributes)],
jl_Boolean, "Boolean", 20, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, jl_Boolean_$callClinit, ["$_init_41", $rt_wrapFunction1(jl_Boolean__init_0), "$compareTo1", $rt_wrapFunction1(jl_Boolean_compareTo), "$booleanValue", $rt_wrapFunction0(jl_Boolean_booleanValue), "$toString", $rt_wrapFunction0(jl_Boolean_toString), "$hashCode0", $rt_wrapFunction0(jl_Boolean_hashCode), "$equals", $rt_wrapFunction1(jl_Boolean_equals), "$compareTo0", $rt_wrapFunction1(jl_Boolean_compareTo0)],
jur_MultiLineSOLSet, "MultiLineSOLSet", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_77", $rt_wrapFunction1(jur_MultiLineSOLSet__init_), "$matches", $rt_wrapFunction3(jur_MultiLineSOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineSOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineSOLSet_getName)],
ju_List, 0, jl_Object, [ju_SequencedCollection], 3, 3, 0, 0, 0]);
$rt_metadata([ju_AbstractList, 0, ju_AbstractCollection, [ju_List], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_AbstractList__init_), "$add2", $rt_wrapFunction1(ju_AbstractList_add), "$iterator", $rt_wrapFunction0(ju_AbstractList_iterator), "$indexOf0", $rt_wrapFunction1(ju_AbstractList_indexOf), "$equals", $rt_wrapFunction1(ju_AbstractList_equals)],
ju_AbstractSequentialList, 0, ju_AbstractList, [], 1, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_AbstractSequentialList__init_), "$add1", $rt_wrapFunction2(ju_AbstractSequentialList_add)],
ju_Deque, 0, jl_Object, [ju_Queue, ju_SequencedCollection], 3, 3, 0, 0, 0,
ju_LinkedList, 0, ju_AbstractSequentialList, [ju_Deque], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_LinkedList__init_0), "$size", $rt_wrapFunction0(ju_LinkedList_size), "$listIterator", $rt_wrapFunction1(ju_LinkedList_listIterator), "$remove3", $rt_wrapFunction0(ju_LinkedList_remove), "$poll", $rt_wrapFunction0(ju_LinkedList_poll), "$peek", $rt_wrapFunction0(ju_LinkedList_peek), "$addFirst", $rt_wrapFunction1(ju_LinkedList_addFirst), "$addLast", $rt_wrapFunction1(ju_LinkedList_addLast)],
ju_NoSuchElementException, "NoSuchElementException", 18, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_NoSuchElementException__init_0)],
otcic_JSStderrPrintStream, 0, otcic_JsConsolePrintStream, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(otcic_JSStderrPrintStream__init_), "$print", $rt_wrapFunction1(otcic_JSStderrPrintStream_print)],
jur_NegativeLookBehind, "NegativeLookBehind", 19, jur_AtomicJointSet, [], 0, 0, 0, 0, ["$_init_28", $rt_wrapFunction2(jur_NegativeLookBehind__init_), "$matches", $rt_wrapFunction3(jur_NegativeLookBehind_matches), "$hasConsumed", $rt_wrapFunction1(jur_NegativeLookBehind_hasConsumed), "$getName", $rt_wrapFunction0(jur_NegativeLookBehind_getName)],
osi_DCPPSolver_Edmonds, 0, oc_SingleVehicleSolver, [], 0, 3, 0, 0, ["$_init_22", $rt_wrapFunction1(osi_DCPPSolver_Edmonds__init_), "$solve", $rt_wrapFunction0(osi_DCPPSolver_Edmonds_solve), "$getProblemAttributes", $rt_wrapFunction0(osi_DCPPSolver_Edmonds_getProblemAttributes), "$getSolverName", $rt_wrapFunction0(osi_DCPPSolver_Edmonds_getSolverName), "$checkGraphRequirements", $rt_wrapFunction0(osi_DCPPSolver_Edmonds_checkGraphRequirements)],
jur_BackReferenceSet, "BackReferenceSet", 19, jur_CIBackReferenceSet, [], 0, 0, 0, 0, ["$_init_15", $rt_wrapFunction2(jur_BackReferenceSet__init_), "$matches", $rt_wrapFunction3(jur_BackReferenceSet_matches), "$find", $rt_wrapFunction3(jur_BackReferenceSet_find), "$findBack", $rt_wrapFunction4(jur_BackReferenceSet_findBack), "$first", $rt_wrapFunction1(jur_BackReferenceSet_first), "$getName", $rt_wrapFunction0(jur_BackReferenceSet_getName)],
jur_AbstractCharClass$LazyLower, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyLower_computeValue)],
jur_DotQuantifierSet, "DotQuantifierSet", 19, jur_QuantifierSet, [], 0, 0, 0, 0, ["$_init_76", $rt_wrapFunction4(jur_DotQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_DotQuantifierSet_matches), "$find", $rt_wrapFunction3(jur_DotQuantifierSet_find), "$getName", $rt_wrapFunction0(jur_DotQuantifierSet_getName)],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue)],
oc_Graph, 0, jl_Object, [], 1, 3, 0, oc_Graph_$callClinit, ["$_init_", $rt_wrapFunction0(oc_Graph__init_), "$assignVertexId", $rt_wrapFunction0(oc_Graph_assignVertexId), "$assignEdgeId", $rt_wrapFunction0(oc_Graph_assignEdgeId), "$assignGraphId", $rt_wrapFunction0(oc_Graph_assignGraphId), "$getEidCounter", $rt_wrapFunction0(oc_Graph_getEidCounter), "$getGraphId", $rt_wrapFunction0(oc_Graph_getGraphId), "$getDepotId", $rt_wrapFunction0(oc_Graph_getDepotId), "$setDepotId", $rt_wrapFunction1(oc_Graph_setDepotId),
"$getAllPairsDistMatrix", $rt_wrapFunction0(oc_Graph_getAllPairsDistMatrix), "$getAllPairsPathMatrix", $rt_wrapFunction0(oc_Graph_getAllPairsPathMatrix), "$getAllPairsEdgePathMatrix", $rt_wrapFunction0(oc_Graph_getAllPairsEdgePathMatrix), "$onStateChange", $rt_wrapFunction0(oc_Graph_onStateChange), "$resetEdgeCounter", $rt_wrapFunction0(oc_Graph_resetEdgeCounter)],
oc_MutableGraph, "MutableGraph", 1, oc_Graph, [], 1, 3, [0,0,0], oc_MutableGraph_$callClinit, ["$_init_", $rt_wrapFunction0(oc_MutableGraph__init_), "$_init_1", $rt_wrapFunction1(oc_MutableGraph__init_0), "$addEdge7", $rt_wrapFunction2(oc_MutableGraph_addEdge6), "$addEdge", function(var_1, var_2, var_3, var_4, var_5) { oc_MutableGraph_addEdge3(this, var_1, var_2, var_3, var_4, var_5); }, "$addEdge6", function(var_1, var_2, var_3, var_4, var_5, var_6) { oc_MutableGraph_addEdge5(this, var_1, var_2, var_3, var_4,
var_5, var_6); }, "$addEdge13", $rt_wrapFunction4(oc_MutableGraph_addEdge1), "$addVertex0", $rt_wrapFunction2(oc_MutableGraph_addVertex0), "$getVertices0", $rt_wrapFunction0(oc_MutableGraph_getVertices0), "$getEdges0", $rt_wrapFunction0(oc_MutableGraph_getEdges), "$clearEdges", $rt_wrapFunction0(oc_MutableGraph_clearEdges), "$addEdge9", $rt_wrapFunction1(oc_MutableGraph_addEdge), "$addEdge12", $rt_wrapFunction3(oc_MutableGraph_addEdge2), "$addEdge5", $rt_wrapFunction4(oc_MutableGraph_addEdge0), "$addEdge2",
$rt_wrapFunction4(oc_MutableGraph_addEdge7), "$addEdge4", function(var_1, var_2, var_3, var_4, var_5) { oc_MutableGraph_addEdge4(this, var_1, var_2, var_3, var_4, var_5); }, "$getEdge", $rt_wrapFunction1(oc_MutableGraph_getEdge), "$addVertex3", $rt_wrapFunction1(oc_MutableGraph_addVertex), "$getVertex", $rt_wrapFunction1(oc_MutableGraph_getVertex), "$removeEdge1", $rt_wrapFunction1(oc_MutableGraph_removeEdge), "$getInternalVertexMap", $rt_wrapFunction0(oc_MutableGraph_getInternalVertexMap), "$getInternalEdgeMap",
$rt_wrapFunction0(oc_MutableGraph_getInternalEdgeMap), "$getEdges", $rt_wrapFunction0(oc_MutableGraph_getEdges0), "$getVertices", $rt_wrapFunction0(oc_MutableGraph_getVertices)],
ogi_MixedGraph, "MixedGraph", 13, oc_MutableGraph, [], 0, 3, [0,0,0], ogi_MixedGraph_$callClinit, ["$_init_", $rt_wrapFunction0(ogi_MixedGraph__init_1), "$_init_1", $rt_wrapFunction1(ogi_MixedGraph__init_0), "$constructEdge1", function(var_1, var_2, var_3, var_4, var_5, var_6) { return ogi_MixedGraph_constructEdge(this, var_1, var_2, var_3, var_4, var_5, var_6); }, "$addEdge11", function(var_1, var_2, var_3, var_4, var_5) { ogi_MixedGraph_addEdge0(this, var_1, var_2, var_3, var_4, var_5); }, "$addVertex4", $rt_wrapFunction1(ogi_MixedGraph_addVertex0),
"$addEdge8", $rt_wrapFunction1(ogi_MixedGraph_addEdge), "$clearEdges", $rt_wrapFunction0(ogi_MixedGraph_clearEdges), "$removeEdge0", $rt_wrapFunction1(ogi_MixedGraph_removeEdge), "$findEdges", $rt_wrapFunction1(ogi_MixedGraph_findEdges), "$getDeepCopy1", $rt_wrapFunction0(ogi_MixedGraph_getDeepCopy), "$constructVertex0", $rt_wrapFunction1(ogi_MixedGraph_constructVertex0), "$addVertex3", $rt_wrapFunction1(ogi_MixedGraph_addVertex), "$addEdge9", $rt_wrapFunction1(ogi_MixedGraph_addEdge1), "$constructVertex", $rt_wrapFunction1(ogi_MixedGraph_constructVertex)],
jur_AbstractCharClass$LazyJavaTitleCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaTitleCase_computeValue)],
ot_OARLibParser, "OARLibParser", 8, jl_Object, [], 0, 3, [0,0,0], ot_OARLibParser_$callClinit, 0,
ju_HashMap$ValueIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, ["$_init_37", $rt_wrapFunction1(ju_HashMap$ValueIterator__init_), "$next", $rt_wrapFunction0(ju_HashMap$ValueIterator_next)],
jur_PreviousMatch, "PreviousMatch", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_PreviousMatch__init_), "$matches", $rt_wrapFunction3(jur_PreviousMatch_matches), "$hasConsumed", $rt_wrapFunction1(jur_PreviousMatch_hasConsumed), "$getName", $rt_wrapFunction0(jur_PreviousMatch_getName)],
otcir_MethodInfo, 0, jl_Object, [], 0, 3, 0, 0, 0,
jur_UnifiedQuantifierSet, "UnifiedQuantifierSet", 19, jur_LeafQuantifierSet, [], 0, 0, 0, 0, ["$_init_75", $rt_wrapFunction1(jur_UnifiedQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_UnifiedQuantifierSet_matches), "$find", $rt_wrapFunction3(jur_UnifiedQuantifierSet_find)],
jlr_AnnotatedElement, 0, jl_Object, [], 3, 3, 0, 0, 0,
jlr_Type, 0, jl_Object, [], 3, 3, 0, 0, 0,
jl_Class, 0, jl_Object, [jlr_AnnotatedElement, jlr_Type], 4, 3, 0, 0, ["$getPlatformClass", $rt_wrapFunction0(jl_Class_getPlatformClass), "$isInstance0", $rt_wrapFunction1(jl_Class_isInstance), "$getName", $rt_wrapFunction0(jl_Class_getName), "$getSimpleName", $rt_wrapFunction0(jl_Class_getSimpleName), "$isPrimitive0", $rt_wrapFunction0(jl_Class_isPrimitive), "$isArray", $rt_wrapFunction0(jl_Class_isArray), "$getComponentType", $rt_wrapFunction0(jl_Class_getComponentType), "$getEnclosingClass", $rt_wrapFunction0(jl_Class_getEnclosingClass)],
ju_BitSet, 0, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_BitSet__init_0), "$_init_1", $rt_wrapFunction1(ju_BitSet__init_), "$set1", $rt_wrapFunction1(ju_BitSet_set), "$set", $rt_wrapFunction2(ju_BitSet_set0), "$clear0", $rt_wrapFunction1(ju_BitSet_clear0), "$clear1", $rt_wrapFunction2(ju_BitSet_clear), "$get0", $rt_wrapFunction1(ju_BitSet_get), "$nextSetBit", $rt_wrapFunction1(ju_BitSet_nextSetBit), "$nextClearBit", $rt_wrapFunction1(ju_BitSet_nextClearBit), "$intersects",
$rt_wrapFunction1(ju_BitSet_intersects), "$and", $rt_wrapFunction1(ju_BitSet_and), "$andNot", $rt_wrapFunction1(ju_BitSet_andNot), "$or", $rt_wrapFunction1(ju_BitSet_or), "$xor", $rt_wrapFunction1(ju_BitSet_xor), "$isEmpty", $rt_wrapFunction0(ju_BitSet_isEmpty)],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_4", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains)],
jur_NonCapFSet, "NonCapFSet", 19, jur_FSet, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_NonCapFSet__init_), "$matches", $rt_wrapFunction3(jur_NonCapFSet_matches), "$getName", $rt_wrapFunction0(jur_NonCapFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_NonCapFSet_hasConsumed)],
jl_Float, 0, jl_Number, [jl_Comparable], 0, 3, 0, jl_Float_$callClinit, 0,
osi_UCPPSolver_Edmonds, 0, oc_SingleVehicleSolver, [], 0, 3, 0, 0, ["$_init_22", $rt_wrapFunction1(osi_UCPPSolver_Edmonds__init_), "$solve", $rt_wrapFunction0(osi_UCPPSolver_Edmonds_solve), "$getProblemAttributes", $rt_wrapFunction0(osi_UCPPSolver_Edmonds_getProblemAttributes), "$getSolverName", $rt_wrapFunction0(osi_UCPPSolver_Edmonds_getSolverName), "$checkGraphRequirements", $rt_wrapFunction0(osi_UCPPSolver_Edmonds_checkGraphRequirements)],
ju_Arrays, 0, jl_Object, [], 0, 3, 0, 0, 0,
jur_CharSet, "CharSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_74", $rt_wrapFunction1(jur_CharSet__init_0), "$charCount", $rt_wrapFunction0(jur_CharSet_charCount), "$accepts", $rt_wrapFunction2(jur_CharSet_accepts), "$find", $rt_wrapFunction3(jur_CharSet_find), "$findBack", $rt_wrapFunction4(jur_CharSet_findBack), "$getName", $rt_wrapFunction0(jur_CharSet_getName), "$getChar", $rt_wrapFunction0(jur_CharSet_getChar), "$first", $rt_wrapFunction1(jur_CharSet_first)],
jur_UCISupplCharSet, "UCISupplCharSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_UCISupplCharSet__init_), "$accepts", $rt_wrapFunction2(jur_UCISupplCharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCISupplCharSet_getName)],
jl_System, 0, jl_Object, [], 4, 3, 0, 0, 0,
ot_OARLibParser$LinkFormatType, 0, jl_Enum, [], 12, 0, 0, ot_OARLibParser$LinkFormatType_$callClinit, 0,
jur_CharClass$3, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_86", $rt_wrapFunction3(jur_CharClass$3__init_), "$contains", $rt_wrapFunction1(jur_CharClass$3_contains)],
jur_CharClass$4, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_84", $rt_wrapFunction4(jur_CharClass$4__init_), "$contains", $rt_wrapFunction1(jur_CharClass$4_contains)],
opi_ProblemAttributes$NumVehicles, 0, jl_Enum, [], 12, 3, 0, opi_ProblemAttributes$NumVehicles_$callClinit, 0,
jur_CharClass$1, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_85", $rt_wrapFunction2(jur_CharClass$1__init_), "$contains", $rt_wrapFunction1(jur_CharClass$1_contains)],
jur_CharClass$2, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_86", $rt_wrapFunction3(jur_CharClass$2__init_), "$contains", $rt_wrapFunction1(jur_CharClass$2_contains)],
jur_AbstractCharClass$LazyRange, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_15", $rt_wrapFunction2(jur_AbstractCharClass$LazyRange__init_0), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyRange_computeValue)],
jur_CharClass$7, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_85", $rt_wrapFunction2(jur_CharClass$7__init_), "$contains", $rt_wrapFunction1(jur_CharClass$7_contains)],
jur_AbstractCharClass$LazyXDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyXDigit_computeValue)],
jur_CharClass$8, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_87", $rt_wrapFunction3(jur_CharClass$8__init_), "$contains", $rt_wrapFunction1(jur_CharClass$8_contains)],
jur_CharClass$5, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_84", $rt_wrapFunction4(jur_CharClass$5__init_), "$contains", $rt_wrapFunction1(jur_CharClass$5_contains)],
gt_TObjectHashingStrategy, 0, jl_Object, [ji_Serializable, gt_Equality], 3, 3, 0, 0, 0,
jur_CharClass$6, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_85", $rt_wrapFunction2(jur_CharClass$6__init_), "$contains", $rt_wrapFunction1(jur_CharClass$6_contains)],
ju_Collections$5, 0, jl_Object, [ju_ListIterator], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_Collections$5__init_)],
ju_LinkedList$Entry, 0, jl_Object, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_LinkedList$Entry__init_0)],
ju_RandomAccess, 0, jl_Object, [], 3, 3, 0, 0, 0,
ju_TemplateCollections$AbstractImmutableList, 0, ju_AbstractList, [ju_RandomAccess], 1, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_TemplateCollections$AbstractImmutableList__init_)]]);
$rt_metadata([ju_Collections$3, 0, ju_TemplateCollections$AbstractImmutableList, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_Collections$3__init_)],
jur_DotSet, "DotSet", 19, jur_JointSet, [], 4, 0, 0, 0, ["$_init_77", $rt_wrapFunction1(jur_DotSet__init_), "$matches", $rt_wrapFunction3(jur_DotSet_matches), "$getName", $rt_wrapFunction0(jur_DotSet_getName), "$setNext", $rt_wrapFunction1(jur_DotSet_setNext), "$getType0", $rt_wrapFunction0(jur_DotSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotSet_hasConsumed)],
jur_CharClass$9, 0, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_87", $rt_wrapFunction3(jur_CharClass$9__init_), "$contains", $rt_wrapFunction1(jur_CharClass$9_contains)],
ju_Collections$4, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_Collections$4__init_)],
jur_Matcher, 0, jl_Object, [jur_MatchResult], 4, 3, 0, 0, ["$find0", $rt_wrapFunction1(jur_Matcher_find), "$find1", $rt_wrapFunction0(jur_Matcher_find0), "$start", $rt_wrapFunction1(jur_Matcher_start0), "$end", $rt_wrapFunction1(jur_Matcher_end), "$start0", $rt_wrapFunction0(jur_Matcher_start), "$end0", $rt_wrapFunction0(jur_Matcher_end0), "$hasTransparentBounds", $rt_wrapFunction0(jur_Matcher_hasTransparentBounds), "$_init_69", $rt_wrapFunction2(jur_Matcher__init_)],
jl_Character, 0, jl_Object, [jl_Comparable], 0, 3, 0, jl_Character_$callClinit, 0,
ju_TemplateCollections$AbstractImmutableSet, 0, ju_AbstractSet, [], 1, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_TemplateCollections$AbstractImmutableSet__init_)],
ju_Collections$1, 0, ju_TemplateCollections$AbstractImmutableSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_Collections$1__init_)],
jur_DotAllSet, "DotAllSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_DotAllSet__init_), "$matches", $rt_wrapFunction3(jur_DotAllSet_matches), "$getName", $rt_wrapFunction0(jur_DotAllSet_getName), "$setNext", $rt_wrapFunction1(jur_DotAllSet_setNext), "$getType0", $rt_wrapFunction0(jur_DotAllSet_getType), "$hasConsumed", $rt_wrapFunction1(jur_DotAllSet_hasConsumed)],
ju_Collections$2, 0, ju_TemplateCollections$AbstractImmutableMap, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ju_Collections$2__init_)],
jur_CICharSet, "CICharSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_74", $rt_wrapFunction1(jur_CICharSet__init_0), "$accepts", $rt_wrapFunction2(jur_CICharSet_accepts), "$getName", $rt_wrapFunction0(jur_CICharSet_getName)],
jur_SupplCharSet, "SupplCharSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_SupplCharSet__init_), "$accepts", $rt_wrapFunction2(jur_SupplCharSet_accepts), "$find", $rt_wrapFunction3(jur_SupplCharSet_find), "$findBack", $rt_wrapFunction4(jur_SupplCharSet_findBack), "$getName", $rt_wrapFunction0(jur_SupplCharSet_getName), "$getCodePoint", $rt_wrapFunction0(jur_SupplCharSet_getCodePoint), "$first", $rt_wrapFunction1(jur_SupplCharSet_first)],
jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_7", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaLowerCase$1_contains)],
gt_TObjectHash$NULL, 0, jl_Object, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(gt_TObjectHash$NULL__init_)],
ovi_MixedVertex, "MixedVertex", 7, oc_Vertex, [], 0, 3, 0, 0, ["$_init_0", $rt_wrapFunction1(ovi_MixedVertex__init_0), "$addToNeighbors", $rt_wrapFunction2(ovi_MixedVertex_addToNeighbors), "$removeFromNeighbors", $rt_wrapFunction2(ovi_MixedVertex_removeFromNeighbors), "$getInDegree", $rt_wrapFunction0(ovi_MixedVertex_getInDegree), "$setInDegree", $rt_wrapFunction1(ovi_MixedVertex_setInDegree), "$getOutDegree", $rt_wrapFunction0(ovi_MixedVertex_getOutDegree), "$setOutDegree", $rt_wrapFunction1(ovi_MixedVertex_setOutDegree),
"$getDegree", $rt_wrapFunction0(ovi_MixedVertex_getDegree), "$setDegree", $rt_wrapFunction1(ovi_MixedVertex_setDegree), "$getDelta", $rt_wrapFunction0(ovi_MixedVertex_getDelta), "$getNeighbors0", $rt_wrapFunction0(ovi_MixedVertex_getNeighbors), "$clearNeighbors", $rt_wrapFunction0(ovi_MixedVertex_clearNeighbors), "$getNeighbors", $rt_wrapFunction0(ovi_MixedVertex_getNeighbors0)],
gt_TIntObjectHashMap, 0, gt_THash, [gt_TIntHashingStrategy], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(gt_TIntObjectHashMap__init_0), "$setUp", $rt_wrapFunction1(gt_TIntObjectHashMap_setUp), "$contains", $rt_wrapFunction1(gt_TIntObjectHashMap_contains), "$capacity", $rt_wrapFunction0(gt_TIntObjectHashMap_capacity), "$put1", $rt_wrapFunction2(gt_TIntObjectHashMap_put), "$rehash", $rt_wrapFunction1(gt_TIntObjectHashMap_rehash), "$get", $rt_wrapFunction1(gt_TIntObjectHashMap_get), "$remove", $rt_wrapFunction1(gt_TIntObjectHashMap_remove),
"$index", $rt_wrapFunction1(gt_TIntObjectHashMap_index), "$insertionIndex", $rt_wrapFunction1(gt_TIntObjectHashMap_insertionIndex), "$removeAt", $rt_wrapFunction1(gt_TIntObjectHashMap_removeAt), "$keys", $rt_wrapFunction0(gt_TIntObjectHashMap_keys), "$containsKey0", $rt_wrapFunction1(gt_TIntObjectHashMap_containsKey), "$computeHashCode", $rt_wrapFunction1(gt_TIntObjectHashMap_computeHashCode)],
jur_AbstractCharClass$LazyCategoryScope, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_20", $rt_wrapFunction2(jur_AbstractCharClass$LazyCategoryScope__init_1), "$_init_21", $rt_wrapFunction3(jur_AbstractCharClass$LazyCategoryScope__init_0), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyCategoryScope_computeValue)],
jur_SupplRangeSet, "SupplRangeSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_49", $rt_wrapFunction1(jur_SupplRangeSet__init_), "$matches", $rt_wrapFunction3(jur_SupplRangeSet_matches), "$getName", $rt_wrapFunction0(jur_SupplRangeSet_getName), "$contains", $rt_wrapFunction1(jur_SupplRangeSet_contains), "$first", $rt_wrapFunction1(jur_SupplRangeSet_first), "$getChars", $rt_wrapFunction0(jur_SupplRangeSet_getChars), "$setNext", $rt_wrapFunction1(jur_SupplRangeSet_setNext), "$hasConsumed", $rt_wrapFunction1(jur_SupplRangeSet_hasConsumed)],
jur_UCISupplRangeSet, "UCISupplRangeSet", 19, jur_SupplRangeSet, [], 0, 0, 0, 0, ["$_init_49", $rt_wrapFunction1(jur_UCISupplRangeSet__init_0), "$contains", $rt_wrapFunction1(jur_UCISupplRangeSet_contains), "$getName", $rt_wrapFunction0(jur_UCISupplRangeSet_getName)],
jur_AbstractCharClass$LazyJavaUpperCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUpperCase_computeValue)],
jur_AbstractLineTerminator, 0, jl_Object, [], 1, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractLineTerminator__init_)],
jur_HangulDecomposedCharSet, "HangulDecomposedCharSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_73", $rt_wrapFunction2(jur_HangulDecomposedCharSet__init_), "$setNext", $rt_wrapFunction1(jur_HangulDecomposedCharSet_setNext), "$getName", $rt_wrapFunction0(jur_HangulDecomposedCharSet_getName), "$matches", $rt_wrapFunction3(jur_HangulDecomposedCharSet_matches), "$first", $rt_wrapFunction1(jur_HangulDecomposedCharSet_first), "$hasConsumed", $rt_wrapFunction1(jur_HangulDecomposedCharSet_hasConsumed)],
jur_AbstractCharClass$LazyPunct, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyPunct_computeValue)],
opi_ProblemAttributes$NumDepots, 0, jl_Enum, [], 12, 3, 0, opi_ProblemAttributes$NumDepots_$callClinit, 0,
jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_46", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaTitleCase$1_contains)],
otcir_ClassList, 0, jl_Object, [], 0, 3, 0, 0, 0,
ju_Collections$_clinit_$lambda$_59_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_Collections$_clinit_$lambda$_59_0__init_)],
jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_58", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaMirrored$1_contains)],
opic_UndirectedCPP, 0, opi_ChinesePostmanProblem, [], 0, 3, 0, 0, ["$_init_64", $rt_wrapFunction2(opic_UndirectedCPP__init_), "$getProblemAttributes", $rt_wrapFunction0(opic_UndirectedCPP_getProblemAttributes)],
jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_59", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaISOControl$1_contains)],
jur_WordBoundary, "WordBoundary", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_41", $rt_wrapFunction1(jur_WordBoundary__init_0), "$matches", $rt_wrapFunction3(jur_WordBoundary_matches), "$hasConsumed", $rt_wrapFunction1(jur_WordBoundary_hasConsumed), "$getName", $rt_wrapFunction0(jur_WordBoundary_getName)],
jur_UEOLSet, "UEOLSet", 19, jur_AbstractSet, [], 4, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_UEOLSet__init_), "$matches", $rt_wrapFunction3(jur_UEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UEOLSet_getName)],
jur_AbstractCharClass$LazySpace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpace_computeValue)],
ju_HashMap$1, 0, ju_AbstractSet, [], 0, 0, 0, 0, ["$_init_37", $rt_wrapFunction1(ju_HashMap$1__init_), "$size", $rt_wrapFunction0(ju_HashMap$1_size), "$iterator", $rt_wrapFunction0(ju_HashMap$1_iterator)],
jur_UCICharSet, "UCICharSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_74", $rt_wrapFunction1(jur_UCICharSet__init_), "$accepts", $rt_wrapFunction2(jur_UCICharSet_accepts), "$getName", $rt_wrapFunction0(jur_UCICharSet_getName)],
ju_HashMap$2, 0, ju_AbstractCollection, [], 0, 0, 0, 0, ["$_init_37", $rt_wrapFunction1(ju_HashMap$2__init_), "$iterator", $rt_wrapFunction0(ju_HashMap$2_iterator)],
jl_Double, 0, jl_Number, [jl_Comparable], 0, 3, 0, jl_Double_$callClinit, ["$_init_51", $rt_wrapFunction1(jl_Double__init_), "$doubleValue", $rt_wrapFunction0(jl_Double_doubleValue)],
jur_AtomicFSet, "AtomicFSet", 19, jur_FSet, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_AtomicFSet__init_), "$matches", $rt_wrapFunction3(jur_AtomicFSet_matches), "$getIndex", $rt_wrapFunction0(jur_AtomicFSet_getIndex), "$getName", $rt_wrapFunction0(jur_AtomicFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_AtomicFSet_hasConsumed)],
jur_LowSurrogateCharSet, "LowSurrogateCharSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_74", $rt_wrapFunction1(jur_LowSurrogateCharSet__init_0), "$setNext", $rt_wrapFunction1(jur_LowSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_LowSurrogateCharSet_matches), "$find", $rt_wrapFunction3(jur_LowSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_LowSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_LowSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_LowSurrogateCharSet_first),
"$hasConsumed", $rt_wrapFunction1(jur_LowSurrogateCharSet_hasConsumed)],
ogu_Pair, "Pair", 14, jl_Object, [], 0, 3, 0, 0, ["$_init_24", $rt_wrapFunction2(ogu_Pair__init_0), "$getFirst", $rt_wrapFunction0(ogu_Pair_getFirst), "$setFirst", $rt_wrapFunction1(ogu_Pair_setFirst), "$getSecond", $rt_wrapFunction0(ogu_Pair_getSecond), "$setSecond", $rt_wrapFunction1(ogu_Pair_setSecond), "$equals", $rt_wrapFunction1(ogu_Pair_equals), "$hashCode0", $rt_wrapFunction0(ogu_Pair_hashCode)],
jur_CompositeGroupQuantifierSet, "CompositeGroupQuantifierSet", 19, jur_GroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_52", function(var_1, var_2, var_3, var_4, var_5) { jur_CompositeGroupQuantifierSet__init_(this, var_1, var_2, var_3, var_4, var_5); }, "$matches", $rt_wrapFunction3(jur_CompositeGroupQuantifierSet_matches), "$getName", $rt_wrapFunction0(jur_CompositeGroupQuantifierSet_getName)],
jur_RelCompositeGroupQuantifierSet, "RelCompositeGroupQuantifierSet", 19, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_52", function(var_1, var_2, var_3, var_4, var_5) { jur_RelCompositeGroupQuantifierSet__init_(this, var_1, var_2, var_3, var_4, var_5); }, "$matches", $rt_wrapFunction3(jur_RelCompositeGroupQuantifierSet_matches)],
ju_ArrayList, "ArrayList", 18, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ju_ArrayList__init_2), "$_init_1", $rt_wrapFunction1(ju_ArrayList__init_0), "$_init_66", $rt_wrapFunction1(ju_ArrayList__init_1), "$ensureCapacity", $rt_wrapFunction1(ju_ArrayList_ensureCapacity), "$get", $rt_wrapFunction1(ju_ArrayList_get), "$size", $rt_wrapFunction0(ju_ArrayList_size), "$set0", $rt_wrapFunction2(ju_ArrayList_set), "$add2", $rt_wrapFunction1(ju_ArrayList_add),
"$add1", $rt_wrapFunction2(ju_ArrayList_add0), "$remove", $rt_wrapFunction1(ju_ArrayList_remove), "$remove0", $rt_wrapFunction1(ju_ArrayList_remove0), "$clear", $rt_wrapFunction0(ju_ArrayList_clear), "$addAll0", $rt_wrapFunction2(ju_ArrayList_addAll), "$toString", $rt_wrapFunction0(ju_ArrayList_toString), "$hashCode0", $rt_wrapFunction0(ju_ArrayList_hashCode)],
ju_LinkedList$SequentialListIterator, 0, jl_Object, [ju_ListIterator], 0, 0, 0, 0, ["$_init_43", $rt_wrapFunction4(ju_LinkedList$SequentialListIterator__init_0), "$add5", $rt_wrapFunction1(ju_LinkedList$SequentialListIterator_add)],
oe_WrongEdgeTypeException, "WrongEdgeTypeException", 11, jl_Exception, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(oe_WrongEdgeTypeException__init_0)],
jur_RelAltGroupQuantifierSet, "RelAltGroupQuantifierSet", 19, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_RelAltGroupQuantifierSet_matches)],
jur_IntHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
jl_String, "String", 20, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, jl_String_$callClinit, ["$_init_", $rt_wrapFunction0(jl_String__init_3), "$_init_32", $rt_wrapFunction1(jl_String__init_0), "$_init_53", $rt_wrapFunction1(jl_String__init_4), "$_init_16", $rt_wrapFunction3(jl_String__init_6), "$charAt", $rt_wrapFunction1(jl_String_charAt), "$length", $rt_wrapFunction0(jl_String_length), "$isEmpty", $rt_wrapFunction0(jl_String_isEmpty), "$compareTo2", $rt_wrapFunction1(jl_String_compareTo0),
"$startsWith0", $rt_wrapFunction2(jl_String_startsWith), "$startsWith1", $rt_wrapFunction1(jl_String_startsWith0), "$indexOf4", $rt_wrapFunction2(jl_String_indexOf), "$indexOf", $rt_wrapFunction1(jl_String_indexOf2), "$lastIndexOf2", $rt_wrapFunction2(jl_String_lastIndexOf), "$lastIndexOf1", $rt_wrapFunction1(jl_String_lastIndexOf1), "$indexOf2", $rt_wrapFunction2(jl_String_indexOf1), "$indexOf3", $rt_wrapFunction1(jl_String_indexOf0), "$lastIndexOf0", $rt_wrapFunction2(jl_String_lastIndexOf0), "$substring",
$rt_wrapFunction2(jl_String_substring), "$substring0", $rt_wrapFunction1(jl_String_substring0), "$subSequence", $rt_wrapFunction2(jl_String_subSequence), "$replace0", $rt_wrapFunction2(jl_String_replace0), "$contains1", $rt_wrapFunction1(jl_String_contains), "$replace", $rt_wrapFunction2(jl_String_replace), "$trim", $rt_wrapFunction0(jl_String_trim), "$toString", $rt_wrapFunction0(jl_String_toString), "$toCharArray", $rt_wrapFunction0(jl_String_toCharArray), "$equals", $rt_wrapFunction1(jl_String_equals), "$equalsIgnoreCase",
$rt_wrapFunction1(jl_String_equalsIgnoreCase), "$hashCode0", $rt_wrapFunction0(jl_String_hashCode), "$toUpperCase0", $rt_wrapFunction1(jl_String_toUpperCase), "$split", $rt_wrapFunction1(jl_String_split), "$compareTo0", $rt_wrapFunction1(jl_String_compareTo)],
jl_NegativeArraySizeException, "NegativeArraySizeException", 20, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_NegativeArraySizeException__init_)],
oe_NoDemandSetException, "NoDemandSetException", 11, jl_Exception, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(oe_NoDemandSetException__init_)]]);
$rt_metadata([jur_ReluctantAltQuantifierSet, "ReluctantAltQuantifierSet", 19, jur_AltQuantifierSet, [], 0, 0, 0, 0, ["$_init_10", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_ReluctantAltQuantifierSet_matches)],
jur_AbstractCharClass$LazyJavaWhitespace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaWhitespace_computeValue)],
ogu_CommonAlgorithms, "CommonAlgorithms", 14, jl_Object, [], 0, 3, [0,0,0], ogu_CommonAlgorithms_$callClinit, 0,
jur_FSet$PossessiveFSet, "FSet$PossessiveFSet", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_FSet$PossessiveFSet__init_), "$matches", $rt_wrapFunction3(jur_FSet$PossessiveFSet_matches), "$getName", $rt_wrapFunction0(jur_FSet$PossessiveFSet_getName), "$hasConsumed", $rt_wrapFunction1(jur_FSet$PossessiveFSet_hasConsumed)],
jl_IllegalArgumentException, "IllegalArgumentException", 20, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_IllegalArgumentException__init_1), "$_init_0", $rt_wrapFunction1(jl_IllegalArgumentException__init_2)],
jl_NumberFormatException, "NumberFormatException", 20, jl_IllegalArgumentException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_NumberFormatException__init_2), "$_init_0", $rt_wrapFunction1(jl_NumberFormatException__init_0)],
oli_Edge, "Edge", 10, oc_Link, [], 0, 3, 0, 0, ["$_init_13", $rt_wrapFunction3(oli_Edge__init_0), "$getCopy", $rt_wrapFunction0(oli_Edge_getCopy), "$isWindy", $rt_wrapFunction0(oli_Edge_isWindy)],
jur_PosCompositeGroupQuantifierSet, "PosCompositeGroupQuantifierSet", 19, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_52", function(var_1, var_2, var_3, var_4, var_5) { jur_PosCompositeGroupQuantifierSet__init_(this, var_1, var_2, var_3, var_4, var_5); }, "$matches", $rt_wrapFunction3(jur_PosCompositeGroupQuantifierSet_matches)],
oc_Route, "Route", 1, jl_Object, [], 1, 3, [0,0,0], oc_Route_$callClinit, ["$_init_", $rt_wrapFunction0(oc_Route__init_), "$getCost", $rt_wrapFunction0(oc_Route_getCost), "$getPath", $rt_wrapFunction0(oc_Route_getPath), "$appendEdge0", $rt_wrapFunction1(oc_Route_appendEdge), "$appendEdge", $rt_wrapFunction2(oc_Route_appendEdge0), "$toString", $rt_wrapFunction0(oc_Route_toString)],
jur_MultiLineEOLSet, "MultiLineEOLSet", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_MultiLineEOLSet__init_), "$matches", $rt_wrapFunction3(jur_MultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_MultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_MultiLineEOLSet_getName)],
jur_IntArrHash, 0, jl_Object, [], 0, 0, 0, 0, 0,
jur_AbstractCharClass$LazyJavaMirrored, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaMirrored_computeValue)],
jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_31", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaDigit$1_contains)],
jur_AbstractCharClass$LazyJavaISOControl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaISOControl_computeValue)],
jl_IllegalStateException, "IllegalStateException", 20, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_IllegalStateException__init_0)],
oc_Link$Zone, 0, jl_Enum, [], 12, 3, 0, oc_Link$Zone_$callClinit, 0,
jur_HighSurrogateCharSet, "HighSurrogateCharSet", 19, jur_JointSet, [], 0, 0, 0, 0, ["$_init_74", $rt_wrapFunction1(jur_HighSurrogateCharSet__init_), "$setNext", $rt_wrapFunction1(jur_HighSurrogateCharSet_setNext), "$matches", $rt_wrapFunction3(jur_HighSurrogateCharSet_matches), "$find", $rt_wrapFunction3(jur_HighSurrogateCharSet_find), "$findBack", $rt_wrapFunction4(jur_HighSurrogateCharSet_findBack), "$getName", $rt_wrapFunction0(jur_HighSurrogateCharSet_getName), "$first", $rt_wrapFunction1(jur_HighSurrogateCharSet_first),
"$hasConsumed", $rt_wrapFunction1(jur_HighSurrogateCharSet_hasConsumed)],
osi_MCPPSolver_Yaoyuenyong, 0, oc_SingleVehicleSolver, [], 0, 3, 0, 0, ["$_init_22", $rt_wrapFunction1(osi_MCPPSolver_Yaoyuenyong__init_), "$solve", $rt_wrapFunction0(osi_MCPPSolver_Yaoyuenyong_solve), "$getProblemAttributes", $rt_wrapFunction0(osi_MCPPSolver_Yaoyuenyong_getProblemAttributes), "$getSolverName", $rt_wrapFunction0(osi_MCPPSolver_Yaoyuenyong_getSolverName), "$checkGraphRequirements", $rt_wrapFunction0(osi_MCPPSolver_Yaoyuenyong_checkGraphRequirements)],
jur_ReluctantCompositeQuantifierSet, "ReluctantCompositeQuantifierSet", 19, jur_CompositeQuantifierSet, [], 0, 0, 0, 0, ["$_init_11", $rt_wrapFunction4(jur_ReluctantCompositeQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_ReluctantCompositeQuantifierSet_matches)],
jl_NullPointerException, "NullPointerException", 20, jl_RuntimeException, [], 0, 3, 0, 0, ["$_init_0", $rt_wrapFunction1(jl_NullPointerException__init_2), "$_init_", $rt_wrapFunction0(jl_NullPointerException__init_0)],
jur_SOLSet, "SOLSet", 19, jur_AbstractSet, [], 4, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_SOLSet__init_), "$matches", $rt_wrapFunction3(jur_SOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_SOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_SOLSet_getName)],
oe_InvalidEndpointsException, "InvalidEndpointsException", 11, jl_Exception, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(oe_InvalidEndpointsException__init_0)],
jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_36", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1__init_), "$contains", $rt_wrapFunction1(jur_AbstractCharClass$LazyJavaSpaceChar$1_contains)],
ori_Tour, "Tour", 3, oc_Route, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(ori_Tour__init_0)],
gt_TObjectHash, 0, gt_THash, [gt_TObjectHashingStrategy], 1, 3, 0, gt_TObjectHash_$callClinit, 0,
ogu_BlossomV$1, 0, jl_Object, [ju_Comparator], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(ogu_BlossomV$1__init_), "$compare6", $rt_wrapFunction2(ogu_BlossomV$1_compare), "$compare1", $rt_wrapFunction2(ogu_BlossomV$1_compare0)],
jl_Math, 0, jl_Object, [], 4, 3, 0, 0, 0,
ogi_WindyGraph, "WindyGraph", 13, oc_MutableGraph, [], 0, 3, [0,0,0], ogi_WindyGraph_$callClinit, ["$_init_", $rt_wrapFunction0(ogi_WindyGraph__init_1), "$_init_1", $rt_wrapFunction1(ogi_WindyGraph__init_0), "$addEdge", function(var_1, var_2, var_3, var_4, var_5) { ogi_WindyGraph_addEdge2(this, var_1, var_2, var_3, var_4, var_5); }, "$addEdge10", function(var_1, var_2, var_3, var_4, var_5) { ogi_WindyGraph_addEdge1(this, var_1, var_2, var_3, var_4, var_5); }, "$addEdge6", function(var_1, var_2, var_3, var_4,
var_5, var_6) { ogi_WindyGraph_addEdge4(this, var_1, var_2, var_3, var_4, var_5, var_6); }, "$addEdge1", function(var_1, var_2, var_3, var_4, var_5, var_6, var_7) { ogi_WindyGraph_addEdge3(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7); }, "$constructEdge2", function(var_1, var_2, var_3, var_4, var_5) { return ogi_WindyGraph_constructEdge0(this, var_1, var_2, var_3, var_4, var_5); }, "$constructEdge3", function(var_1, var_2, var_3, var_4, var_5, var_6) { return ogi_WindyGraph_constructEdge(this, var_1,
var_2, var_3, var_4, var_5, var_6); }, "$addVertex", $rt_wrapFunction1(ogi_WindyGraph_addVertex), "$addEdge14", $rt_wrapFunction1(ogi_WindyGraph_addEdge0), "$getDeepCopy", $rt_wrapFunction0(ogi_WindyGraph_getDeepCopy), "$constructVertex1", $rt_wrapFunction1(ogi_WindyGraph_constructVertex0), "$addVertex3", $rt_wrapFunction1(ogi_WindyGraph_addVertex0), "$addEdge9", $rt_wrapFunction1(ogi_WindyGraph_addEdge), "$constructVertex", $rt_wrapFunction1(ogi_WindyGraph_constructVertex)],
ju_HashMap$HashMapEntrySet, 0, ju_AbstractSet, [], 0, 0, 0, 0, ["$_init_37", $rt_wrapFunction1(ju_HashMap$HashMapEntrySet__init_), "$iterator", $rt_wrapFunction0(ju_HashMap$HashMapEntrySet_iterator)],
ogi_DirectedGraph, "DirectedGraph", 13, oc_MutableGraph, [], 0, 3, [0,0,0], ogi_DirectedGraph_$callClinit, ["$_init_", $rt_wrapFunction0(ogi_DirectedGraph__init_2), "$_init_1", $rt_wrapFunction1(ogi_DirectedGraph__init_1), "$addVertex1", $rt_wrapFunction1(ogi_DirectedGraph_addVertex0), "$addEdge3", $rt_wrapFunction1(ogi_DirectedGraph_addEdge), "$removeEdge", $rt_wrapFunction1(ogi_DirectedGraph_removeEdge), "$getDeepCopy0", $rt_wrapFunction0(ogi_DirectedGraph_getDeepCopy), "$constructEdge", $rt_wrapFunction4(ogi_DirectedGraph_constructEdge),
"$constructVertex2", $rt_wrapFunction1(ogi_DirectedGraph_constructVertex), "$addVertex3", $rt_wrapFunction1(ogi_DirectedGraph_addVertex), "$addEdge9", $rt_wrapFunction1(ogi_DirectedGraph_addEdge0), "$getDeepCopy3", $rt_wrapFunction0(ogi_DirectedGraph_getDeepCopy0), "$constructEdge0", $rt_wrapFunction4(ogi_DirectedGraph_constructEdge0), "$constructVertex", $rt_wrapFunction1(ogi_DirectedGraph_constructVertex0)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue)],
jur_PatternSyntaxException, "PatternSyntaxException", 19, jl_IllegalArgumentException, [], 0, 3, 0, 0, ["$_init_70", $rt_wrapFunction3(jur_PatternSyntaxException__init_0), "$getMessage", $rt_wrapFunction0(jur_PatternSyntaxException_getMessage)],
ot_TeaVMWrapper, "TeaVMWrapper", 8, jl_Object, [], 0, 3, [0,0,0], ot_TeaVMWrapper_$callClinit, 0,
opi_RuralPostmanProblem, "RuralPostmanProblem", 5, oc_Problem, [], 1, 3, [0,0,0], opi_RuralPostmanProblem_$callClinit, ["$_init_17", $rt_wrapFunction3(opi_RuralPostmanProblem__init_)],
jur_AbstractCharClass$LazyJavaDefined, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaDefined_computeValue)],
opi_ProblemAttributes, 0, jl_Object, [], 0, 3, 0, 0, ["$_init_18", function(var_1, var_2, var_3, var_4, var_5) { opi_ProblemAttributes__init_(this, var_1, var_2, var_3, var_4, var_5); }, "$getmGraphType", $rt_wrapFunction0(opi_ProblemAttributes_getmGraphType), "$getmProblemType", $rt_wrapFunction0(opi_ProblemAttributes_getmProblemType), "$getmNumVehicles", $rt_wrapFunction0(opi_ProblemAttributes_getmNumVehicles), "$getmNumDepots", $rt_wrapFunction0(opi_ProblemAttributes_getmNumDepots), "$getmProperties", $rt_wrapFunction0(opi_ProblemAttributes_getmProperties),
"$isCompatibleWith", $rt_wrapFunction1(opi_ProblemAttributes_isCompatibleWith)],
opi_ProblemAttributes$Type, 0, jl_Enum, [], 12, 3, 0, opi_ProblemAttributes$Type_$callClinit, 0,
jur_Pattern, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0, ["$matcher", $rt_wrapFunction1(jur_Pattern_matcher), "$split1", $rt_wrapFunction2(jur_Pattern_split0), "$split0", $rt_wrapFunction1(jur_Pattern_split), "$pattern", $rt_wrapFunction0(jur_Pattern_pattern), "$groupCount", $rt_wrapFunction0(jur_Pattern_groupCount), "$compCount", $rt_wrapFunction0(jur_Pattern_compCount), "$consCount", $rt_wrapFunction0(jur_Pattern_consCount)],
oc_Link$HighwayType, 0, jl_Enum, [], 12, 3, 0, oc_Link$HighwayType_$callClinit, 0,
jur_PosAltGroupQuantifierSet, "PosAltGroupQuantifierSet", 19, jur_AltGroupQuantifierSet, [], 0, 0, 0, 0, ["$_init_9", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet__init_), "$matches", $rt_wrapFunction3(jur_PosAltGroupQuantifierSet_matches), "$setNext", $rt_wrapFunction1(jur_PosAltGroupQuantifierSet_setNext)],
ou_SimpleLogger, 0, jl_Object, [], 0, 3, 0, 0, ["$debug", $rt_wrapFunction1(ou_SimpleLogger_debug), "$info", $rt_wrapFunction1(ou_SimpleLogger_info), "$warn", $rt_wrapFunction1(ou_SimpleLogger_warn), "$error", $rt_wrapFunction1(ou_SimpleLogger_error0), "$error0", $rt_wrapFunction2(ou_SimpleLogger_error)],
ovi_WindyVertex, "WindyVertex", 7, oc_Vertex, [], 0, 3, 0, 0, ["$_init_0", $rt_wrapFunction1(ovi_WindyVertex__init_0), "$addToNeighbors0", $rt_wrapFunction2(ovi_WindyVertex_addToNeighbors), "$getDegree", $rt_wrapFunction0(ovi_WindyVertex_getDegree), "$setDegree", $rt_wrapFunction1(ovi_WindyVertex_setDegree), "$getNeighbors0", $rt_wrapFunction0(ovi_WindyVertex_getNeighbors), "$getNeighbors", $rt_wrapFunction0(ovi_WindyVertex_getNeighbors0)],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue)],
ju_HashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0, ["$newElementArray", $rt_wrapFunction1(ju_HashMap_newElementArray), "$_init_", $rt_wrapFunction0(ju_HashMap__init_2), "$_init_1", $rt_wrapFunction1(ju_HashMap__init_0), "$_init_14", $rt_wrapFunction2(ju_HashMap__init_1), "$clear", $rt_wrapFunction0(ju_HashMap_clear), "$containsKey", $rt_wrapFunction1(ju_HashMap_containsKey), "$entrySet", $rt_wrapFunction0(ju_HashMap_entrySet), "$get1", $rt_wrapFunction1(ju_HashMap_get), "$entryByKey",
$rt_wrapFunction1(ju_HashMap_entryByKey), "$findNonNullKeyEntry", $rt_wrapFunction3(ju_HashMap_findNonNullKeyEntry), "$findNullKeyEntry", $rt_wrapFunction0(ju_HashMap_findNullKeyEntry), "$keySet", $rt_wrapFunction0(ju_HashMap_keySet), "$put", $rt_wrapFunction2(ju_HashMap_put), "$rehash", $rt_wrapFunction1(ju_HashMap_rehash0), "$rehash0", $rt_wrapFunction0(ju_HashMap_rehash), "$remove1", $rt_wrapFunction1(ju_HashMap_remove), "$removeByKey", $rt_wrapFunction1(ju_HashMap_removeByKey), "$size", $rt_wrapFunction0(ju_HashMap_size),
"$values", $rt_wrapFunction0(ju_HashMap_values)],
jur_UMultiLineEOLSet, "UMultiLineEOLSet", 19, jur_AbstractSet, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_UMultiLineEOLSet__init_), "$matches", $rt_wrapFunction3(jur_UMultiLineEOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_UMultiLineEOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_UMultiLineEOLSet_getName)],
ovi_DirectedVertex, "DirectedVertex", 7, oc_Vertex, [], 0, 3, 0, 0, ["$_init_0", $rt_wrapFunction1(ovi_DirectedVertex__init_0), "$addToNeighbors1", $rt_wrapFunction2(ovi_DirectedVertex_addToNeighbors), "$removeFromNeighbors0", $rt_wrapFunction2(ovi_DirectedVertex_removeFromNeighbors), "$getInDegree", $rt_wrapFunction0(ovi_DirectedVertex_getInDegree), "$setInDegree", $rt_wrapFunction1(ovi_DirectedVertex_setInDegree), "$getOutDegree", $rt_wrapFunction0(ovi_DirectedVertex_getOutDegree), "$setOutDegree", $rt_wrapFunction1(ovi_DirectedVertex_setOutDegree),
"$getDelta", $rt_wrapFunction0(ovi_DirectedVertex_getDelta), "$getNeighbors0", $rt_wrapFunction0(ovi_DirectedVertex_getNeighbors0), "$getNeighbors", $rt_wrapFunction0(ovi_DirectedVertex_getNeighbors)],
jur_AbstractCharClass$LazyJavaLetterOrDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue)],
otciu_UnicodeHelper$Range, "UnicodeHelper$Range", 25, jl_Object, [], 0, 3, 0, 0, ["$_init_35", $rt_wrapFunction3(otciu_UnicodeHelper$Range__init_)],
otcit_DoubleAnalyzer, 0, jl_Object, [], 4, 3, 0, otcit_DoubleAnalyzer_$callClinit, 0,
jur_EOLSet, "EOLSet", 19, jur_AbstractSet, [], 4, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_EOLSet__init_), "$matches", $rt_wrapFunction3(jur_EOLSet_matches), "$hasConsumed", $rt_wrapFunction1(jur_EOLSet_hasConsumed), "$getName", $rt_wrapFunction0(jur_EOLSet_getName)]]);
$rt_metadata([jur_AbstractLineTerminator$2, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractLineTerminator$2__init_), "$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$2_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$2_isAfterLineTerminator)],
otciu_CharMapping, 0, jl_Object, [], 0, 3, 0, 0, ["$_init_34", $rt_wrapFunction2(otciu_CharMapping__init_)],
jur_AbstractLineTerminator$1, 0, jur_AbstractLineTerminator, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractLineTerminator$1__init_), "$isLineTerminator", $rt_wrapFunction1(jur_AbstractLineTerminator$1_isLineTerminator), "$isAfterLineTerminator", $rt_wrapFunction2(jur_AbstractLineTerminator$1_isAfterLineTerminator)],
opir_WindyRPP, 0, opi_RuralPostmanProblem, [], 0, 3, 0, 0, ["$_init_67", $rt_wrapFunction2(opir_WindyRPP__init_), "$getProblemAttributes", $rt_wrapFunction0(opir_WindyRPP_getProblemAttributes)],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue)],
jur_Lexer, 0, jl_Object, [], 0, 0, 0, 0, ["$_init_29", $rt_wrapFunction2(jur_Lexer__init_), "$peek0", $rt_wrapFunction0(jur_Lexer_peek), "$setMode", $rt_wrapFunction1(jur_Lexer_setMode), "$restoreFlags", $rt_wrapFunction1(jur_Lexer_restoreFlags), "$peekSpecial", $rt_wrapFunction0(jur_Lexer_peekSpecial), "$isSpecial", $rt_wrapFunction0(jur_Lexer_isSpecial), "$isNextSpecial", $rt_wrapFunction0(jur_Lexer_isNextSpecial), "$next0", $rt_wrapFunction0(jur_Lexer_next), "$nextSpecial", $rt_wrapFunction0(jur_Lexer_nextSpecial),
"$lookAhead", $rt_wrapFunction0(jur_Lexer_lookAhead), "$back", $rt_wrapFunction0(jur_Lexer_back), "$toString", $rt_wrapFunction0(jur_Lexer_toString), "$isEmpty", $rt_wrapFunction0(jur_Lexer_isEmpty), "$isLetter0", $rt_wrapFunction0(jur_Lexer_isLetter0), "$isHighSurrogate0", $rt_wrapFunction0(jur_Lexer_isHighSurrogate0), "$isLowSurrogate0", $rt_wrapFunction0(jur_Lexer_isLowSurrogate0), "$getIndex", $rt_wrapFunction0(jur_Lexer_getIndex)],
jur_AbstractCharClass$LazySpecialsBlock, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazySpecialsBlock_computeValue)],
jur_AbstractCharClass$LazyNonSpace, 0, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace__init_), "$computeValue", $rt_wrapFunction0(jur_AbstractCharClass$LazyNonSpace_computeValue)],
otci_CharFlow, 0, jl_Object, [], 0, 3, 0, 0, ["$_init_32", $rt_wrapFunction1(otci_CharFlow__init_)],
jur_RangeSet, "RangeSet", 19, jur_LeafSet, [], 0, 0, 0, 0, ["$_init_49", $rt_wrapFunction1(jur_RangeSet__init_), "$accepts", $rt_wrapFunction2(jur_RangeSet_accepts), "$getName", $rt_wrapFunction0(jur_RangeSet_getName), "$first", $rt_wrapFunction1(jur_RangeSet_first), "$getChars", $rt_wrapFunction0(jur_RangeSet_getChars)],
jur_UnicodeCategory, "UnicodeCategory", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_UnicodeCategory__init_), "$contains", $rt_wrapFunction1(jur_UnicodeCategory_contains)],
jur_UnicodeCategoryScope, "UnicodeCategoryScope", 19, jur_UnicodeCategory, [], 0, 0, 0, 0, ["$_init_1", $rt_wrapFunction1(jur_UnicodeCategoryScope__init_), "$contains", $rt_wrapFunction1(jur_UnicodeCategoryScope_contains)],
opic_DirectedCPP, 0, opi_ChinesePostmanProblem, [], 0, 3, 0, 0, ["$_init_63", $rt_wrapFunction2(opic_DirectedCPP__init_), "$getProblemAttributes", $rt_wrapFunction0(opic_DirectedCPP_getProblemAttributes)],
jur_CharClass, "CharClass", 19, jur_AbstractCharClass, [], 0, 0, 0, 0, ["$_init_", $rt_wrapFunction0(jur_CharClass__init_2), "$_init_71", $rt_wrapFunction2(jur_CharClass__init_0), "$_init_78", $rt_wrapFunction3(jur_CharClass__init_1), "$add", $rt_wrapFunction1(jur_CharClass_add), "$add7", $rt_wrapFunction1(jur_CharClass_add1), "$add0", $rt_wrapFunction2(jur_CharClass_add0), "$union", $rt_wrapFunction1(jur_CharClass_union), "$intersection", $rt_wrapFunction1(jur_CharClass_intersection), "$contains", $rt_wrapFunction1(jur_CharClass_contains),
"$getBits", $rt_wrapFunction0(jur_CharClass_getBits), "$getLowHighSurrogates", $rt_wrapFunction0(jur_CharClass_getLowHighSurrogates), "$getInstance", $rt_wrapFunction0(jur_CharClass_getInstance), "$toString", $rt_wrapFunction0(jur_CharClass_toString), "$hasUCI", $rt_wrapFunction0(jur_CharClass_hasUCI)],
otcit_DoubleSynthesizer, 0, jl_Object, [], 4, 3, 0, otcit_DoubleSynthesizer_$callClinit, 0,
otcit_FloatAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(otcit_FloatAnalyzer$Result__init_)],
oe_NegativeCycleException, "NegativeCycleException", 11, jl_Exception, [], 0, 3, 0, 0, ["$_init_55", $rt_wrapFunction4(oe_NegativeCycleException__init_0), "$getViolatingEdgePath", $rt_wrapFunction0(oe_NegativeCycleException_getViolatingEdgePath)],
jur_UCIDecomposedCharSet, "UCIDecomposedCharSet", 19, jur_DecomposedCharSet, [], 0, 0, 0, 0, ["$_init_27", $rt_wrapFunction2(jur_UCIDecomposedCharSet__init_)],
jl_String$_clinit_$lambda$_115_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0, ["$_init_", $rt_wrapFunction0(jl_String$_clinit_$lambda$_115_0__init_)],
ju_HashMap$EntryIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0, ["$_init_37", $rt_wrapFunction1(ju_HashMap$EntryIterator__init_), "$next1", $rt_wrapFunction0(ju_HashMap$EntryIterator_next), "$next", $rt_wrapFunction0(ju_HashMap$EntryIterator_next0)],
ju_Collections, 0, jl_Object, [], 0, 3, 0, ju_Collections_$callClinit, 0,
ogi_UndirectedGraph, "UndirectedGraph", 13, oc_MutableGraph, [], 0, 3, [0,0,0], ogi_UndirectedGraph_$callClinit, ["$_init_", $rt_wrapFunction0(ogi_UndirectedGraph__init_0), "$_init_1", $rt_wrapFunction1(ogi_UndirectedGraph__init_1), "$addVertex2", $rt_wrapFunction1(ogi_UndirectedGraph_addVertex), "$addEdge0", $rt_wrapFunction1(ogi_UndirectedGraph_addEdge0), "$removeEdge2", $rt_wrapFunction1(ogi_UndirectedGraph_removeEdge), "$getDeepCopy2", $rt_wrapFunction0(ogi_UndirectedGraph_getDeepCopy0), "$constructEdge4",
$rt_wrapFunction4(ogi_UndirectedGraph_constructEdge0), "$constructVertex3", $rt_wrapFunction1(ogi_UndirectedGraph_constructVertex0), "$addVertex3", $rt_wrapFunction1(ogi_UndirectedGraph_addVertex0), "$addEdge9", $rt_wrapFunction1(ogi_UndirectedGraph_addEdge), "$getDeepCopy3", $rt_wrapFunction0(ogi_UndirectedGraph_getDeepCopy), "$constructEdge0", $rt_wrapFunction4(ogi_UndirectedGraph_constructEdge), "$constructVertex", $rt_wrapFunction1(ogi_UndirectedGraph_constructVertex)]]);
let $rt_booleanArrayCls = $rt_arraycls($rt_booleancls),
$rt_charArrayCls = $rt_arraycls($rt_charcls),
$rt_byteArrayCls = $rt_arraycls($rt_bytecls),
$rt_shortArrayCls = $rt_arraycls($rt_shortcls),
$rt_intArrayCls = $rt_arraycls($rt_intcls),
$rt_longArrayCls = $rt_arraycls($rt_longcls);
$rt_stringPool([": ", "\tat ", "Caused by: ", "String is null", "String is empty", "String contains invalid digits: ", "String contains digits out of radix ", "The value is too big for int type: ", "The value is too big for integer type", "Illegal radix: ", "JointSet", "CI back reference: ", "CI sequence: ", "<Quant>", "It seems as though this solution is invalid(?)", "<GroupQuant>", "It does not appear as though capacity has been set for this link.", "The capacity cannot be set to less than 0.", "-", "UCI back reference: ",
"UCI sequence: ", "<DotAllQuant>", "fSet", "BehindFSet", "null", "false", "true", "CompositeRangeSet:  <nonsurrogate> ", " <surrogate> ", " ", "^ ", "range:", "FinalSet", "", "No solution has been set for this problem yet.", "VertexData{id=", ", x=", ", y=", "<Empty set>", "This problem will treat ever link as required, regardless of its status in the graph.", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase", "javaUpperCase", "javaWhitespace",
"javaMirrored", "javaDefined", "javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart", "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar", "javaTitleCase", "javaUnicodeIdentifierPart", "javaUnicodeIdentifierStart", "Space", "w", "W", "s", "S", "d", "D", "BasicLatin", "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement", "Armenian", "Hebrew",
"Arabic", "Syriac", "ArabicSupplement", "Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement", "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement", "CombiningDiacriticalMarksSupplement",
"LatinExtendedAdditional", "GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts", "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms", "Arrows", "MathematicalOperators", "MiscellaneousTechnical", "ControlPictures", "OpticalCharacterRecognition", "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns", "SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B",
"SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows", "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended", "SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals", "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation", "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility", "CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols",
"CJKUnifiedIdeographs", "YiSyllables", "YiRadicals", "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates", "LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs", "AlphabeticPresentationForms", "ArabicPresentationForms-A", "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all", "Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM",
"Mn", "Me", "Mc", "N", "Nd", "Nl", "No", "IsZ", "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "It appears that this problem does not match the problem type handled by this solver.", "It appears as though this solution contains multiple routes to a single vehicle problem.", "It does not appear as though this solver has been run yet!", "=======================================================\n", ": Printing current solution...",
"\n", "=======================================================", "Vertices: ", "Edges: ", "Route Cost: ", "orig", "oddVertex", "matchingEdge", "to make even", "Gdr", "Gaux", "Benavent\'s H1 Heuristic for the Windy Rural Postman Problem", "Warning: Greedy matching failed to find perfect matching for vertex ", "decomposed char:", "LinkData{v1=", ", v2=", ", cost=", ", reverseCost=", ", isDirected=", ", isRequired=", "AheadFSet", "NonCapJointSet", "PosLookaheadJointSet", "NegLookaheadJointSet", "DIRECTED", "UNDIRECTED",
"MIXED", "WINDY", "A", "B", "C", "E", "F", "(this Collection)", ", ", "0", "und", "en", "CA", "fr", "zh", "CN", "FR", "de", "DE", "it", "IT", "ja", "JP", "ko", "KR", "TW", "GB", "US", "original", "MST Graph", "mst added", "flow", "a", "b", "c", "DEBUG", "swapDir", "reconnection step", "connection step", "forward", "backward", "final", "ans", "The flow augmentation failed.", "Cost is: ", "The UCPP augmentation failed.", "real insertion", "BADDD: In the third improvement procedure for Benavent\'s Solver, we have a flow arc that isn\'t recognized as real or artificial.",
"Win\'s Heuristic for the Windy Rural Postman Problem", "PosBehindJointSet", "sequence: ", "EOI", "symmetric setup graph", "matching graph", "matching edge", "from largeCycles", "parity graph", "from U", "from M", "duplicate from M\'\'", "directed from U", "even setup graph", "added in phase I", "copy from symmetry", "ans2 chosen: ", "ans1 chosen: ", "Frederickson\'s Mixed Chinese Postman Heuristic", "UCI range:", "You may only direct a type A or type D edge.", "Cannot copy an undirected edge, direct it first",
"Cannot copy a type D edge, please decide on a direction first", "Can only add a reverse copy if we are of type B.", "^", "NegBehindJointSet", "added from flow", "Edmonds\' Directed Chinese Postman Solver (Exact)", "back reference: ", "<DotQuant>", "from constructor", "The link with this id does not appear to exist in this graph.", "You are trying to add a vertex to a second graph.  Behavior beyond this point is not guaranteed.", "No vertex with the specified id exists in this graph.", "Could not remove edge because it wasn\'t detected as existing in the first place!",
"The endpoint indices passed in do not seem to fall within the valid range of this graph.", "The specified endpoints do not appear to exist in this graph.", "This graph does not appear to contain the specified link.", "deep copy original", "Parsing OARLIB content...", "%", "Depot ID", "N:", "LINKS", "END", "END LINKS", "VERTICES", "END VERTICES", "LINE FORMAT", "Skipping malformed link line: ", "Skipping malformed vertex line: ", "No valid LINKS section found in OARLIB content.", "Creating WindyGraph with ",
" vertices and ", " edges", "Failed to add edge: ", "; reason: ", "Failed to set vertex coordinates: ", "Graph parsing complete. Vertices: ", ", Edges: ", "OARLIB content is empty.", "Parsing OARLIB content for DirectedGraph...", "Unable to determine vertex count from OARLIB content.", "Creating DirectedGraph with ", "edge", "Parsing OARLIB content for UndirectedGraph...", "Creating UndirectedGraph with ", "Parsing OARLIB content for MixedGraph...", "Creating MixedGraph with ", "﻿", "\r\n", "\r", "ISDIRECTED",
"REVERSE", "ISREQUIRED", "REQUIRED", ",", "t", "yes", "y", "f", "no", "n", "1", ":", "PreviousMatch", "[]", "NonCapFSet", "Edmonds\' Exact Undirected Chinese Postman Solver", "UCI ", "Either src or dest is null", "UNKNOWN", "SINGLE_VEHICLE", "MULTI_VEHICLE", "NO_VEHICLES", ".", "DotAll", "CI ", "decomposed Hangul syllable:", "SINGLE_DEPOT", "MULTI_DEPOT", "NO_DEPOTS", "WordBoundary", "<EOL>", "AtomicFSet", "You are attempting to run hierholzer\'s algorithm on a non eulerian graph.", "Running hierholzer\'s algorithm on an empty graph.",
"You are attempting to run hierholzer\'s algorithm on a non-strongly connected graph.", "There\'s something wrong; a vertex is completely detached from the rest of the graph.", "The input arrays to the Bellman-Ford procedure is not of the expected size.", "This graph contains a negative cycle.  It is being logged.", "This graph contains a negative cycle.", "dijsktrasWidestPathAlgorithm: The passed in dist and path arrays have the wrong size.", "Tried to run directUndirectedCycles on a non-eulerian Mixed Graph.",
"temp", "directing cycle", "The input arrays to the Floyd-Warshall procedure is not of the expected size.", "The input arrays to the Floyd-Warshall least cost paths procedure is not of the expected size.", "source", "sink", "Your graph is not connected, or this is not a valid flow problem", "source arc", "sink arc", "posFSet", "copy", "You cannot service a link that does not demand service.", "The link you\'re attempting to add doens\'t share an endpoint with the previous one.", "Adjacent links in this route didn\'t share a common vertex.  Please try running checkRoutes to verify the integrity of the route.",
"<MultiLine $>", "RESIDENTIAL", "COMMERCIAL", "CIVIC", "OTHER", "NOT_SET", "for cycle elimination", "Am is malformed.", "Wrong type.", "Em is malformed.", "special zero case", "New cost: ", ".  Old cost: ", "Adding path from: ", ", to ", "Improvement detected: ", "Yaoyuenyong\'s Mixed Chinese Postman Heuristic Solver", "<SOL>", "This graph does not appear to contain the specified arc.", "7", "instance", "Vertex degrees:", "Vertex ", ": degree=", ", inDegree=", ", outDegree=", "Instance", "ERROR: DRPP Solver is not supported in TeaVM due to native library dependencies (MSArbor).",
"Please use solver 1, 2, 3, 4, 5, or 7 instead.", "===================", "Welcome to the Open Source Arc Routing Library (OARLib).\n", "If you would like to use this software as a command-line utility,\n", "please use the call structure: oarlib.jar [solver] [instance file path].\n\n", "[solver] - \n\n", "  1 - Directed Chinese Postman Exact Solver (Edmonds\'s Algorithm).\n", "  2 - Undirected Chinese Postman Exact Solver (Edmonds\'s Algorithm).\n", "  3 - Mixed Chinese Postman (Frederickson\'s Heuristic).\n",
"  4 - Mixed Chinese Postman (Yaoyuenyong et al.\'s Heuristic)\n", "  5 - Windy Chinese Postman (Win\'s Heuristic)\n", "  6 - Directed Rural Postman (Christofides\'s Heuristic)\n", "  7 - Windy Rural Postman (Benavent et al.\'s Heuristic)\n", "If you would like to extend this code, or use its API directly,\n", "please see the README and docs for additional details.\n", "===================\n", "It appears as though every link in this graph is required.  Consider running a Chinese Postman solver.", "CHINESE_POSTMAN",
"RURAL_POSTMAN", "PARTITIONING", "Patter is null", "\\Q", "\\E", "\\\\E\\Q", "TRUNK", "PRIMARY", "SECONDARY", "TERTIARY", "RESIDENTIAL_ACCESS", "[DEBUG] ", " - ", "[INFO] ", "[WARN] ", "[ERROR] ", "<Unix MultiLine $>", "Is", "In"]);
jl_String.prototype.toString = function() {
    return $rt_ustr(this);
};
jl_String.prototype.valueOf = jl_String.prototype.toString;
jl_Object.prototype.toString = function() {
    return $rt_ustr(jl_Object_toString(this));
};
jl_Object.prototype.__teavm_class__ = function() {
    return $dbg_class(this);
};
let $rt_export_main = $rt_mainStarter(ot_TeaVMWrapper_main);
$rt_export_main.javaException = $rt_javaException;
$rt_exports.main = $rt_export_main;
}));

//# sourceMappingURL=teavm.js.map